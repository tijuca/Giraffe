From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 18 Feb 2019 19:26:58 +0100
Subject: dbadm: pass shared_ptr<KDatabase> consistently

Helps with the upcoming parallel execution patches.
---
 ECtools/dbadm.cpp | 65 ++++++++++++++++++++++++++++---------------------------
 1 file changed, 33 insertions(+), 32 deletions(-)

diff --git a/ECtools/dbadm.cpp b/ECtools/dbadm.cpp
index b8ca4cf..53451b1 100644
--- a/ECtools/dbadm.cpp
+++ b/ECtools/dbadm.cpp
@@ -19,6 +19,7 @@
 
 using namespace std::string_literals;
 using namespace KC;
+using fancydb = std::shared_ptr<KDatabase>;
 
 static int adm_sigterm_count = 3;
 static bool adm_quit;
@@ -33,24 +34,24 @@ static const std::string our_proptables_hier[] = {
 	"indexedproperties", "singleinstances",
 };
 
-static ECRESULT hidx_add(KDatabase &db, const std::string &tbl)
+static ECRESULT hidx_add(fancydb db, const std::string &tbl)
 {
 	ec_log_notice("dbadm: adding temporary helper index on %s", tbl.c_str());
-	return db.DoUpdate("ALTER TABLE " + tbl + " ADD INDEX tmptag (tag)");
+	return db->DoUpdate("ALTER TABLE " + tbl + " ADD INDEX tmptag (tag)");
 }
 
-static ECRESULT hidx_remove(KDatabase &db, const std::string &tbl)
+static ECRESULT hidx_remove(fancydb db, const std::string &tbl)
 {
 	ec_log_notice("dbadm: discard helper index on %s", tbl.c_str());
-	return db.DoUpdate("ALTER TABLE " + tbl + " DROP INDEX tmptag");
+	return db->DoUpdate("ALTER TABLE " + tbl + " DROP INDEX tmptag");
 }
 
-static std::set<std::string> index_tags2(std::shared_ptr<KDatabase> db)
+static std::set<std::string> index_tags2(fancydb db)
 {
 	std::set<std::string> status;
 	ECRESULT coll = erSuccess;
 	for (const auto &tbl : our_proptables) {
-		auto ret = hidx_add(*db.get(), tbl);
+		auto ret = hidx_add(db, tbl);
 		if (ret == erSuccess)
 			status.emplace(tbl);
 		if (coll == erSuccess)
@@ -61,17 +62,17 @@ static std::set<std::string> index_tags2(std::shared_ptr<KDatabase> db)
 	return status;
 }
 
-static ECRESULT index_tags(std::shared_ptr<KDatabase> db)
+static ECRESULT index_tags(fancydb db)
 {
 	index_tags2(db);
 	return erSuccess;
 }
 
-static ECRESULT remove_helper_index(std::shared_ptr<KDatabase> db)
+static ECRESULT remove_helper_index(fancydb db)
 {
 	ECRESULT coll = erSuccess;
 	for (const auto &tbl : our_proptables) {
-		auto ret = hidx_remove(*db.get(), tbl);
+		auto ret = hidx_remove(db, tbl);
 		if (coll == erSuccess)
 			coll = ret;
 	}
@@ -80,7 +81,7 @@ static ECRESULT remove_helper_index(std::shared_ptr<KDatabase> db)
 	return erSuccess;
 }
 
-static ECRESULT np_defrag(std::shared_ptr<KDatabase> db)
+static ECRESULT np_defrag(fancydb db)
 {
 	DB_RESULT result;
 	DB_ROW row;
@@ -171,20 +172,20 @@ static ECRESULT np_defrag(std::shared_ptr<KDatabase> db)
 	return erSuccess;
 }
 
-static ECRESULT np_remove_highid(KDatabase &db)
+static ECRESULT np_remove_highid(fancydb db)
 {
 	/*
 	 * This is a no-op for systems where only K-1220 and no K-1219 was
 	 * diagnosed.
 	 */
 	ec_log_notice("dbadm: executing action \"np-remove-highid\"");
-	return db.DoUpdate("DELETE FROM names WHERE id > 31485");
+	return db->DoUpdate("DELETE FROM names WHERE id > 31485");
 }
 
-static ECRESULT np_remove_unused(KDatabase &db)
+static ECRESULT np_remove_unused(fancydb db)
 {
 	ec_log_notice("dbadm: executing action \"np-remove-unused\"");
-	auto ret = db.DoUpdate("CREATE TEMPORARY TABLE ut (PRIMARY KEY (`tag`)) SELECT * FROM ("
+	auto ret = db->DoUpdate("CREATE TEMPORARY TABLE ut (PRIMARY KEY (`tag`)) SELECT * FROM ("
 		"SELECT DISTINCT tag FROM properties UNION "
 		"SELECT DISTINCT tag FROM tproperties UNION "
 		"SELECT DISTINCT tag FROM mvproperties UNION "
@@ -194,14 +195,14 @@ static ECRESULT np_remove_unused(KDatabase &db)
 	if (ret != erSuccess)
 		return ret;
 	unsigned int aff = 0;
-	ret = db.DoDelete("DELETE names FROM names LEFT JOIN ut ON names.id+34049=ut.tag WHERE ut.tag IS NULL", &aff);
+	ret = db->DoDelete("DELETE names FROM names LEFT JOIN ut ON names.id+34049=ut.tag WHERE ut.tag IS NULL", &aff);
 	if (ret != erSuccess)
 		return ret;
 	ec_log_notice("remove-unused: expunged %u rows.", aff);
 	return erSuccess;
 }
 
-static ECRESULT np_remove_xh(std::shared_ptr<KDatabase> db)
+static ECRESULT np_remove_xh(fancydb db)
 {
 	ec_log_notice("dbadm: executing action \"np-remove-xh\"");
 	unsigned int aff = 0;
@@ -228,7 +229,7 @@ static ECRESULT np_remove_xh(std::shared_ptr<KDatabase> db)
 	return erSuccess;
 }
 
-static ECRESULT np_repair_dups(std::shared_ptr<KDatabase> db)
+static ECRESULT np_repair_dups(fancydb db)
 {
 	DB_RESULT result;
 	DB_ROW row;
@@ -352,24 +353,24 @@ static ECRESULT np_repair_dups(std::shared_ptr<KDatabase> db)
 	return erSuccess;
 }
 
-static ECRESULT np_stat(KDatabase &db)
+static ECRESULT np_stat(fancydb db)
 {
 	DB_RESULT result;
-	auto ret = db.DoSelect("SELECT MAX(id) FROM `names`", &result);
+	auto ret = db->DoSelect("SELECT MAX(id) FROM `names`", &result);
 	if (ret != erSuccess)
 		return ret;
 	auto row = result.fetch_row();
 	assert(row != nullptr && row[0] != nullptr);
 	auto top_id = strtoul(row[0], nullptr, 0);
 
-	ret = db.DoSelect("SELECT COUNT(*) FROM `names`", &result);
+	ret = db->DoSelect("SELECT COUNT(*) FROM `names`", &result);
 	if (ret != erSuccess)
 		return ret;
 	row = result.fetch_row();
 	assert(row != nullptr && row[0] != nullptr);
 	auto uniq_ids = strtoul(row[0], nullptr, 0);
 
-	ret = db.DoSelect("SELECT COUNT(*) FROM (SELECT 1 FROM `names` "
+	ret = db->DoSelect("SELECT COUNT(*) FROM (SELECT 1 FROM `names` "
 		"GROUP BY `guid`, `nameid`, `namestring`) AS `t1`", &result);
 	if (ret != erSuccess)
 		return ret;
@@ -383,7 +384,7 @@ static ECRESULT np_stat(KDatabase &db)
 	return erSuccess;
 }
 
-static ECRESULT k1216(std::shared_ptr<KDatabase> db)
+static ECRESULT k1216(fancydb db)
 {
 	auto idx = index_tags2(db);
 	/* If indices failed, so be it. Proceed at slow speed, then. */
@@ -394,14 +395,14 @@ static ECRESULT k1216(std::shared_ptr<KDatabase> db)
 	});
 	auto clean_indices = make_scope_success([&]() {
 		for (const auto &tbl : idx)
-			hidx_remove(*db.get(), tbl.c_str());
+			hidx_remove(db, tbl.c_str());
 	});
-	auto ret = np_remove_highid(*db.get());
+	auto ret = np_remove_highid(db);
 	if (ret != erSuccess)
 		return ret;
 	if (adm_quit)
 		return erSuccess;
-	ret = np_remove_unused(*db.get());
+	ret = np_remove_unused(db);
 	if (ret != erSuccess)
 		return ret;
 	if (adm_quit)
@@ -414,7 +415,7 @@ static ECRESULT k1216(std::shared_ptr<KDatabase> db)
 	return np_defrag(db);
 }
 
-static ECRESULT kc1375(std::shared_ptr<KDatabase> db)
+static ECRESULT kc1375(fancydb db)
 {
 	ec_log_notice("kc1375: purging problematic-looking IMAP envelopes...");
 	unsigned int aff = 0;
@@ -428,7 +429,7 @@ static ECRESULT kc1375(std::shared_ptr<KDatabase> db)
 	return erSuccess;
 }
 
-static ECRESULT usmp_shrink_columns(std::shared_ptr<KDatabase> db)
+static ECRESULT usmp_shrink_columns(fancydb db)
 {
 	unsigned int aff = 0;
 	ec_log_notice("dbadm: executing action \"usmp-column-shrink\"");
@@ -476,7 +477,7 @@ static ECRESULT usmp_shrink_columns(std::shared_ptr<KDatabase> db)
 	return db->DoUpdate("ALTER TABLE `settings` MODIFY COLUMN `name` varchar(185) BINARY NOT NULL");
 }
 
-static ECRESULT usmp_charset(std::shared_ptr<KDatabase> db)
+static ECRESULT usmp_charset(fancydb db)
 {
 	ec_log_notice("dbadm: executing action \"usmp-charset\"");
 	for (const auto &tbl : {"abchanges", "acl", "changes", "deferredupdate",
@@ -526,7 +527,7 @@ static ECRESULT usmp_charset(std::shared_ptr<KDatabase> db)
 	return db->DoUpdate("REPLACE INTO `settings` (`name`, `value`) VALUES ('charset', 'utf8mb4')");
 }
 
-static ECRESULT usmp(std::shared_ptr<KDatabase> db)
+static ECRESULT usmp(fancydb db)
 {
 	auto ret = usmp_shrink_columns(db);
 	if (ret != erSuccess)
@@ -624,15 +625,15 @@ int main(int argc, char **argv)
 		else if (strcmp(argv[i], "np-defrag") == 0)
 			ret = np_defrag(db);
 		else if (strcmp(argv[i], "np-remove-highid") == 0)
-			ret = np_remove_highid(*db.get());
+			ret = np_remove_highid(db);
 		else if (strcmp(argv[i], "np-remove-unused") == 0)
-			ret = np_remove_unused(*db.get());
+			ret = np_remove_unused(db);
 		else if (strcmp(argv[i], "np-remove-xh") == 0)
 			ret = np_remove_xh(db);
 		else if (strcmp(argv[i], "np-repair-dups") == 0)
 			ret = np_repair_dups(db);
 		else if (strcmp(argv[i], "np-stat") == 0)
-			ret = np_stat(*db.get());
+			ret = np_stat(db);
 		else if (strcmp(argv[i], "index-tags") == 0)
 			ret = index_tags(db);
 		else if (strcmp(argv[i], "rm-helper-index") == 0)

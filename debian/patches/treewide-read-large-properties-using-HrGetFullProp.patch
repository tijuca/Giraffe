From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 20 Mar 2019 18:02:41 +0100
Subject: treewide: read large properties using HrGetFullProp

Some properties are just generally large all the time - and cannot always be
successfully requested via HrGetOneProp. netitwork tally:

SQL> SELECT HEX(tag), MAX(LEN(val_string)) AS z FROM properties
     WHERE type=30 GROUP BY tag ORDER BY z; -- PT_TSTRING

+-tag------+-------z-+
| 70       |    2230 |
| 37       |    2230 |
| 6774     |    3889 |
| E04      |    4658 |
| 6770     |    7346 |
| 1039     |    7945 |
| 678E     |   14065 |
| 6706     |   15940 |
| 678F     |   18064 |
| 6772     |   40487 |
| 6771     |   41690 |
| 6773     |   62098 |
| 7D       |  113817 |
| 1000     | 1871629 |
+-tag------+-------z-+

SQL> SELECT HEX(tag), MAX(LEN(val_string)) AS z FROM properties
     WHERE type=258 GROUP BY tag ORDER BY z; -- PT_BINARY

+-tag------+-------z-+
| 8016     |    3740 |
| 7C08     |    6682 |
| 6835     |    7968 |
| 3709     |   13496 |
| 683C     |   15011 |
| 6802     |   21004 |
| 3FE1     |   59844 |
| 1009     |  156008 |
| 7C09     |  201199 |
| 1013     | 3140302 |
+-tag------+-------z-+

References: KC-1443
---
 inetmapi/MAPIToVMIME.cpp  | 15 ++++++++-------
 inetmapi/VMIMEToMAPI.cpp  |  6 +++---
 libicalmapi/mapitovcf.cpp |  3 ++-
 spooler/DAgent.cpp        |  2 +-
 spooler/mailer.cpp        |  2 +-
 spooler/rules.cpp         | 12 ++++++------
 6 files changed, 21 insertions(+), 19 deletions(-)

diff --git a/inetmapi/MAPIToVMIME.cpp b/inetmapi/MAPIToVMIME.cpp
index f71e3f7..012f535 100644
--- a/inetmapi/MAPIToVMIME.cpp
+++ b/inetmapi/MAPIToVMIME.cpp
@@ -573,7 +573,7 @@ HRESULT MAPIToVMIME::BuildNoteMessage(IMessage *lpMessage,
 		// PR_TRANSPORT_MESSAGE_HEADERS)
 		// currently includes: Received*, Return-Path, List* and Precedence.
 		// New e-mails should not have this property.
-		if (HrGetOneProp(lpMessage, PR_TRANSPORT_MESSAGE_HEADERS_A, &~lpTransportHeaders) == hrSuccess &&
+		if (HrGetFullProp(lpMessage, PR_TRANSPORT_MESSAGE_HEADERS_A, &~lpTransportHeaders) == hrSuccess &&
 		    lpTransportHeaders != nullptr) {
 			try {
 				int j=0;
@@ -754,7 +754,7 @@ HRESULT MAPIToVMIME::BuildMDNMessage(IMessage *lpMessage,
 		vmMessage = vmime::mdn::MDNHelper::buildMDN(mdnInfos, strMDNText, m_vmCharset, expeditor, dispo, reportingUA, reportingUAProducts);
 
 		// rewrite subject
-		if (HrGetOneProp(lpMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
+		if (HrGetFullProp(lpMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
 			removeEnters(lpSubject->Value.lpszW);
 
 			strOut = lpSubject->Value.lpszW;
@@ -980,7 +980,7 @@ HRESULT MAPIToVMIME::fillVMIMEMail(IMessage *lpMessage, bool bSkipContent, vmime
 	eBestBody bestBody = plaintext;
 
 	try {
-		if (HrGetOneProp(lpMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
+		if (HrGetFullProp(lpMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
 			removeEnters(lpSubject->Value.lpszW);
 			strOut = lpSubject->Value.lpszW;
 		}
@@ -1343,7 +1343,8 @@ HRESULT MAPIToVMIME::handleExtraHeaders(IMessage *lpMessage,
 	}
 
 	// Outlook never adds this property
-	if (HrGetOneProp(lpMessage, PR_INTERNET_REFERENCES_A, &~ptrMessageId) == hrSuccess && ptrMessageId->Value.lpszA[0]) {
+	if (HrGetFullProp(lpMessage, PR_INTERNET_REFERENCES_A, &~ptrMessageId) == hrSuccess &&
+	    ptrMessageId->Value.lpszA[0] != '\0') {
 		std::vector<std::string> ids = tokenize(ptrMessageId->Value.lpszA, ' ', true);
 
 		const size_t n = ids.size();
@@ -1370,7 +1371,7 @@ HRESULT MAPIToVMIME::handleExtraHeaders(IMessage *lpMessage,
 		vmHeader->appendField(hff->create("X-Mailer", "Kopano " PROJECT_VERSION));
 
 	// PR_CONVERSATION_INDEX
-	if (HrGetOneProp(lpMessage, PR_CONVERSATION_INDEX, &~lpConversationIndex) == hrSuccess) {
+	if (HrGetFullProp(lpMessage, PR_CONVERSATION_INDEX, &~lpConversationIndex) == hrSuccess) {
 		vmime::string inString;
 		inString.assign((const char*)lpConversationIndex->Value.bin.lpb, lpConversationIndex->Value.bin.cb);
 
@@ -1385,8 +1386,8 @@ HRESULT MAPIToVMIME::handleExtraHeaders(IMessage *lpMessage,
 	}
 
 	// PR_CONVERSATION_TOPIC is always the original started topic
-	if (HrGetOneProp(lpMessage, PR_CONVERSATION_TOPIC_W, &~lpConversationTopic) == hrSuccess &&
-	    (HrGetOneProp(lpMessage, PR_NORMALIZED_SUBJECT_W, &~lpNormSubject) != hrSuccess ||
+	if (HrGetFullProp(lpMessage, PR_CONVERSATION_TOPIC_W, &~lpConversationTopic) == hrSuccess &&
+	    (HrGetFullProp(lpMessage, PR_NORMALIZED_SUBJECT_W, &~lpNormSubject) != hrSuccess ||
 	    wcscmp(lpNormSubject->Value.lpszW, lpConversationTopic->Value.lpszW) != 0)) {
 		removeEnters(lpConversationTopic->Value.lpszW);
 		vmHeader->appendField(hff->create("Thread-Topic", getVmimeTextFromWide(lpConversationTopic->Value.lpszW).generate()));
diff --git a/inetmapi/VMIMEToMAPI.cpp b/inetmapi/VMIMEToMAPI.cpp
index fcc98f3..f435131 100644
--- a/inetmapi/VMIMEToMAPI.cpp
+++ b/inetmapi/VMIMEToMAPI.cpp
@@ -796,7 +796,7 @@ HRESULT VMIMEToMAPI::handleHeaders(vmime::shared_ptr<vmime::header> vmHeader,
 			hr = lpMessage->SetProps(1, prop.get(), nullptr);
 			if (hr != hrSuccess)
 				return hr;
-		} else if (HrGetOneProp(lpMessage, PR_NORMALIZED_SUBJECT_W, &~lpPropNormalizedSubject) == hrSuccess) {
+		} else if (HrGetFullProp(lpMessage, PR_NORMALIZED_SUBJECT_W, &~lpPropNormalizedSubject) == hrSuccess) {
 			SPropValue sConTopic;
 			sConTopic.ulPropTag = PR_CONVERSATION_TOPIC_W;
 			sConTopic.Value.lpszW = lpPropNormalizedSubject->Value.lpszW;
@@ -1605,7 +1605,7 @@ void VMIMEToMAPI::dissect_message(vmime::shared_ptr<vmime::body> vmBody,
 
 	if (hr != hrSuccess)
 		return;
-	if (HrGetOneProp(lpNewMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
+	if (HrGetFullProp(lpNewMessage, PR_SUBJECT_W, &~lpSubject) == hrSuccess) {
 		// Set PR_ATTACH_FILENAME of attachment to message subject, (WARNING: abuse of lpSubject variable)
 		lpSubject->ulPropTag = PR_DISPLAY_NAME_W;
 		pAtt->SetProps(1, lpSubject, NULL);
@@ -1710,7 +1710,7 @@ HRESULT VMIMEToMAPI::dissect_ical(vmime::shared_ptr<vmime::header> vmHeader,
 		return hr;
 
 	// give attachment name of calendar item
-	if (HrGetOneProp(ptrNewMessage, PR_SUBJECT_W, &~ptrSubject) == hrSuccess) {
+	if (HrGetFullProp(ptrNewMessage, PR_SUBJECT_W, &~ptrSubject) == hrSuccess) {
 		ptrSubject->ulPropTag = PR_DISPLAY_NAME_W;
 
 		hr = ptrAttach->SetProps(1, ptrSubject, NULL);
diff --git a/libicalmapi/mapitovcf.cpp b/libicalmapi/mapitovcf.cpp
index 077138d..b7f443d 100644
--- a/libicalmapi/mapitovcf.cpp
+++ b/libicalmapi/mapitovcf.cpp
@@ -10,6 +10,7 @@
 #include <mapicode.h>
 #include <mapiutil.h>
 #include <mapix.h>
+#include <kopano/CommonUtil.h>
 #include <kopano/memory.hpp>
 #include <kopano/platform.h>
 #include <kopano/mapiguidext.h>
@@ -498,7 +499,7 @@ HRESULT mapitovcf_impl::add_message(IMessage *lpMessage)
 	if (hr != hrSuccess)
 		return hr;
 
-	hr = HrGetOneProp(lpMessage, PR_BODY, &~msgprop);
+	hr = HrGetFullProp(lpMessage, PR_BODY, &~msgprop);
 	if (hr == hrSuccess)
 		to_prop(root, "NOTE", *msgprop);
 	else if (hr != MAPI_E_NOT_FOUND)
diff --git a/spooler/DAgent.cpp b/spooler/DAgent.cpp
index 0df5567..fe2a57a 100644
--- a/spooler/DAgent.cpp
+++ b/spooler/DAgent.cpp
@@ -2196,7 +2196,7 @@ static HRESULT ProcessDeliveryToServer(pym_plugin_intf *lppyMapiPlugin,
 
 				if (HrGetOneProp(lpMessageTmp, PR_INTERNET_MESSAGE_ID_W, &~lpMessageId) == hrSuccess)
 					wMessageId = lpMessageId->Value.lpszW;
-				HrGetOneProp(lpMessageTmp, PR_SUBJECT_W, &~lpSubject);
+				HrGetFullProp(lpMessageTmp, PR_SUBJECT_W, &~lpSubject);
 				ec_log_info("Delivered message to \"%ls\", Subject: \"%ls\", Message-Id: %ls, size %zu",
 					recip->wstrUsername.c_str(),
 					(lpSubject != NULL) ? lpSubject->Value.lpszW : L"<none>",
diff --git a/spooler/mailer.cpp b/spooler/mailer.cpp
index 0835e3f..34fa579 100644
--- a/spooler/mailer.cpp
+++ b/spooler/mailer.cpp
@@ -1651,7 +1651,7 @@ static HRESULT ProcessMessage(IMAPISession *lpAdminSession,
 	}
 
 	/* Get subject for logging - ignore errors, we check for nullptr. */
-	hr = HrGetOneProp(lpMessage, PR_SUBJECT_W, &~lpSubject);
+	hr = HrGetFullProp(lpMessage, PR_SUBJECT_W, &~lpSubject);
 	if (hr != hrSuccess && hr != MAPI_E_NOT_FOUND) {
 		kc_perror("Unable to get subject", hr);
 		goto exit;
diff --git a/spooler/rules.cpp b/spooler/rules.cpp
index 9b70147..2514ce7 100644
--- a/spooler/rules.cpp
+++ b/spooler/rules.cpp
@@ -361,10 +361,10 @@ static HRESULT CreateReplyCopy(LPMAPISESSION lpSession, LPMDB lpOrigStore,
 		return hr;
 
 	// set a sensible subject
-	hr = HrGetOneProp(lpReplyMessage, PR_SUBJECT_W, &~lpProp);
+	hr = HrGetFullProp(lpReplyMessage, PR_SUBJECT_W, &~lpProp);
 	if (hr == hrSuccess && lpProp->Value.lpszW[0] == L'\0') {
 		// Exchange: uses "BT: orig subject" if empty, or only subject from template.
-		hr = HrGetOneProp(lpOrigMessage, PR_SUBJECT_W, &~lpProp);
+		hr = HrGetFullProp(lpOrigMessage, PR_SUBJECT_W, &~lpProp);
 		if (hr == hrSuccess) {
 			strwSubject = wstring(L"BT: ") + lpProp->Value.lpszW;
 			lpProp->Value.lpszW = (WCHAR*)strwSubject.c_str();
@@ -642,7 +642,7 @@ static HRESULT CheckRecipients(IAddrBook *lpAdrBook, IMsgStore *orig_store,
 		auto rule_addr_std = convert_to<std::string>(strRuleAddress);
 		memory_ptr<SPropValue> subject;
 		std::wstring subject_wstd;
-		hr = HrGetOneProp(lpMessage, PR_SUBJECT_W, &~subject);
+		hr = HrGetFullProp(lpMessage, PR_SUBJECT_W, &~subject);
 		if (hr == hrSuccess)
 			subject_wstd = convert_to<std::wstring>(subject->Value.lpszW);
 		else if (hr != MAPI_E_NOT_FOUND)
@@ -799,7 +799,7 @@ static HRESULT CreateForwardCopy(IAddrBook *lpAdrBook, IMsgStore *lpOrigStore,
 	if (hr != hrSuccess)
 		return hr;
 	// set from email ??
-	hr = HrGetOneProp(lpOrigMessage, PR_SUBJECT, &~lpOrigSubject);
+	hr = HrGetFullProp(lpOrigMessage, PR_SUBJECT, &~lpOrigSubject);
 	if (hr == hrSuccess)
 		strSubject = lpOrigSubject->Value.lpszW;
 	if(!bDoNotMunge || bForwardAsAttachment)
@@ -961,7 +961,7 @@ static struct actresult proc_op_reply(IMAPISession *ses, IMsgStore *store,
 	sc->inc(SCN_RULES_REPLY_AND_OOF);
 
 	memory_ptr<SPropValue> pv;
-	if (HrGetOneProp(*msg, PR_TRANSPORT_MESSAGE_HEADERS_A, &~pv) == hrSuccess &&
+	if (HrGetFullProp(*msg, PR_TRANSPORT_MESSAGE_HEADERS_A, &~pv) == hrSuccess &&
 	    dagent_avoid_autoreply(tokenize(pv->Value.lpszA, "\n"))) {
 		ec_log_warn("Rule \""s + rule + "\": Not replying to an autoreply");
 		return {ROP_NOOP};
@@ -1013,7 +1013,7 @@ static struct actresult proc_op_fwd(IAddrBook *abook, IMsgStore *orig_store,
 		return {ROP_NOOP};
 	}
 	memory_ptr<SPropValue> pv;
-	if (HrGetOneProp(*lppMessage, PR_TRANSPORT_MESSAGE_HEADERS_A, &~pv) == hrSuccess &&
+	if (HrGetFullProp(*lppMessage, PR_TRANSPORT_MESSAGE_HEADERS_A, &~pv) == hrSuccess &&
 	    dagent_avoid_autoreply(tokenize(pv->Value.lpszA, "\n"))) {
 		ec_log_warn("Rule \""s + rule + "\": Not forwarding autoreplies");
 		return {ROP_NOOP};

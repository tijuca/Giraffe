From: Jan Engelhardt <jengelh@inai.de>
Date: Tue, 19 Mar 2019 10:57:52 +0100
Subject: libserver: add option to disable cell read cache

Expose the cell cache knob as a config option so it can be made use
of in testing.

References: KC-1417
---
 gateway/IMAP.cpp                    |  4 ++--
 provider/libserver/ECCacheManager.h |  4 ++--
 provider/libserver/cmd.cpp          | 10 ++++++----
 provider/server/ECServer.cpp        |  1 +
 4 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/gateway/IMAP.cpp b/gateway/IMAP.cpp
index 7c5b194..5af6b83 100644
--- a/gateway/IMAP.cpp
+++ b/gateway/IMAP.cpp
@@ -748,7 +748,7 @@ HRESULT IMAP::HrCmdLogin(const std::string &strTag,
 	}
 	hr = HrMakeSpecialsList();
 	if (hr != hrSuccess) {
-		ec_log_warn("Failed to find special folder properties");
+		kc_pwarn("Failed to find special folder properties", hr);
 		HrResponse(RESP_TAGGED_NO, strTag, "LOGIN can't find special folder properties");
 		return hr;
 	}
@@ -2688,7 +2688,7 @@ HRESULT IMAP::HrMakeSpecialsList() {
 
 	auto hr = lpStore->GetProps(sPropsStore, 0, &cValues, &~lpPropArrayStore);
 	if (hr != hrSuccess)
-		return hr;
+		return kc_perror("GetProps SOT", hr);
 	for (ULONG i = 0; i < cValues; ++i)
 		if (PROP_TYPE(lpPropArrayStore[i].ulPropTag) == PT_BINARY)
 			lstSpecialEntryIDs.emplace(BinaryArray(lpPropArrayStore[i].Value.bin), lpPropArrayStore[i].ulPropTag);
diff --git a/provider/libserver/ECCacheManager.h b/provider/libserver/ECCacheManager.h
index 01bd65e..2861426 100644
--- a/provider/libserver/ECCacheManager.h
+++ b/provider/libserver/ECCacheManager.h
@@ -315,6 +315,8 @@ public:
 	void DisableCellCache();
 	void EnableCellCache();
 
+	bool m_bCellCacheDisabled = false;
+
 private:
 	typedef std::unordered_map<unsigned int, ECsQuota> ECMapQuota;
 	typedef std::map<ECsIndexObject, ECsIndexProp> ECMapObjectToProp;
@@ -374,8 +376,6 @@ private:
 	// Properties from kopano-search
 	std::set<unsigned int> 		m_setExcludedIndexProperties;
 	std::mutex m_hExcludedIndexPropertiesMutex;
-	// Testing
-	bool m_bCellCacheDisabled = false;
 };
 
 } /* namespace */
diff --git a/provider/libserver/cmd.cpp b/provider/libserver/cmd.cpp
index 895a531..1826c27 100644
--- a/provider/libserver/cmd.cpp
+++ b/provider/libserver/cmd.cpp
@@ -2659,7 +2659,9 @@ static ECRESULT LoadObject(struct soap *soap, ECSession *lpecSession,
 	sSavedObject.ulObjType = ulObjType;
 	auto cache = lpecSession->GetSessionManager()->GetCacheManager();
 	bool complete = false;
-	if (lpChildProps == nullptr && cache->GetComplete(ulObjId, complete) == erSuccess && complete) {
+	auto rd_cache = !cache->m_bCellCacheDisabled &&
+	                parseBool(g_lpSessionManager->GetConfig()->GetSetting("cache_cellcache_reads"));
+	if (rd_cache && lpChildProps == nullptr && cache->GetComplete(ulObjId, complete) == erSuccess && complete) {
 		std::vector<unsigned int> proptags;
 
 		er = cache->GetPropTags(ulObjId, proptags);
@@ -2701,7 +2703,7 @@ static ECRESULT LoadObject(struct soap *soap, ECSession *lpecSession,
     }
 
 	/* not in cache, so let us cache it */
-	if (!complete) {
+	if (rd_cache && !complete) {
 		er = loadobject_cache(cache, lpChildProps, ulObjId);
 		if (er != erSuccess)
 			return er;
@@ -2717,7 +2719,7 @@ static ECRESULT LoadObject(struct soap *soap, ECSession *lpecSession,
 	mapChildProps.clear();
 
 	if (ulObjType == MAPI_MESSAGE || ulObjType == MAPI_ATTACH) {
-		if (!complete) {
+		if (!rd_cache || !complete) {
 			// Pre-load *all* properties of *all* subobjects for fast accessibility
 			er = PrepareReadProps(soap, lpDatabase, true, lpecSession->GetCapabilities() & KOPANO_CAP_UNICODE, 0, ulObjId, MAX_PROP_SIZE, &mapChildProps, NULL);
 			if (er != erSuccess)
@@ -2740,7 +2742,7 @@ static ECRESULT LoadObject(struct soap *soap, ECSession *lpecSession,
 				ec_log_err("LoadObject(): no rows from db");
 				return KCERR_DATABASE_ERROR; // this should never happen
 			}
-			LoadObject(soap, lpecSession, atoi(lpDBRow[0]), atoi(lpDBRow[1]), ulObjType, &sSavedObject.__ptr[i], complete ? nullptr : &mapChildProps);
+			LoadObject(soap, lpecSession, atoi(lpDBRow[0]), atoi(lpDBRow[1]), ulObjType, &sSavedObject.__ptr[i], rd_cache && complete ? nullptr : &mapChildProps);
 		}
 		mapChildProps.clear();
 	}
diff --git a/provider/server/ECServer.cpp b/provider/server/ECServer.cpp
index cd1b681..b7be18e 100644
--- a/provider/server/ECServer.cpp
+++ b/provider/server/ECServer.cpp
@@ -1018,6 +1018,7 @@ static int running_server(char *szName, const char *szConfig, bool exp_config,
 		{ "kcoidc_insecure_skip_verify", "no", 0},
 		{ "kcoidc_initialize_timeout", "60", 0 },
 #endif
+		{"cache_cellcache_reads", "yes", CONFIGSETTING_RELOADABLE},
 		{ NULL, NULL },
 	};
 

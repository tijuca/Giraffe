# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _MAPICore
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class IUnknown(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IUnknown, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IUnknown, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryInterface(*args): return _MAPICore.IUnknown_QueryInterface(*args)
    __swig_destroy__ = _MAPICore.delete_IUnknown
    __del__ = lambda self : None;
IUnknown_swigregister = _MAPICore.IUnknown_swigregister
IUnknown_swigregister(IUnknown)

STGM_DIRECT = _MAPICore.STGM_DIRECT
STGM_TRANSACTED = _MAPICore.STGM_TRANSACTED
STGM_SIMPLE = _MAPICore.STGM_SIMPLE
STGM_READ = _MAPICore.STGM_READ
STGM_WRITE = _MAPICore.STGM_WRITE
STGM_READWRITE = _MAPICore.STGM_READWRITE
STGM_SHARE_DENY_NONE = _MAPICore.STGM_SHARE_DENY_NONE
STGM_SHARE_DENY_READ = _MAPICore.STGM_SHARE_DENY_READ
STGM_SHARE_DENY_WRITE = _MAPICore.STGM_SHARE_DENY_WRITE
STGM_SHARE_EXCLUSIVE = _MAPICore.STGM_SHARE_EXCLUSIVE
STGM_PRIORITY = _MAPICore.STGM_PRIORITY
STGM_DELETEONRELEASE = _MAPICore.STGM_DELETEONRELEASE
STGM_NOSCRATCH = _MAPICore.STGM_NOSCRATCH
STGM_CREATE = _MAPICore.STGM_CREATE
STGM_CONVERT = _MAPICore.STGM_CONVERT
STGM_FAILIFTHERE = _MAPICore.STGM_FAILIFTHERE
STGM_NOSNAPSHOT = _MAPICore.STGM_NOSNAPSHOT
STGM_DIRECT_SWMR = _MAPICore.STGM_DIRECT_SWMR
STGTY_STORAGE = _MAPICore.STGTY_STORAGE
STGTY_STREAM = _MAPICore.STGTY_STREAM
STGTY_LOCKBYTES = _MAPICore.STGTY_LOCKBYTES
STGTY_PROPERTY = _MAPICore.STGTY_PROPERTY
STREAM_SEEK_SET = _MAPICore.STREAM_SEEK_SET
STREAM_SEEK_CUR = _MAPICore.STREAM_SEEK_CUR
STREAM_SEEK_END = _MAPICore.STREAM_SEEK_END
LOCK_WRITE = _MAPICore.LOCK_WRITE
LOCK_EXCLUSIVE = _MAPICore.LOCK_EXCLUSIVE
LOCK_ONLYONCE = _MAPICore.LOCK_ONLYONCE
STATFLAG_DEFAULT = _MAPICore.STATFLAG_DEFAULT
STATFLAG_NONAME = _MAPICore.STATFLAG_NONAME
STATFLAG_NOOPEN = _MAPICore.STATFLAG_NOOPEN
class ISequentialStream(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISequentialStream, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISequentialStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Write(*args): return _MAPICore.ISequentialStream_Write(*args)
    def Read(*args): return _MAPICore.ISequentialStream_Read(*args)
    __swig_destroy__ = _MAPICore.delete_ISequentialStream
    __del__ = lambda self : None;
ISequentialStream_swigregister = _MAPICore.ISequentialStream_swigregister
ISequentialStream_swigregister(ISequentialStream)

class IStream(ISequentialStream):
    __swig_setmethods__ = {}
    for _s in [ISequentialStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStream, name, value)
    __swig_getmethods__ = {}
    for _s in [ISequentialStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IStream, name)
    __repr__ = _swig_repr
    def Seek(*args): return _MAPICore.IStream_Seek(*args)
    def SetSize(*args): return _MAPICore.IStream_SetSize(*args)
    def CopyTo(*args): return _MAPICore.IStream_CopyTo(*args)
    def Commit(*args): return _MAPICore.IStream_Commit(*args)
    def Revert(*args): return _MAPICore.IStream_Revert(*args)
    def LockRegion(*args): return _MAPICore.IStream_LockRegion(*args)
    def UnlockRegion(*args): return _MAPICore.IStream_UnlockRegion(*args)
    def Stat(*args): return _MAPICore.IStream_Stat(*args)
    def Clone(*args): return _MAPICore.IStream_Clone(*args)
    def __init__(self, *args): 
        this = _MAPICore.new_IStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_IStream
    __del__ = lambda self : None;
IStream_swigregister = _MAPICore.IStream_swigregister
IStream_swigregister(IStream)

MAPI_MODIFY = _MAPICore.MAPI_MODIFY
MAPI_ACCESS_MODIFY = _MAPICore.MAPI_ACCESS_MODIFY
MAPI_ACCESS_READ = _MAPICore.MAPI_ACCESS_READ
MAPI_ACCESS_DELETE = _MAPICore.MAPI_ACCESS_DELETE
MAPI_ACCESS_CREATE_HIERARCHY = _MAPICore.MAPI_ACCESS_CREATE_HIERARCHY
MAPI_ACCESS_CREATE_CONTENTS = _MAPICore.MAPI_ACCESS_CREATE_CONTENTS
MAPI_ACCESS_CREATE_ASSOCIATED = _MAPICore.MAPI_ACCESS_CREATE_ASSOCIATED
MAPI_UNICODE = _MAPICore.MAPI_UNICODE
hrSuccess = _MAPICore.hrSuccess
MAPI_SHORTTERM = _MAPICore.MAPI_SHORTTERM
MAPI_NOTRECIP = _MAPICore.MAPI_NOTRECIP
MAPI_THISSESSION = _MAPICore.MAPI_THISSESSION
MAPI_NOW = _MAPICore.MAPI_NOW
MAPI_NOTRESERVED = _MAPICore.MAPI_NOTRESERVED
MAPI_COMPOUND = _MAPICore.MAPI_COMPOUND
MAPI_ONE_OFF_UNICODE = _MAPICore.MAPI_ONE_OFF_UNICODE
MAPI_ONE_OFF_NO_RICH_INFO = _MAPICore.MAPI_ONE_OFF_NO_RICH_INFO
MAPI_STORE = _MAPICore.MAPI_STORE
MAPI_ADDRBOOK = _MAPICore.MAPI_ADDRBOOK
MAPI_FOLDER = _MAPICore.MAPI_FOLDER
MAPI_ABCONT = _MAPICore.MAPI_ABCONT
MAPI_MESSAGE = _MAPICore.MAPI_MESSAGE
MAPI_MAILUSER = _MAPICore.MAPI_MAILUSER
MAPI_ATTACH = _MAPICore.MAPI_ATTACH
MAPI_DISTLIST = _MAPICore.MAPI_DISTLIST
MAPI_PROFSECT = _MAPICore.MAPI_PROFSECT
MAPI_STATUS = _MAPICore.MAPI_STATUS
MAPI_SESSION = _MAPICore.MAPI_SESSION
MAPI_FORMINFO = _MAPICore.MAPI_FORMINFO
MV_FLAG = _MAPICore.MV_FLAG
PT_UNSPECIFIED = _MAPICore.PT_UNSPECIFIED
PT_NULL = _MAPICore.PT_NULL
PT_SHORT = _MAPICore.PT_SHORT
PT_LONG = _MAPICore.PT_LONG
PT_FLOAT = _MAPICore.PT_FLOAT
PT_DOUBLE = _MAPICore.PT_DOUBLE
PT_CURRENCY = _MAPICore.PT_CURRENCY
PT_APPTIME = _MAPICore.PT_APPTIME
PT_ERROR = _MAPICore.PT_ERROR
PT_BOOLEAN = _MAPICore.PT_BOOLEAN
PT_OBJECT = _MAPICore.PT_OBJECT
PT_LONGLONG = _MAPICore.PT_LONGLONG
PT_STRING8 = _MAPICore.PT_STRING8
PT_UNICODE = _MAPICore.PT_UNICODE
PT_SYSTIME = _MAPICore.PT_SYSTIME
PT_CLSID = _MAPICore.PT_CLSID
PT_BINARY = _MAPICore.PT_BINARY
PT_I2 = _MAPICore.PT_I2
PT_I4 = _MAPICore.PT_I4
PT_R4 = _MAPICore.PT_R4
PT_R8 = _MAPICore.PT_R8
PT_I8 = _MAPICore.PT_I8
PT_MV_SHORT = _MAPICore.PT_MV_SHORT
PT_MV_LONG = _MAPICore.PT_MV_LONG
PT_MV_FLOAT = _MAPICore.PT_MV_FLOAT
PT_MV_DOUBLE = _MAPICore.PT_MV_DOUBLE
PT_MV_CURRENCY = _MAPICore.PT_MV_CURRENCY
PT_MV_APPTIME = _MAPICore.PT_MV_APPTIME
PT_MV_SYSTIME = _MAPICore.PT_MV_SYSTIME
PT_MV_STRING8 = _MAPICore.PT_MV_STRING8
PT_MV_BINARY = _MAPICore.PT_MV_BINARY
PT_MV_UNICODE = _MAPICore.PT_MV_UNICODE
PT_MV_CLSID = _MAPICore.PT_MV_CLSID
PT_MV_LONGLONG = _MAPICore.PT_MV_LONGLONG
PT_MV_I2 = _MAPICore.PT_MV_I2
PT_MV_I4 = _MAPICore.PT_MV_I4
PT_MV_R4 = _MAPICore.PT_MV_R4
PT_MV_R8 = _MAPICore.PT_MV_R8
PT_MV_I8 = _MAPICore.PT_MV_I8
MV_INSTANCE = _MAPICore.MV_INSTANCE
MVI_FLAG = _MAPICore.MVI_FLAG
MAPI_ERROR_VERSION = _MAPICore.MAPI_ERROR_VERSION
KEEP_OPEN_READONLY = _MAPICore.KEEP_OPEN_READONLY
KEEP_OPEN_READWRITE = _MAPICore.KEEP_OPEN_READWRITE
FORCE_SAVE = _MAPICore.FORCE_SAVE
MAPI_CREATE = _MAPICore.MAPI_CREATE
STREAM_APPEND = _MAPICore.STREAM_APPEND
MAPI_MOVE = _MAPICore.MAPI_MOVE
MAPI_NOREPLACE = _MAPICore.MAPI_NOREPLACE
MAPI_DECLINE_OK = _MAPICore.MAPI_DECLINE_OK
MAPI_NO_STRINGS = _MAPICore.MAPI_NO_STRINGS
MAPI_NO_IDS = _MAPICore.MAPI_NO_IDS
MNID_ID = _MAPICore.MNID_ID
MNID_STRING = _MAPICore.MNID_STRING
class IMAPIProp(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIProp, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIProp, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IMAPIProp_GetLastError(*args)
    def SaveChanges(*args): return _MAPICore.IMAPIProp_SaveChanges(*args)
    def GetProps(*args): return _MAPICore.IMAPIProp_GetProps(*args)
    def GetPropList(*args): return _MAPICore.IMAPIProp_GetPropList(*args)
    def OpenProperty(*args): return _MAPICore.IMAPIProp_OpenProperty(*args)
    def SetProps(*args): return _MAPICore.IMAPIProp_SetProps(*args)
    def DeleteProps(*args): return _MAPICore.IMAPIProp_DeleteProps(*args)
    def CopyTo(*args): return _MAPICore.IMAPIProp_CopyTo(*args)
    def CopyProps(*args): return _MAPICore.IMAPIProp_CopyProps(*args)
    def GetNamesFromIDs(*args): return _MAPICore.IMAPIProp_GetNamesFromIDs(*args)
    def GetIDsFromNames(*args): return _MAPICore.IMAPIProp_GetIDsFromNames(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIProp
    __del__ = lambda self : None;
IMAPIProp_swigregister = _MAPICore.IMAPIProp_swigregister
IMAPIProp_swigregister(IMAPIProp)

MAPI_BEST_ACCESS = _MAPICore.MAPI_BEST_ACCESS
CONVENIENT_DEPTH = _MAPICore.CONVENIENT_DEPTH
SEARCH_RUNNING = _MAPICore.SEARCH_RUNNING
SEARCH_REBUILD = _MAPICore.SEARCH_REBUILD
SEARCH_RECURSIVE = _MAPICore.SEARCH_RECURSIVE
SEARCH_FOREGROUND = _MAPICore.SEARCH_FOREGROUND
STOP_SEARCH = _MAPICore.STOP_SEARCH
RESTART_SEARCH = _MAPICore.RESTART_SEARCH
RECURSIVE_SEARCH = _MAPICore.RECURSIVE_SEARCH
SHALLOW_SEARCH = _MAPICore.SHALLOW_SEARCH
FOREGROUND_SEARCH = _MAPICore.FOREGROUND_SEARCH
BACKGROUND_SEARCH = _MAPICore.BACKGROUND_SEARCH
class IMAPIContainer(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIContainer, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetContentsTable(*args): return _MAPICore.IMAPIContainer_GetContentsTable(*args)
    def GetHierarchyTable(*args): return _MAPICore.IMAPIContainer_GetHierarchyTable(*args)
    def OpenEntry(*args): return _MAPICore.IMAPIContainer_OpenEntry(*args)
    def SetSearchCriteria(*args): return _MAPICore.IMAPIContainer_SetSearchCriteria(*args)
    def GetSearchCriteria(*args): return _MAPICore.IMAPIContainer_GetSearchCriteria(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIContainer
    __del__ = lambda self : None;
IMAPIContainer_swigregister = _MAPICore.IMAPIContainer_swigregister
IMAPIContainer_swigregister(IMAPIContainer)

fnevCriticalError = _MAPICore.fnevCriticalError
fnevNewMail = _MAPICore.fnevNewMail
fnevObjectCreated = _MAPICore.fnevObjectCreated
fnevObjectDeleted = _MAPICore.fnevObjectDeleted
fnevObjectModified = _MAPICore.fnevObjectModified
fnevObjectMoved = _MAPICore.fnevObjectMoved
fnevObjectCopied = _MAPICore.fnevObjectCopied
fnevSearchComplete = _MAPICore.fnevSearchComplete
fnevTableModified = _MAPICore.fnevTableModified
fnevStatusObjectModified = _MAPICore.fnevStatusObjectModified
fnevReservedForMapi = _MAPICore.fnevReservedForMapi
fnevExtended = _MAPICore.fnevExtended
TABLE_CHANGED = _MAPICore.TABLE_CHANGED
TABLE_ERROR = _MAPICore.TABLE_ERROR
TABLE_ROW_ADDED = _MAPICore.TABLE_ROW_ADDED
TABLE_ROW_DELETED = _MAPICore.TABLE_ROW_DELETED
TABLE_ROW_MODIFIED = _MAPICore.TABLE_ROW_MODIFIED
TABLE_SORT_DONE = _MAPICore.TABLE_SORT_DONE
TABLE_RESTRICT_DONE = _MAPICore.TABLE_RESTRICT_DONE
TABLE_SETCOL_DONE = _MAPICore.TABLE_SETCOL_DONE
TABLE_RELOAD = _MAPICore.TABLE_RELOAD
class IMAPIAdviseSink(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIAdviseSink, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIAdviseSink, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def OnNotify(*args): return _MAPICore.IMAPIAdviseSink_OnNotify(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIAdviseSink
    __del__ = lambda self : None;
IMAPIAdviseSink_swigregister = _MAPICore.IMAPIAdviseSink_swigregister
IMAPIAdviseSink_swigregister(IMAPIAdviseSink)

class MAPIAdviseSink(IMAPIAdviseSink):
    __swig_setmethods__ = {}
    for _s in [IMAPIAdviseSink]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAPIAdviseSink, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIAdviseSink]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MAPIAdviseSink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == MAPIAdviseSink:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_MAPIAdviseSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_MAPIAdviseSink
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_MAPIAdviseSink(self)
        return weakref_proxy(self)
MAPIAdviseSink_swigregister = _MAPICore.MAPIAdviseSink_swigregister
MAPIAdviseSink_swigregister(MAPIAdviseSink)

STORE_ENTRYID_UNIQUE = _MAPICore.STORE_ENTRYID_UNIQUE
STORE_READONLY = _MAPICore.STORE_READONLY
STORE_SEARCH_OK = _MAPICore.STORE_SEARCH_OK
STORE_MODIFY_OK = _MAPICore.STORE_MODIFY_OK
STORE_CREATE_OK = _MAPICore.STORE_CREATE_OK
STORE_ATTACH_OK = _MAPICore.STORE_ATTACH_OK
STORE_OLE_OK = _MAPICore.STORE_OLE_OK
STORE_SUBMIT_OK = _MAPICore.STORE_SUBMIT_OK
STORE_NOTIFY_OK = _MAPICore.STORE_NOTIFY_OK
STORE_MV_PROPS_OK = _MAPICore.STORE_MV_PROPS_OK
STORE_CATEGORIZE_OK = _MAPICore.STORE_CATEGORIZE_OK
STORE_RTF_OK = _MAPICore.STORE_RTF_OK
STORE_RESTRICTION_OK = _MAPICore.STORE_RESTRICTION_OK
STORE_SORT_OK = _MAPICore.STORE_SORT_OK
STORE_PUBLIC_FOLDERS = _MAPICore.STORE_PUBLIC_FOLDERS
STORE_UNCOMPRESSED_RTF = _MAPICore.STORE_UNCOMPRESSED_RTF
STORE_HAS_SEARCHES = _MAPICore.STORE_HAS_SEARCHES
LOGOFF_NO_WAIT = _MAPICore.LOGOFF_NO_WAIT
LOGOFF_ORDERLY = _MAPICore.LOGOFF_ORDERLY
LOGOFF_PURGE = _MAPICore.LOGOFF_PURGE
LOGOFF_ABORT = _MAPICore.LOGOFF_ABORT
LOGOFF_QUIET = _MAPICore.LOGOFF_QUIET
LOGOFF_COMPLETE = _MAPICore.LOGOFF_COMPLETE
LOGOFF_INBOUND = _MAPICore.LOGOFF_INBOUND
LOGOFF_OUTBOUND = _MAPICore.LOGOFF_OUTBOUND
LOGOFF_OUTBOUND_QUEUE = _MAPICore.LOGOFF_OUTBOUND_QUEUE
MSG_LOCKED = _MAPICore.MSG_LOCKED
MSG_UNLOCKED = _MAPICore.MSG_UNLOCKED
FOLDER_IPM_SUBTREE_VALID = _MAPICore.FOLDER_IPM_SUBTREE_VALID
FOLDER_IPM_INBOX_VALID = _MAPICore.FOLDER_IPM_INBOX_VALID
FOLDER_IPM_OUTBOX_VALID = _MAPICore.FOLDER_IPM_OUTBOX_VALID
FOLDER_IPM_WASTEBASKET_VALID = _MAPICore.FOLDER_IPM_WASTEBASKET_VALID
FOLDER_IPM_SENTMAIL_VALID = _MAPICore.FOLDER_IPM_SENTMAIL_VALID
FOLDER_VIEWS_VALID = _MAPICore.FOLDER_VIEWS_VALID
FOLDER_COMMON_VIEWS_VALID = _MAPICore.FOLDER_COMMON_VIEWS_VALID
FOLDER_FINDER_VALID = _MAPICore.FOLDER_FINDER_VALID
class IMsgStore(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMsgStore, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMsgStore, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Advise(*args): return _MAPICore.IMsgStore_Advise(*args)
    def Unadvise(*args): return _MAPICore.IMsgStore_Unadvise(*args)
    def CompareEntryIDs(*args): return _MAPICore.IMsgStore_CompareEntryIDs(*args)
    def OpenEntry(*args): return _MAPICore.IMsgStore_OpenEntry(*args)
    def SetReceiveFolder(*args): return _MAPICore.IMsgStore_SetReceiveFolder(*args)
    def GetReceiveFolder(*args): return _MAPICore.IMsgStore_GetReceiveFolder(*args)
    def GetReceiveFolderTable(*args): return _MAPICore.IMsgStore_GetReceiveFolderTable(*args)
    def StoreLogoff(*args): return _MAPICore.IMsgStore_StoreLogoff(*args)
    def AbortSubmit(*args): return _MAPICore.IMsgStore_AbortSubmit(*args)
    def GetOutgoingQueue(*args): return _MAPICore.IMsgStore_GetOutgoingQueue(*args)
    def SetLockState(*args): return _MAPICore.IMsgStore_SetLockState(*args)
    def FinishedMsg(*args): return _MAPICore.IMsgStore_FinishedMsg(*args)
    def NotifyNewMail(*args): return _MAPICore.IMsgStore_NotifyNewMail(*args)
    __swig_destroy__ = _MAPICore.delete_IMsgStore
    __del__ = lambda self : None;
IMsgStore_swigregister = _MAPICore.IMsgStore_swigregister
IMsgStore_swigregister(IMsgStore)

class IProxyStoreObject(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProxyStoreObject, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProxyStoreObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def PlaceHolder1(*args): return _MAPICore.IProxyStoreObject_PlaceHolder1(*args)
    def PlaceHolder2(*args): return _MAPICore.IProxyStoreObject_PlaceHolder2(*args)
    __swig_destroy__ = _MAPICore.delete_IProxyStoreObject
    __del__ = lambda self : None;
    def UnwrapNoRef(*args): return _MAPICore.IProxyStoreObject_UnwrapNoRef(*args)
IProxyStoreObject_swigregister = _MAPICore.IProxyStoreObject_swigregister
IProxyStoreObject_swigregister(IProxyStoreObject)

FOLDER_ROOT = _MAPICore.FOLDER_ROOT
FOLDER_GENERIC = _MAPICore.FOLDER_GENERIC
FOLDER_SEARCH = _MAPICore.FOLDER_SEARCH
MESSAGE_MOVE = _MAPICore.MESSAGE_MOVE
MESSAGE_DIALOG = _MAPICore.MESSAGE_DIALOG
OPEN_IF_EXISTS = _MAPICore.OPEN_IF_EXISTS
DEL_MESSAGES = _MAPICore.DEL_MESSAGES
FOLDER_DIALOG = _MAPICore.FOLDER_DIALOG
DEL_FOLDERS = _MAPICore.DEL_FOLDERS
DEL_ASSOCIATED = _MAPICore.DEL_ASSOCIATED
FOLDER_MOVE = _MAPICore.FOLDER_MOVE
COPY_SUBFOLDERS = _MAPICore.COPY_SUBFOLDERS
MSGSTATUS_HIGHLIGHTED = _MAPICore.MSGSTATUS_HIGHLIGHTED
MSGSTATUS_TAGGED = _MAPICore.MSGSTATUS_TAGGED
MSGSTATUS_HIDDEN = _MAPICore.MSGSTATUS_HIDDEN
MSGSTATUS_DELMARKED = _MAPICore.MSGSTATUS_DELMARKED
MSGSTATUS_REMOTE_DOWNLOAD = _MAPICore.MSGSTATUS_REMOTE_DOWNLOAD
MSGSTATUS_REMOTE_DELETE = _MAPICore.MSGSTATUS_REMOTE_DELETE
RECURSIVE_SORT = _MAPICore.RECURSIVE_SORT
FLDSTATUS_HIGHLIGHTED = _MAPICore.FLDSTATUS_HIGHLIGHTED
FLDSTATUS_TAGGED = _MAPICore.FLDSTATUS_TAGGED
FLDSTATUS_HIDDEN = _MAPICore.FLDSTATUS_HIDDEN
FLDSTATUS_DELMARKED = _MAPICore.FLDSTATUS_DELMARKED
class IMAPIFolder(IMAPIContainer):
    __swig_setmethods__ = {}
    for _s in [IMAPIContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIFolder, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIFolder, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateMessage(*args): return _MAPICore.IMAPIFolder_CreateMessage(*args)
    def CopyMessages(*args): return _MAPICore.IMAPIFolder_CopyMessages(*args)
    def DeleteMessages(*args): return _MAPICore.IMAPIFolder_DeleteMessages(*args)
    def CreateFolder(*args): return _MAPICore.IMAPIFolder_CreateFolder(*args)
    def CopyFolder(*args): return _MAPICore.IMAPIFolder_CopyFolder(*args)
    def DeleteFolder(*args): return _MAPICore.IMAPIFolder_DeleteFolder(*args)
    def SetReadFlags(*args): return _MAPICore.IMAPIFolder_SetReadFlags(*args)
    def GetMessageStatus(*args): return _MAPICore.IMAPIFolder_GetMessageStatus(*args)
    def SetMessageStatus(*args): return _MAPICore.IMAPIFolder_SetMessageStatus(*args)
    def SaveContentsSort(*args): return _MAPICore.IMAPIFolder_SaveContentsSort(*args)
    def EmptyFolder(*args): return _MAPICore.IMAPIFolder_EmptyFolder(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIFolder
    __del__ = lambda self : None;
IMAPIFolder_swigregister = _MAPICore.IMAPIFolder_swigregister
IMAPIFolder_swigregister(IMAPIFolder)

FORCE_SUBMIT = _MAPICore.FORCE_SUBMIT
MSGFLAG_READ = _MAPICore.MSGFLAG_READ
MSGFLAG_UNMODIFIED = _MAPICore.MSGFLAG_UNMODIFIED
MSGFLAG_SUBMIT = _MAPICore.MSGFLAG_SUBMIT
MSGFLAG_UNSENT = _MAPICore.MSGFLAG_UNSENT
MSGFLAG_HASATTACH = _MAPICore.MSGFLAG_HASATTACH
MSGFLAG_FROMME = _MAPICore.MSGFLAG_FROMME
MSGFLAG_ASSOCIATED = _MAPICore.MSGFLAG_ASSOCIATED
MSGFLAG_RESEND = _MAPICore.MSGFLAG_RESEND
MSGFLAG_RN_PENDING = _MAPICore.MSGFLAG_RN_PENDING
MSGFLAG_NRN_PENDING = _MAPICore.MSGFLAG_NRN_PENDING
SUBMITFLAG_LOCKED = _MAPICore.SUBMITFLAG_LOCKED
SUBMITFLAG_PREPROCESS = _MAPICore.SUBMITFLAG_PREPROCESS
MODRECIP_ADD = _MAPICore.MODRECIP_ADD
MODRECIP_MODIFY = _MAPICore.MODRECIP_MODIFY
MODRECIP_REMOVE = _MAPICore.MODRECIP_REMOVE
SUPPRESS_RECEIPT = _MAPICore.SUPPRESS_RECEIPT
CLEAR_READ_FLAG = _MAPICore.CLEAR_READ_FLAG
GENERATE_RECEIPT_ONLY = _MAPICore.GENERATE_RECEIPT_ONLY
CLEAR_RN_PENDING = _MAPICore.CLEAR_RN_PENDING
CLEAR_NRN_PENDING = _MAPICore.CLEAR_NRN_PENDING
ATTACH_DIALOG = _MAPICore.ATTACH_DIALOG
SECURITY_SIGNED = _MAPICore.SECURITY_SIGNED
SECURITY_ENCRYPTED = _MAPICore.SECURITY_ENCRYPTED
PRIO_URGENT = _MAPICore.PRIO_URGENT
PRIO_NORMAL = _MAPICore.PRIO_NORMAL
PRIO_NONURGENT = _MAPICore.PRIO_NONURGENT
SENSITIVITY_NONE = _MAPICore.SENSITIVITY_NONE
SENSITIVITY_PERSONAL = _MAPICore.SENSITIVITY_PERSONAL
SENSITIVITY_PRIVATE = _MAPICore.SENSITIVITY_PRIVATE
SENSITIVITY_COMPANY_CONFIDENTIAL = _MAPICore.SENSITIVITY_COMPANY_CONFIDENTIAL
IMPORTANCE_LOW = _MAPICore.IMPORTANCE_LOW
IMPORTANCE_NORMAL = _MAPICore.IMPORTANCE_NORMAL
IMPORTANCE_HIGH = _MAPICore.IMPORTANCE_HIGH
class IMessage(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetAttachmentTable(*args): return _MAPICore.IMessage_GetAttachmentTable(*args)
    def OpenAttach(*args): return _MAPICore.IMessage_OpenAttach(*args)
    def CreateAttach(*args): return _MAPICore.IMessage_CreateAttach(*args)
    def DeleteAttach(*args): return _MAPICore.IMessage_DeleteAttach(*args)
    def GetRecipientTable(*args): return _MAPICore.IMessage_GetRecipientTable(*args)
    def ModifyRecipients(*args): return _MAPICore.IMessage_ModifyRecipients(*args)
    def SubmitMessage(*args): return _MAPICore.IMessage_SubmitMessage(*args)
    def SetReadFlag(*args): return _MAPICore.IMessage_SetReadFlag(*args)
    __swig_destroy__ = _MAPICore.delete_IMessage
    __del__ = lambda self : None;
IMessage_swigregister = _MAPICore.IMessage_swigregister
IMessage_swigregister(IMessage)

NO_ATTACHMENT = _MAPICore.NO_ATTACHMENT
ATTACH_BY_VALUE = _MAPICore.ATTACH_BY_VALUE
ATTACH_BY_REFERENCE = _MAPICore.ATTACH_BY_REFERENCE
ATTACH_BY_REF_RESOLVE = _MAPICore.ATTACH_BY_REF_RESOLVE
ATTACH_BY_REF_ONLY = _MAPICore.ATTACH_BY_REF_ONLY
ATTACH_EMBEDDED_MSG = _MAPICore.ATTACH_EMBEDDED_MSG
ATTACH_OLE = _MAPICore.ATTACH_OLE
class IAttach(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAttach, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IAttach, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _MAPICore.delete_IAttach
    __del__ = lambda self : None;
IAttach_swigregister = _MAPICore.IAttach_swigregister
IAttach_swigregister(IAttach)

AB_RECIPIENTS = _MAPICore.AB_RECIPIENTS
AB_SUBCONTAINERS = _MAPICore.AB_SUBCONTAINERS
AB_MODIFIABLE = _MAPICore.AB_MODIFIABLE
AB_UNMODIFIABLE = _MAPICore.AB_UNMODIFIABLE
AB_FIND_ON_OPEN = _MAPICore.AB_FIND_ON_OPEN
AB_NOT_DEFAULT = _MAPICore.AB_NOT_DEFAULT
CREATE_CHECK_DUP_STRICT = _MAPICore.CREATE_CHECK_DUP_STRICT
CREATE_CHECK_DUP_LOOSE = _MAPICore.CREATE_CHECK_DUP_LOOSE
CREATE_REPLACE = _MAPICore.CREATE_REPLACE
MAPI_UNRESOLVED = _MAPICore.MAPI_UNRESOLVED
MAPI_AMBIGUOUS = _MAPICore.MAPI_AMBIGUOUS
MAPI_RESOLVED = _MAPICore.MAPI_RESOLVED
class IABContainer(IMAPIContainer):
    __swig_setmethods__ = {}
    for _s in [IMAPIContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IABContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IABContainer, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateEntry(*args): return _MAPICore.IABContainer_CreateEntry(*args)
    def CopyEntries(*args): return _MAPICore.IABContainer_CopyEntries(*args)
    def DeleteEntries(*args): return _MAPICore.IABContainer_DeleteEntries(*args)
    def ResolveNames(*args): return _MAPICore.IABContainer_ResolveNames(*args)
    __swig_destroy__ = _MAPICore.delete_IABContainer
    __del__ = lambda self : None;
IABContainer_swigregister = _MAPICore.IABContainer_swigregister
IABContainer_swigregister(IABContainer)

MAPI_SEND_NO_RICH_INFO = _MAPICore.MAPI_SEND_NO_RICH_INFO
MAPI_MH_DP_PUBLIC_UA = _MAPICore.MAPI_MH_DP_PUBLIC_UA
MAPI_MH_DP_PRIVATE_UA = _MAPICore.MAPI_MH_DP_PRIVATE_UA
MAPI_MH_DP_MS = _MAPICore.MAPI_MH_DP_MS
MAPI_MH_DP_ML = _MAPICore.MAPI_MH_DP_ML
MAPI_MH_DP_PDAU = _MAPICore.MAPI_MH_DP_PDAU
MAPI_MH_DP_PDS_PATRON = _MAPICore.MAPI_MH_DP_PDS_PATRON
MAPI_MH_DP_OTHER_AU = _MAPICore.MAPI_MH_DP_OTHER_AU
class IMailUser(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMailUser, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMailUser, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _MAPICore.delete_IMailUser
    __del__ = lambda self : None;
IMailUser_swigregister = _MAPICore.IMailUser_swigregister
IMailUser_swigregister(IMailUser)

class IDistList(IMAPIContainer):
    __swig_setmethods__ = {}
    for _s in [IMAPIContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDistList, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDistList, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateEntry(*args): return _MAPICore.IDistList_CreateEntry(*args)
    def CopyEntries(*args): return _MAPICore.IDistList_CopyEntries(*args)
    def DeleteEntries(*args): return _MAPICore.IDistList_DeleteEntries(*args)
    def ResolveNames(*args): return _MAPICore.IDistList_ResolveNames(*args)
    __swig_destroy__ = _MAPICore.delete_IDistList
    __del__ = lambda self : None;
IDistList_swigregister = _MAPICore.IDistList_swigregister
IDistList_swigregister(IDistList)

class IMAPIStatus(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIStatus, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def ValidateState(*args): return _MAPICore.IMAPIStatus_ValidateState(*args)
    def SettingsDialog(*args): return _MAPICore.IMAPIStatus_SettingsDialog(*args)
    def ChangePassword(*args): return _MAPICore.IMAPIStatus_ChangePassword(*args)
    def FlushQueues(*args): return _MAPICore.IMAPIStatus_FlushQueues(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIStatus
    __del__ = lambda self : None;
IMAPIStatus_swigregister = _MAPICore.IMAPIStatus_swigregister
IMAPIStatus_swigregister(IMAPIStatus)

TBLSTAT_COMPLETE = _MAPICore.TBLSTAT_COMPLETE
TBLSTAT_QCHANGED = _MAPICore.TBLSTAT_QCHANGED
TBLSTAT_SORTING = _MAPICore.TBLSTAT_SORTING
TBLSTAT_SORT_ERROR = _MAPICore.TBLSTAT_SORT_ERROR
TBLSTAT_SETTING_COLS = _MAPICore.TBLSTAT_SETTING_COLS
TBLSTAT_SETCOL_ERROR = _MAPICore.TBLSTAT_SETCOL_ERROR
TBLSTAT_RESTRICTING = _MAPICore.TBLSTAT_RESTRICTING
TBLSTAT_RESTRICT_ERROR = _MAPICore.TBLSTAT_RESTRICT_ERROR
TBLTYPE_SNAPSHOT = _MAPICore.TBLTYPE_SNAPSHOT
TBLTYPE_KEYSET = _MAPICore.TBLTYPE_KEYSET
TBLTYPE_DYNAMIC = _MAPICore.TBLTYPE_DYNAMIC
TABLE_SORT_ASCEND = _MAPICore.TABLE_SORT_ASCEND
TABLE_SORT_DESCEND = _MAPICore.TABLE_SORT_DESCEND
TABLE_SORT_COMBINE = _MAPICore.TABLE_SORT_COMBINE
TABLE_SORT_CATEG_MAX = _MAPICore.TABLE_SORT_CATEG_MAX
TABLE_SORT_CATEG_MIN = _MAPICore.TABLE_SORT_CATEG_MIN
BOOKMARK_BEGINNING = _MAPICore.BOOKMARK_BEGINNING
BOOKMARK_CURRENT = _MAPICore.BOOKMARK_CURRENT
BOOKMARK_END = _MAPICore.BOOKMARK_END
FL_FULLSTRING = _MAPICore.FL_FULLSTRING
FL_SUBSTRING = _MAPICore.FL_SUBSTRING
FL_PREFIX = _MAPICore.FL_PREFIX
FL_IGNORECASE = _MAPICore.FL_IGNORECASE
FL_IGNORENONSPACE = _MAPICore.FL_IGNORENONSPACE
FL_LOOSE = _MAPICore.FL_LOOSE
RES_AND = _MAPICore.RES_AND
RES_OR = _MAPICore.RES_OR
RES_NOT = _MAPICore.RES_NOT
RES_CONTENT = _MAPICore.RES_CONTENT
RES_PROPERTY = _MAPICore.RES_PROPERTY
RES_COMPAREPROPS = _MAPICore.RES_COMPAREPROPS
RES_BITMASK = _MAPICore.RES_BITMASK
RES_SIZE = _MAPICore.RES_SIZE
RES_EXIST = _MAPICore.RES_EXIST
RES_SUBRESTRICTION = _MAPICore.RES_SUBRESTRICTION
RES_COMMENT = _MAPICore.RES_COMMENT
RELOP_LT = _MAPICore.RELOP_LT
RELOP_LE = _MAPICore.RELOP_LE
RELOP_GT = _MAPICore.RELOP_GT
RELOP_GE = _MAPICore.RELOP_GE
RELOP_EQ = _MAPICore.RELOP_EQ
RELOP_NE = _MAPICore.RELOP_NE
RELOP_RE = _MAPICore.RELOP_RE
BMR_EQZ = _MAPICore.BMR_EQZ
BMR_NEZ = _MAPICore.BMR_NEZ
TBL_ALL_COLUMNS = _MAPICore.TBL_ALL_COLUMNS
TBL_LEAF_ROW = _MAPICore.TBL_LEAF_ROW
TBL_EMPTY_CATEGORY = _MAPICore.TBL_EMPTY_CATEGORY
TBL_EXPANDED_CATEGORY = _MAPICore.TBL_EXPANDED_CATEGORY
TBL_COLLAPSED_CATEGORY = _MAPICore.TBL_COLLAPSED_CATEGORY
TBL_NOWAIT = _MAPICore.TBL_NOWAIT
TBL_ASYNC = _MAPICore.TBL_ASYNC
TBL_BATCH = _MAPICore.TBL_BATCH
DIR_BACKWARD = _MAPICore.DIR_BACKWARD
TBL_NOADVANCE = _MAPICore.TBL_NOADVANCE
class IMAPITable(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPITable, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPITable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IMAPITable_GetLastError(*args)
    def Advise(*args): return _MAPICore.IMAPITable_Advise(*args)
    def Unadvise(*args): return _MAPICore.IMAPITable_Unadvise(*args)
    def GetStatus(*args): return _MAPICore.IMAPITable_GetStatus(*args)
    def SetColumns(*args): return _MAPICore.IMAPITable_SetColumns(*args)
    def QueryColumns(*args): return _MAPICore.IMAPITable_QueryColumns(*args)
    def GetRowCount(*args): return _MAPICore.IMAPITable_GetRowCount(*args)
    def SeekRow(*args): return _MAPICore.IMAPITable_SeekRow(*args)
    def SeekRowApprox(*args): return _MAPICore.IMAPITable_SeekRowApprox(*args)
    def QueryPosition(*args): return _MAPICore.IMAPITable_QueryPosition(*args)
    def FindRow(*args): return _MAPICore.IMAPITable_FindRow(*args)
    def Restrict(*args): return _MAPICore.IMAPITable_Restrict(*args)
    def CreateBookmark(*args): return _MAPICore.IMAPITable_CreateBookmark(*args)
    def FreeBookmark(*args): return _MAPICore.IMAPITable_FreeBookmark(*args)
    def SortTable(*args): return _MAPICore.IMAPITable_SortTable(*args)
    def QuerySortOrder(*args): return _MAPICore.IMAPITable_QuerySortOrder(*args)
    def QueryRows(*args): return _MAPICore.IMAPITable_QueryRows(*args)
    def Abort(*args): return _MAPICore.IMAPITable_Abort(*args)
    def ExpandRow(*args): return _MAPICore.IMAPITable_ExpandRow(*args)
    def CollapseRow(*args): return _MAPICore.IMAPITable_CollapseRow(*args)
    def WaitForCompletion(*args): return _MAPICore.IMAPITable_WaitForCompletion(*args)
    def GetCollapseState(*args): return _MAPICore.IMAPITable_GetCollapseState(*args)
    def SetCollapseState(*args): return _MAPICore.IMAPITable_SetCollapseState(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPITable
    __del__ = lambda self : None;
IMAPITable_swigregister = _MAPICore.IMAPITable_swigregister
IMAPITable_swigregister(IMAPITable)

MAPI_STORE_PROVIDER = _MAPICore.MAPI_STORE_PROVIDER
MAPI_AB = _MAPICore.MAPI_AB
MAPI_AB_PROVIDER = _MAPICore.MAPI_AB_PROVIDER
MAPI_TRANSPORT_PROVIDER = _MAPICore.MAPI_TRANSPORT_PROVIDER
MAPI_SPOOLER = _MAPICore.MAPI_SPOOLER
MAPI_PROFILE_PROVIDER = _MAPICore.MAPI_PROFILE_PROVIDER
MAPI_SUBSYSTEM = _MAPICore.MAPI_SUBSYSTEM
MAPI_HOOK_PROVIDER = _MAPICore.MAPI_HOOK_PROVIDER
STATUS_VALIDATE_STATE = _MAPICore.STATUS_VALIDATE_STATE
STATUS_SETTINGS_DIALOG = _MAPICore.STATUS_SETTINGS_DIALOG
STATUS_CHANGE_PASSWORD = _MAPICore.STATUS_CHANGE_PASSWORD
STATUS_FLUSH_QUEUES = _MAPICore.STATUS_FLUSH_QUEUES
STATUS_DEFAULT_OUTBOUND = _MAPICore.STATUS_DEFAULT_OUTBOUND
STATUS_DEFAULT_STORE = _MAPICore.STATUS_DEFAULT_STORE
STATUS_PRIMARY_IDENTITY = _MAPICore.STATUS_PRIMARY_IDENTITY
STATUS_SIMPLE_STORE = _MAPICore.STATUS_SIMPLE_STORE
STATUS_XP_PREFER_LAST = _MAPICore.STATUS_XP_PREFER_LAST
STATUS_NO_PRIMARY_IDENTITY = _MAPICore.STATUS_NO_PRIMARY_IDENTITY
STATUS_NO_DEFAULT_STORE = _MAPICore.STATUS_NO_DEFAULT_STORE
STATUS_TEMP_SECTION = _MAPICore.STATUS_TEMP_SECTION
STATUS_OWN_STORE = _MAPICore.STATUS_OWN_STORE
STATUS_NEED_IPM_TREE = _MAPICore.STATUS_NEED_IPM_TREE
STATUS_PRIMARY_STORE = _MAPICore.STATUS_PRIMARY_STORE
STATUS_SECONDARY_STORE = _MAPICore.STATUS_SECONDARY_STORE
STATUS_AVAILABLE = _MAPICore.STATUS_AVAILABLE
STATUS_OFFLINE = _MAPICore.STATUS_OFFLINE
STATUS_FAILURE = _MAPICore.STATUS_FAILURE
STATUS_INBOUND_ENABLED = _MAPICore.STATUS_INBOUND_ENABLED
STATUS_INBOUND_ACTIVE = _MAPICore.STATUS_INBOUND_ACTIVE
STATUS_INBOUND_FLUSH = _MAPICore.STATUS_INBOUND_FLUSH
STATUS_OUTBOUND_ENABLED = _MAPICore.STATUS_OUTBOUND_ENABLED
STATUS_OUTBOUND_ACTIVE = _MAPICore.STATUS_OUTBOUND_ACTIVE
STATUS_OUTBOUND_FLUSH = _MAPICore.STATUS_OUTBOUND_FLUSH
STATUS_REMOTE_ACCESS = _MAPICore.STATUS_REMOTE_ACCESS
SUPPRESS_UI = _MAPICore.SUPPRESS_UI
REFRESH_XP_HEADER_CACHE = _MAPICore.REFRESH_XP_HEADER_CACHE
PROCESS_XP_HEADER_CACHE = _MAPICore.PROCESS_XP_HEADER_CACHE
FORCE_XP_CONNECT = _MAPICore.FORCE_XP_CONNECT
FORCE_XP_DISCONNECT = _MAPICore.FORCE_XP_DISCONNECT
CONFIG_CHANGED = _MAPICore.CONFIG_CHANGED
ABORT_XP_HEADER_OPERATION = _MAPICore.ABORT_XP_HEADER_OPERATION
SHOW_XP_SESSION_UI = _MAPICore.SHOW_XP_SESSION_UI
UI_READONLY = _MAPICore.UI_READONLY
FLUSH_UPLOAD = _MAPICore.FLUSH_UPLOAD
FLUSH_DOWNLOAD = _MAPICore.FLUSH_DOWNLOAD
FLUSH_FORCE = _MAPICore.FLUSH_FORCE
FLUSH_NO_UI = _MAPICore.FLUSH_NO_UI
FLUSH_ASYNC_OK = _MAPICore.FLUSH_ASYNC_OK
class IProfSect(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProfSect, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProfSect, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _MAPICore.delete_IProfSect
    __del__ = lambda self : None;
IProfSect_swigregister = _MAPICore.IProfSect_swigregister
IProfSect_swigregister(IProfSect)

MAPI_TOP_LEVEL = _MAPICore.MAPI_TOP_LEVEL
class IMAPIProgress(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPIProgress, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPIProgress, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Progress(*args): return _MAPICore.IMAPIProgress_Progress(*args)
    def GetFlags(*args): return _MAPICore.IMAPIProgress_GetFlags(*args)
    def GetMax(*args): return _MAPICore.IMAPIProgress_GetMax(*args)
    def GetMin(*args): return _MAPICore.IMAPIProgress_GetMin(*args)
    def SetLimits(*args): return _MAPICore.IMAPIProgress_SetLimits(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPIProgress
    __del__ = lambda self : None;
IMAPIProgress_swigregister = _MAPICore.IMAPIProgress_swigregister
IMAPIProgress_swigregister(IMAPIProgress)

UI_SERVICE = _MAPICore.UI_SERVICE
SERVICE_UI_ALWAYS = _MAPICore.SERVICE_UI_ALWAYS
SERVICE_UI_ALLOWED = _MAPICore.SERVICE_UI_ALLOWED
UI_CURRENT_PROVIDER_FIRST = _MAPICore.UI_CURRENT_PROVIDER_FIRST
class IProviderAdmin(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProviderAdmin, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProviderAdmin, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IProviderAdmin_GetLastError(*args)
    def GetProviderTable(*args): return _MAPICore.IProviderAdmin_GetProviderTable(*args)
    def CreateProvider(*args): return _MAPICore.IProviderAdmin_CreateProvider(*args)
    def DeleteProvider(*args): return _MAPICore.IProviderAdmin_DeleteProvider(*args)
    def OpenProfileSection(*args): return _MAPICore.IProviderAdmin_OpenProfileSection(*args)
    __swig_destroy__ = _MAPICore.delete_IProviderAdmin
    __del__ = lambda self : None;
IProviderAdmin_swigregister = _MAPICore.IProviderAdmin_swigregister
IProviderAdmin_swigregister(IProviderAdmin)

ADRPARM_HELP_CTX = _MAPICore.ADRPARM_HELP_CTX
DIALOG_MODAL = _MAPICore.DIALOG_MODAL
DIALOG_SDI = _MAPICore.DIALOG_SDI
DIALOG_OPTIONS = _MAPICore.DIALOG_OPTIONS
ADDRESS_ONE = _MAPICore.ADDRESS_ONE
AB_SELECTONLY = _MAPICore.AB_SELECTONLY
AB_RESOLVE = _MAPICore.AB_RESOLVE
DT_MAILUSER = _MAPICore.DT_MAILUSER
DT_DISTLIST = _MAPICore.DT_DISTLIST
DT_FORUM = _MAPICore.DT_FORUM
DT_AGENT = _MAPICore.DT_AGENT
DT_ORGANIZATION = _MAPICore.DT_ORGANIZATION
DT_PRIVATE_DISTLIST = _MAPICore.DT_PRIVATE_DISTLIST
DT_REMOTE_MAILUSER = _MAPICore.DT_REMOTE_MAILUSER
DT_MODIFIABLE = _MAPICore.DT_MODIFIABLE
DT_GLOBAL = _MAPICore.DT_GLOBAL
DT_LOCAL = _MAPICore.DT_LOCAL
DT_WAN = _MAPICore.DT_WAN
DT_NOT_SPECIFIC = _MAPICore.DT_NOT_SPECIFIC
DT_FOLDER = _MAPICore.DT_FOLDER
DT_FOLDER_LINK = _MAPICore.DT_FOLDER_LINK
DT_FOLDER_SPECIAL = _MAPICore.DT_FOLDER_SPECIAL
MAPI_DEFERRED_ERRORS = _MAPICore.MAPI_DEFERRED_ERRORS
MAPI_ASSOCIATED = _MAPICore.MAPI_ASSOCIATED
MDB_NO_DIALOG = _MAPICore.MDB_NO_DIALOG
MDB_WRITE = _MAPICore.MDB_WRITE
MDB_TEMPORARY = _MAPICore.MDB_TEMPORARY
MDB_NO_MAIL = _MAPICore.MDB_NO_MAIL
AB_NO_DIALOG = _MAPICore.AB_NO_DIALOG
EC_OVERRIDE_HOMESERVER = _MAPICore.EC_OVERRIDE_HOMESERVER
MAPI_ALLOW_OTHERS = _MAPICore.MAPI_ALLOW_OTHERS
MAPI_EXPLICIT_PROFILE = _MAPICore.MAPI_EXPLICIT_PROFILE
MAPI_SERVICE_UI_ALWAYS = _MAPICore.MAPI_SERVICE_UI_ALWAYS
MAPI_NO_MAIL = _MAPICore.MAPI_NO_MAIL
MAPI_NT_SERVICE = _MAPICore.MAPI_NT_SERVICE
MAPI_TIMEOUT_SHORT = _MAPICore.MAPI_TIMEOUT_SHORT
class MAPIINIT_0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAPIINIT_0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAPIINIT_0, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ulVersion"] = _MAPICore.MAPIINIT_0_ulVersion_set
    __swig_getmethods__["ulVersion"] = _MAPICore.MAPIINIT_0_ulVersion_get
    if _newclass:ulVersion = _swig_property(_MAPICore.MAPIINIT_0_ulVersion_get, _MAPICore.MAPIINIT_0_ulVersion_set)
    __swig_setmethods__["ulFlags"] = _MAPICore.MAPIINIT_0_ulFlags_set
    __swig_getmethods__["ulFlags"] = _MAPICore.MAPIINIT_0_ulFlags_get
    if _newclass:ulFlags = _swig_property(_MAPICore.MAPIINIT_0_ulFlags_get, _MAPICore.MAPIINIT_0_ulFlags_set)
    def __init__(self, *args): 
        this = _MAPICore.new_MAPIINIT_0(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_MAPIINIT_0
    __del__ = lambda self : None;
MAPIINIT_0_swigregister = _MAPICore.MAPIINIT_0_swigregister
MAPIINIT_0_swigregister(MAPIINIT_0)

MAPI_INIT_VERSION = _MAPICore.MAPI_INIT_VERSION
MAPI_MULTITHREAD_NOTIFICATIONS = _MAPICore.MAPI_MULTITHREAD_NOTIFICATIONS
MAPIInitialize = _MAPICore.MAPIInitialize
MAPIUninitialize = _MAPICore.MAPIUninitialize
MAPILogonEx = _MAPICore.MAPILogonEx
MAPIAdminProfiles = _MAPICore.MAPIAdminProfiles
MAPI_LOGOFF_SHARED = _MAPICore.MAPI_LOGOFF_SHARED
MAPI_LOGOFF_UI = _MAPICore.MAPI_LOGOFF_UI
MAPI_DEFAULT_STORE = _MAPICore.MAPI_DEFAULT_STORE
MAPI_SIMPLE_STORE_TEMPORARY = _MAPICore.MAPI_SIMPLE_STORE_TEMPORARY
MAPI_SIMPLE_STORE_PERMANENT = _MAPICore.MAPI_SIMPLE_STORE_PERMANENT
MAPI_PRIMARY_STORE = _MAPICore.MAPI_PRIMARY_STORE
MAPI_SECONDARY_STORE = _MAPICore.MAPI_SECONDARY_STORE
MAPI_POST_MESSAGE = _MAPICore.MAPI_POST_MESSAGE
MAPI_NEW_MESSAGE = _MAPICore.MAPI_NEW_MESSAGE
class IMAPISession(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAPISession, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMAPISession, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IMAPISession_GetLastError(*args)
    def GetMsgStoresTable(*args): return _MAPICore.IMAPISession_GetMsgStoresTable(*args)
    def OpenMsgStore(*args): return _MAPICore.IMAPISession_OpenMsgStore(*args)
    def OpenAddressBook(*args): return _MAPICore.IMAPISession_OpenAddressBook(*args)
    def OpenProfileSection(*args): return _MAPICore.IMAPISession_OpenProfileSection(*args)
    def GetStatusTable(*args): return _MAPICore.IMAPISession_GetStatusTable(*args)
    def OpenEntry(*args): return _MAPICore.IMAPISession_OpenEntry(*args)
    def CompareEntryIDs(*args): return _MAPICore.IMAPISession_CompareEntryIDs(*args)
    def Advise(*args): return _MAPICore.IMAPISession_Advise(*args)
    def Unadvise(*args): return _MAPICore.IMAPISession_Unadvise(*args)
    def MessageOptions(*args): return _MAPICore.IMAPISession_MessageOptions(*args)
    def QueryDefaultMessageOpt(*args): return _MAPICore.IMAPISession_QueryDefaultMessageOpt(*args)
    def EnumAdrTypes(*args): return _MAPICore.IMAPISession_EnumAdrTypes(*args)
    def QueryIdentity(*args): return _MAPICore.IMAPISession_QueryIdentity(*args)
    def Logoff(*args): return _MAPICore.IMAPISession_Logoff(*args)
    def SetDefaultStore(*args): return _MAPICore.IMAPISession_SetDefaultStore(*args)
    def AdminServices(*args): return _MAPICore.IMAPISession_AdminServices(*args)
    def ShowForm(*args): return _MAPICore.IMAPISession_ShowForm(*args)
    def PrepareForm(*args): return _MAPICore.IMAPISession_PrepareForm(*args)
    __swig_destroy__ = _MAPICore.delete_IMAPISession
    __del__ = lambda self : None;
IMAPISession_swigregister = _MAPICore.IMAPISession_swigregister
IMAPISession_swigregister(IMAPISession)

class IAddrBook(IMAPIProp):
    __swig_setmethods__ = {}
    for _s in [IMAPIProp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAddrBook, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIProp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IAddrBook, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def OpenEntry(*args): return _MAPICore.IAddrBook_OpenEntry(*args)
    def CompareEntryIDs(*args): return _MAPICore.IAddrBook_CompareEntryIDs(*args)
    def Advise(*args): return _MAPICore.IAddrBook_Advise(*args)
    def Unadvise(*args): return _MAPICore.IAddrBook_Unadvise(*args)
    def CreateOneOff(*args): return _MAPICore.IAddrBook_CreateOneOff(*args)
    def NewEntry(*args): return _MAPICore.IAddrBook_NewEntry(*args)
    def ResolveName(*args): return _MAPICore.IAddrBook_ResolveName(*args)
    def Address(*args): return _MAPICore.IAddrBook_Address(*args)
    def Details(*args): return _MAPICore.IAddrBook_Details(*args)
    def RecipOptions(*args): return _MAPICore.IAddrBook_RecipOptions(*args)
    def QueryDefaultRecipOpt(*args): return _MAPICore.IAddrBook_QueryDefaultRecipOpt(*args)
    def GetPAB(*args): return _MAPICore.IAddrBook_GetPAB(*args)
    def SetPAB(*args): return _MAPICore.IAddrBook_SetPAB(*args)
    def GetDefaultDir(*args): return _MAPICore.IAddrBook_GetDefaultDir(*args)
    def SetDefaultDir(*args): return _MAPICore.IAddrBook_SetDefaultDir(*args)
    def GetSearchPath(*args): return _MAPICore.IAddrBook_GetSearchPath(*args)
    def SetSearchPath(*args): return _MAPICore.IAddrBook_SetSearchPath(*args)
    def PrepareRecips(*args): return _MAPICore.IAddrBook_PrepareRecips(*args)
    __swig_destroy__ = _MAPICore.delete_IAddrBook
    __del__ = lambda self : None;
IAddrBook_swigregister = _MAPICore.IAddrBook_swigregister
IAddrBook_swigregister(IAddrBook)

MAPI_DEFAULT_SERVICES = _MAPICore.MAPI_DEFAULT_SERVICES
class IProfAdmin(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProfAdmin, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProfAdmin, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IProfAdmin_GetLastError(*args)
    def GetProfileTable(*args): return _MAPICore.IProfAdmin_GetProfileTable(*args)
    def CreateProfile(*args): return _MAPICore.IProfAdmin_CreateProfile(*args)
    def DeleteProfile(*args): return _MAPICore.IProfAdmin_DeleteProfile(*args)
    def ChangeProfilePassword(*args): return _MAPICore.IProfAdmin_ChangeProfilePassword(*args)
    def CopyProfile(*args): return _MAPICore.IProfAdmin_CopyProfile(*args)
    def RenameProfile(*args): return _MAPICore.IProfAdmin_RenameProfile(*args)
    def SetDefaultProfile(*args): return _MAPICore.IProfAdmin_SetDefaultProfile(*args)
    def AdminServices(*args): return _MAPICore.IProfAdmin_AdminServices(*args)
    __swig_destroy__ = _MAPICore.delete_IProfAdmin
    __del__ = lambda self : None;
IProfAdmin_swigregister = _MAPICore.IProfAdmin_swigregister
IProfAdmin_swigregister(IProfAdmin)

SERVICE_DEFAULT_STORE = _MAPICore.SERVICE_DEFAULT_STORE
SERVICE_SINGLE_COPY = _MAPICore.SERVICE_SINGLE_COPY
SERVICE_CREATE_WITH_STORE = _MAPICore.SERVICE_CREATE_WITH_STORE
SERVICE_PRIMARY_IDENTITY = _MAPICore.SERVICE_PRIMARY_IDENTITY
SERVICE_NO_PRIMARY_IDENTITY = _MAPICore.SERVICE_NO_PRIMARY_IDENTITY
class IMsgServiceAdmin(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMsgServiceAdmin, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMsgServiceAdmin, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IMsgServiceAdmin_GetLastError(*args)
    def GetMsgServiceTable(*args): return _MAPICore.IMsgServiceAdmin_GetMsgServiceTable(*args)
    def CreateMsgService(*args): return _MAPICore.IMsgServiceAdmin_CreateMsgService(*args)
    def DeleteMsgService(*args): return _MAPICore.IMsgServiceAdmin_DeleteMsgService(*args)
    def CopyMsgService(*args): return _MAPICore.IMsgServiceAdmin_CopyMsgService(*args)
    def RenameMsgService(*args): return _MAPICore.IMsgServiceAdmin_RenameMsgService(*args)
    def ConfigureMsgService(*args): return _MAPICore.IMsgServiceAdmin_ConfigureMsgService(*args)
    def OpenProfileSection(*args): return _MAPICore.IMsgServiceAdmin_OpenProfileSection(*args)
    def MsgServiceTransportOrder(*args): return _MAPICore.IMsgServiceAdmin_MsgServiceTransportOrder(*args)
    def AdminProviders(*args): return _MAPICore.IMsgServiceAdmin_AdminProviders(*args)
    def SetPrimaryIdentity(*args): return _MAPICore.IMsgServiceAdmin_SetPrimaryIdentity(*args)
    def GetProviderTable(*args): return _MAPICore.IMsgServiceAdmin_GetProviderTable(*args)
    __swig_destroy__ = _MAPICore.delete_IMsgServiceAdmin
    __del__ = lambda self : None;
IMsgServiceAdmin_swigregister = _MAPICore.IMsgServiceAdmin_swigregister
IMsgServiceAdmin_swigregister(IMsgServiceAdmin)

MAPI_E_CALL_FAILED = _MAPICore.MAPI_E_CALL_FAILED
MAPI_E_NOT_ENOUGH_MEMORY = _MAPICore.MAPI_E_NOT_ENOUGH_MEMORY
MAPI_E_INVALID_PARAMETER = _MAPICore.MAPI_E_INVALID_PARAMETER
MAPI_E_INTERFACE_NOT_SUPPORTED = _MAPICore.MAPI_E_INTERFACE_NOT_SUPPORTED
MAPI_E_NO_ACCESS = _MAPICore.MAPI_E_NO_ACCESS
MAPI_E_NO_SUPPORT = _MAPICore.MAPI_E_NO_SUPPORT
MAPI_E_BAD_CHARWIDTH = _MAPICore.MAPI_E_BAD_CHARWIDTH
MAPI_E_STRING_TOO_LONG = _MAPICore.MAPI_E_STRING_TOO_LONG
MAPI_E_UNKNOWN_FLAGS = _MAPICore.MAPI_E_UNKNOWN_FLAGS
MAPI_E_INVALID_ENTRYID = _MAPICore.MAPI_E_INVALID_ENTRYID
MAPI_E_INVALID_OBJECT = _MAPICore.MAPI_E_INVALID_OBJECT
MAPI_E_OBJECT_CHANGED = _MAPICore.MAPI_E_OBJECT_CHANGED
MAPI_E_OBJECT_DELETED = _MAPICore.MAPI_E_OBJECT_DELETED
MAPI_E_BUSY = _MAPICore.MAPI_E_BUSY
MAPI_E_NOT_ENOUGH_DISK = _MAPICore.MAPI_E_NOT_ENOUGH_DISK
MAPI_E_NOT_ENOUGH_RESOURCES = _MAPICore.MAPI_E_NOT_ENOUGH_RESOURCES
MAPI_E_NOT_FOUND = _MAPICore.MAPI_E_NOT_FOUND
MAPI_E_VERSION = _MAPICore.MAPI_E_VERSION
MAPI_E_LOGON_FAILED = _MAPICore.MAPI_E_LOGON_FAILED
MAPI_E_SESSION_LIMIT = _MAPICore.MAPI_E_SESSION_LIMIT
MAPI_E_USER_CANCEL = _MAPICore.MAPI_E_USER_CANCEL
MAPI_E_UNABLE_TO_ABORT = _MAPICore.MAPI_E_UNABLE_TO_ABORT
MAPI_E_NETWORK_ERROR = _MAPICore.MAPI_E_NETWORK_ERROR
MAPI_E_DISK_ERROR = _MAPICore.MAPI_E_DISK_ERROR
MAPI_E_TOO_COMPLEX = _MAPICore.MAPI_E_TOO_COMPLEX
MAPI_E_BAD_COLUMN = _MAPICore.MAPI_E_BAD_COLUMN
MAPI_E_EXTENDED_ERROR = _MAPICore.MAPI_E_EXTENDED_ERROR
MAPI_E_COMPUTED = _MAPICore.MAPI_E_COMPUTED
MAPI_E_CORRUPT_DATA = _MAPICore.MAPI_E_CORRUPT_DATA
MAPI_E_UNCONFIGURED = _MAPICore.MAPI_E_UNCONFIGURED
MAPI_E_FAILONEPROVIDER = _MAPICore.MAPI_E_FAILONEPROVIDER
MAPI_E_UNKNOWN_CPID = _MAPICore.MAPI_E_UNKNOWN_CPID
MAPI_E_UNKNOWN_LCID = _MAPICore.MAPI_E_UNKNOWN_LCID
MAPI_E_PASSWORD_CHANGE_REQUIRED = _MAPICore.MAPI_E_PASSWORD_CHANGE_REQUIRED
MAPI_E_PASSWORD_EXPIRED = _MAPICore.MAPI_E_PASSWORD_EXPIRED
MAPI_E_INVALID_WORKSTATION_ACCOUNT = _MAPICore.MAPI_E_INVALID_WORKSTATION_ACCOUNT
MAPI_E_INVALID_ACCESS_TIME = _MAPICore.MAPI_E_INVALID_ACCESS_TIME
MAPI_E_ACCOUNT_DISABLED = _MAPICore.MAPI_E_ACCOUNT_DISABLED
MAPI_E_END_OF_SESSION = _MAPICore.MAPI_E_END_OF_SESSION
MAPI_E_UNKNOWN_ENTRYID = _MAPICore.MAPI_E_UNKNOWN_ENTRYID
MAPI_E_MISSING_REQUIRED_COLUMN = _MAPICore.MAPI_E_MISSING_REQUIRED_COLUMN
MAPI_W_NO_SERVICE = _MAPICore.MAPI_W_NO_SERVICE
MAPI_E_BAD_VALUE = _MAPICore.MAPI_E_BAD_VALUE
MAPI_E_INVALID_TYPE = _MAPICore.MAPI_E_INVALID_TYPE
MAPI_E_TYPE_NO_SUPPORT = _MAPICore.MAPI_E_TYPE_NO_SUPPORT
MAPI_E_UNEXPECTED_TYPE = _MAPICore.MAPI_E_UNEXPECTED_TYPE
MAPI_E_TOO_BIG = _MAPICore.MAPI_E_TOO_BIG
MAPI_E_DECLINE_COPY = _MAPICore.MAPI_E_DECLINE_COPY
MAPI_E_UNEXPECTED_ID = _MAPICore.MAPI_E_UNEXPECTED_ID
MAPI_W_ERRORS_RETURNED = _MAPICore.MAPI_W_ERRORS_RETURNED
MAPI_E_UNABLE_TO_COMPLETE = _MAPICore.MAPI_E_UNABLE_TO_COMPLETE
MAPI_E_TIMEOUT = _MAPICore.MAPI_E_TIMEOUT
MAPI_E_TABLE_EMPTY = _MAPICore.MAPI_E_TABLE_EMPTY
MAPI_E_TABLE_TOO_BIG = _MAPICore.MAPI_E_TABLE_TOO_BIG
MAPI_E_INVALID_BOOKMARK = _MAPICore.MAPI_E_INVALID_BOOKMARK
MAPI_W_POSITION_CHANGED = _MAPICore.MAPI_W_POSITION_CHANGED
MAPI_W_APPROX_COUNT = _MAPICore.MAPI_W_APPROX_COUNT
MAPI_E_WAIT = _MAPICore.MAPI_E_WAIT
MAPI_E_CANCEL = _MAPICore.MAPI_E_CANCEL
MAPI_E_NOT_ME = _MAPICore.MAPI_E_NOT_ME
MAPI_W_CANCEL_MESSAGE = _MAPICore.MAPI_W_CANCEL_MESSAGE
MAPI_E_CORRUPT_STORE = _MAPICore.MAPI_E_CORRUPT_STORE
MAPI_E_NOT_IN_QUEUE = _MAPICore.MAPI_E_NOT_IN_QUEUE
MAPI_E_NO_SUPPRESS = _MAPICore.MAPI_E_NO_SUPPRESS
MAPI_E_COLLISION = _MAPICore.MAPI_E_COLLISION
MAPI_E_NOT_INITIALIZED = _MAPICore.MAPI_E_NOT_INITIALIZED
MAPI_E_NON_STANDARD = _MAPICore.MAPI_E_NON_STANDARD
MAPI_E_NO_RECIPIENTS = _MAPICore.MAPI_E_NO_RECIPIENTS
MAPI_E_SUBMITTED = _MAPICore.MAPI_E_SUBMITTED
MAPI_E_HAS_FOLDERS = _MAPICore.MAPI_E_HAS_FOLDERS
MAPI_E_HAS_MESSAGES = _MAPICore.MAPI_E_HAS_MESSAGES
MAPI_E_FOLDER_CYCLE = _MAPICore.MAPI_E_FOLDER_CYCLE
MAPI_W_PARTIAL_COMPLETION = _MAPICore.MAPI_W_PARTIAL_COMPLETION
MAPI_E_AMBIGUOUS_RECIP = _MAPICore.MAPI_E_AMBIGUOUS_RECIP
MAPI_E_STORE_FULL = _MAPICore.MAPI_E_STORE_FULL
class MAPINotifSink(IMAPIAdviseSink):
    __swig_setmethods__ = {}
    for _s in [IMAPIAdviseSink]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAPINotifSink, name, value)
    __swig_getmethods__ = {}
    for _s in [IMAPIAdviseSink]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MAPINotifSink, name)
    __repr__ = _swig_repr
    def GetNotifications(*args): return _MAPICore.MAPINotifSink_GetNotifications(*args)
    def __init__(self, *args): 
        this = _MAPICore.new_MAPINotifSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_MAPINotifSink
    __del__ = lambda self : None;
MAPINotifSink_swigregister = _MAPICore.MAPINotifSink_swigregister
MAPINotifSink_swigregister(MAPINotifSink)

WrapStoreEntryID = _MAPICore.WrapStoreEntryID
WrapCompressedRTFStream = _MAPICore.WrapCompressedRTFStream
class IExchangeImportContentsChanges(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExchangeImportContentsChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExchangeImportContentsChanges, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IExchangeImportContentsChanges_GetLastError(*args)
    def Config(*args): return _MAPICore.IExchangeImportContentsChanges_Config(*args)
    def UpdateState(*args): return _MAPICore.IExchangeImportContentsChanges_UpdateState(*args)
    def ImportMessageChange(*args): return _MAPICore.IExchangeImportContentsChanges_ImportMessageChange(*args)
    def ImportMessageDeletion(*args): return _MAPICore.IExchangeImportContentsChanges_ImportMessageDeletion(*args)
    def ImportPerUserReadStateChange(*args): return _MAPICore.IExchangeImportContentsChanges_ImportPerUserReadStateChange(*args)
    def ImportMessageMove(*args): return _MAPICore.IExchangeImportContentsChanges_ImportMessageMove(*args)
    __swig_destroy__ = _MAPICore.delete_IExchangeImportContentsChanges
    __del__ = lambda self : None;
IExchangeImportContentsChanges_swigregister = _MAPICore.IExchangeImportContentsChanges_swigregister
IExchangeImportContentsChanges_swigregister(IExchangeImportContentsChanges)

class IExchangeImportHierarchyChanges(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExchangeImportHierarchyChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExchangeImportHierarchyChanges, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IExchangeImportHierarchyChanges_GetLastError(*args)
    def Config(*args): return _MAPICore.IExchangeImportHierarchyChanges_Config(*args)
    def UpdateState(*args): return _MAPICore.IExchangeImportHierarchyChanges_UpdateState(*args)
    def ImportFolderChange(*args): return _MAPICore.IExchangeImportHierarchyChanges_ImportFolderChange(*args)
    def ImportFolderDeletion(*args): return _MAPICore.IExchangeImportHierarchyChanges_ImportFolderDeletion(*args)
    __swig_destroy__ = _MAPICore.delete_IExchangeImportHierarchyChanges
    __del__ = lambda self : None;
IExchangeImportHierarchyChanges_swigregister = _MAPICore.IExchangeImportHierarchyChanges_swigregister
IExchangeImportHierarchyChanges_swigregister(IExchangeImportHierarchyChanges)

class IExchangeExportChanges(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExchangeExportChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExchangeExportChanges, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IExchangeExportChanges_GetLastError(*args)
    def Config(*args): return _MAPICore.IExchangeExportChanges_Config(*args)
    def Synchronize(*args): return _MAPICore.IExchangeExportChanges_Synchronize(*args)
    def UpdateState(*args): return _MAPICore.IExchangeExportChanges_UpdateState(*args)
    __swig_destroy__ = _MAPICore.delete_IExchangeExportChanges
    __del__ = lambda self : None;
IExchangeExportChanges_swigregister = _MAPICore.IExchangeExportChanges_swigregister
IExchangeExportChanges_swigregister(IExchangeExportChanges)

class IExchangeManageStore(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExchangeManageStore, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExchangeManageStore, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateStoreEntryID(*args): return _MAPICore.IExchangeManageStore_CreateStoreEntryID(*args)
    def EntryIDFromSourceKey(*args): return _MAPICore.IExchangeManageStore_EntryIDFromSourceKey(*args)
    def GetRights(*args): return _MAPICore.IExchangeManageStore_GetRights(*args)
    def GetMailboxTable(*args): return _MAPICore.IExchangeManageStore_GetMailboxTable(*args)
    def GetPublicFolderTable(*args): return _MAPICore.IExchangeManageStore_GetPublicFolderTable(*args)
    __swig_destroy__ = _MAPICore.delete_IExchangeManageStore
    __del__ = lambda self : None;
IExchangeManageStore_swigregister = _MAPICore.IExchangeManageStore_swigregister
IExchangeManageStore_swigregister(IExchangeManageStore)

class IExchangeModifyTable(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExchangeModifyTable, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExchangeModifyTable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IExchangeModifyTable_GetLastError(*args)
    def GetTable(*args): return _MAPICore.IExchangeModifyTable_GetTable(*args)
    def ModifyTable(*args): return _MAPICore.IExchangeModifyTable_ModifyTable(*args)
    __swig_destroy__ = _MAPICore.delete_IExchangeModifyTable
    __del__ = lambda self : None;
IExchangeModifyTable_swigregister = _MAPICore.IExchangeModifyTable_swigregister
IExchangeModifyTable_swigregister(IExchangeModifyTable)

class ExchangeImportContentsChanges(IExchangeImportContentsChanges):
    __swig_setmethods__ = {}
    for _s in [IExchangeImportContentsChanges]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeImportContentsChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IExchangeImportContentsChanges]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeImportContentsChanges, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ExchangeImportContentsChanges:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ExchangeImportContentsChanges(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ExchangeImportContentsChanges
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ExchangeImportContentsChanges(self)
        return weakref_proxy(self)
ExchangeImportContentsChanges_swigregister = _MAPICore.ExchangeImportContentsChanges_swigregister
ExchangeImportContentsChanges_swigregister(ExchangeImportContentsChanges)

class ExchangeImportHierarchyChanges(IExchangeImportHierarchyChanges):
    __swig_setmethods__ = {}
    for _s in [IExchangeImportHierarchyChanges]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeImportHierarchyChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IExchangeImportHierarchyChanges]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeImportHierarchyChanges, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ExchangeImportHierarchyChanges:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ExchangeImportHierarchyChanges(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ExchangeImportHierarchyChanges
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ExchangeImportHierarchyChanges(self)
        return weakref_proxy(self)
ExchangeImportHierarchyChanges_swigregister = _MAPICore.ExchangeImportHierarchyChanges_swigregister
ExchangeImportHierarchyChanges_swigregister(ExchangeImportHierarchyChanges)

class ExchangeExportChanges(IExchangeExportChanges):
    __swig_setmethods__ = {}
    for _s in [IExchangeExportChanges]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeExportChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IExchangeExportChanges]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeExportChanges, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ExchangeExportChanges:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ExchangeExportChanges(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ExchangeExportChanges
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ExchangeExportChanges(self)
        return weakref_proxy(self)
ExchangeExportChanges_swigregister = _MAPICore.ExchangeExportChanges_swigregister
ExchangeExportChanges_swigregister(ExchangeExportChanges)

SYNC_UNICODE = _MAPICore.SYNC_UNICODE
SYNC_NO_DELETIONS = _MAPICore.SYNC_NO_DELETIONS
SYNC_NO_SOFT_DELETIONS = _MAPICore.SYNC_NO_SOFT_DELETIONS
SYNC_READ_STATE = _MAPICore.SYNC_READ_STATE
SYNC_ASSOCIATED = _MAPICore.SYNC_ASSOCIATED
SYNC_NORMAL = _MAPICore.SYNC_NORMAL
SYNC_NO_CONFLICTS = _MAPICore.SYNC_NO_CONFLICTS
SYNC_ONLY_SPECIFIED_PROPS = _MAPICore.SYNC_ONLY_SPECIFIED_PROPS
SYNC_NO_FOREIGN_KEYS = _MAPICore.SYNC_NO_FOREIGN_KEYS
SYNC_LIMITED_IMESSAGE = _MAPICore.SYNC_LIMITED_IMESSAGE
SYNC_CATCHUP = _MAPICore.SYNC_CATCHUP
SYNC_NEW_MESSAGE = _MAPICore.SYNC_NEW_MESSAGE
SYNC_MSG_SELECTIVE = _MAPICore.SYNC_MSG_SELECTIVE
SYNC_BEST_BODY = _MAPICore.SYNC_BEST_BODY
SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED = _MAPICore.SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED
SYNC_PROGRESS_MODE = _MAPICore.SYNC_PROGRESS_MODE
SYNC_FXRECOVERMODE = _MAPICore.SYNC_FXRECOVERMODE
SYNC_DEFER_CONFIG = _MAPICore.SYNC_DEFER_CONFIG
SYNC_FORCE_UNICODE = _MAPICore.SYNC_FORCE_UNICODE
DELETE_HARD_DELETE = _MAPICore.DELETE_HARD_DELETE
ROWLIST_REPLACE = _MAPICore.ROWLIST_REPLACE
ROW_ADD = _MAPICore.ROW_ADD
ROW_MODIFY = _MAPICore.ROW_MODIFY
ROW_REMOVE = _MAPICore.ROW_REMOVE
ROW_EMPTY = _MAPICore.ROW_EMPTY
SYNC_E_UNKNOWN_FLAGS = _MAPICore.SYNC_E_UNKNOWN_FLAGS
SYNC_E_INVALID_PARAMETER = _MAPICore.SYNC_E_INVALID_PARAMETER
SYNC_E_ERROR = _MAPICore.SYNC_E_ERROR
SYNC_E_OBJECT_DELETED = _MAPICore.SYNC_E_OBJECT_DELETED
SYNC_E_IGNORE = _MAPICore.SYNC_E_IGNORE
SYNC_E_CONFLICT = _MAPICore.SYNC_E_CONFLICT
SYNC_E_NO_PARENT = _MAPICore.SYNC_E_NO_PARENT
SYNC_E_INCEST = _MAPICore.SYNC_E_INCEST
SYNC_E_UNSYNCHRONIZED = _MAPICore.SYNC_E_UNSYNCHRONIZED
SYNC_W_PROGRESS = _MAPICore.SYNC_W_PROGRESS
SYNC_W_CLIENT_CHANGE_NEWER = _MAPICore.SYNC_W_CLIENT_CHANGE_NEWER
ECSTORE_TYPE_PRIVATE = _MAPICore.ECSTORE_TYPE_PRIVATE
ECSTORE_TYPE_PUBLIC = _MAPICore.ECSTORE_TYPE_PUBLIC
ECSTORE_TYPE_ARCHIVE = _MAPICore.ECSTORE_TYPE_ARCHIVE
class IECServiceAdmin(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECServiceAdmin, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECServiceAdmin, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateStore(*args): return _MAPICore.IECServiceAdmin_CreateStore(*args)
    def CreateEmptyStore(*args): return _MAPICore.IECServiceAdmin_CreateEmptyStore(*args)
    def ResolveStore(*args): return _MAPICore.IECServiceAdmin_ResolveStore(*args)
    def HookStore(*args): return _MAPICore.IECServiceAdmin_HookStore(*args)
    def UnhookStore(*args): return _MAPICore.IECServiceAdmin_UnhookStore(*args)
    def RemoveStore(*args): return _MAPICore.IECServiceAdmin_RemoveStore(*args)
    def CreateUser(*args): return _MAPICore.IECServiceAdmin_CreateUser(*args)
    def DeleteUser(*args): return _MAPICore.IECServiceAdmin_DeleteUser(*args)
    def SetUser(*args): return _MAPICore.IECServiceAdmin_SetUser(*args)
    def GetUser(*args): return _MAPICore.IECServiceAdmin_GetUser(*args)
    def ResolveUserName(*args): return _MAPICore.IECServiceAdmin_ResolveUserName(*args)
    def GetUserList(*args): return _MAPICore.IECServiceAdmin_GetUserList(*args)
    def GetSendAsList(*args): return _MAPICore.IECServiceAdmin_GetSendAsList(*args)
    def AddSendAsUser(*args): return _MAPICore.IECServiceAdmin_AddSendAsUser(*args)
    def DelSendAsUser(*args): return _MAPICore.IECServiceAdmin_DelSendAsUser(*args)
    def GetUserClientUpdateStatus(*args): return _MAPICore.IECServiceAdmin_GetUserClientUpdateStatus(*args)
    def RemoveAllObjects(*args): return _MAPICore.IECServiceAdmin_RemoveAllObjects(*args)
    def CreateGroup(*args): return _MAPICore.IECServiceAdmin_CreateGroup(*args)
    def DeleteGroup(*args): return _MAPICore.IECServiceAdmin_DeleteGroup(*args)
    def SetGroup(*args): return _MAPICore.IECServiceAdmin_SetGroup(*args)
    def GetGroup(*args): return _MAPICore.IECServiceAdmin_GetGroup(*args)
    def ResolveGroupName(*args): return _MAPICore.IECServiceAdmin_ResolveGroupName(*args)
    def GetGroupList(*args): return _MAPICore.IECServiceAdmin_GetGroupList(*args)
    def DeleteGroupUser(*args): return _MAPICore.IECServiceAdmin_DeleteGroupUser(*args)
    def AddGroupUser(*args): return _MAPICore.IECServiceAdmin_AddGroupUser(*args)
    def GetUserListOfGroup(*args): return _MAPICore.IECServiceAdmin_GetUserListOfGroup(*args)
    def GetGroupListOfUser(*args): return _MAPICore.IECServiceAdmin_GetGroupListOfUser(*args)
    def CreateCompany(*args): return _MAPICore.IECServiceAdmin_CreateCompany(*args)
    def DeleteCompany(*args): return _MAPICore.IECServiceAdmin_DeleteCompany(*args)
    def SetCompany(*args): return _MAPICore.IECServiceAdmin_SetCompany(*args)
    def GetCompany(*args): return _MAPICore.IECServiceAdmin_GetCompany(*args)
    def ResolveCompanyName(*args): return _MAPICore.IECServiceAdmin_ResolveCompanyName(*args)
    def GetCompanyList(*args): return _MAPICore.IECServiceAdmin_GetCompanyList(*args)
    def AddCompanyToRemoteViewList(*args): return _MAPICore.IECServiceAdmin_AddCompanyToRemoteViewList(*args)
    def DelCompanyFromRemoteViewList(*args): return _MAPICore.IECServiceAdmin_DelCompanyFromRemoteViewList(*args)
    def GetRemoteViewList(*args): return _MAPICore.IECServiceAdmin_GetRemoteViewList(*args)
    def AddUserToRemoteAdminList(*args): return _MAPICore.IECServiceAdmin_AddUserToRemoteAdminList(*args)
    def DelUserFromRemoteAdminList(*args): return _MAPICore.IECServiceAdmin_DelUserFromRemoteAdminList(*args)
    def GetRemoteAdminList(*args): return _MAPICore.IECServiceAdmin_GetRemoteAdminList(*args)
    def SyncUsers(*args): return _MAPICore.IECServiceAdmin_SyncUsers(*args)
    def GetQuota(*args): return _MAPICore.IECServiceAdmin_GetQuota(*args)
    def SetQuota(*args): return _MAPICore.IECServiceAdmin_SetQuota(*args)
    def AddQuotaRecipient(*args): return _MAPICore.IECServiceAdmin_AddQuotaRecipient(*args)
    def DeleteQuotaRecipient(*args): return _MAPICore.IECServiceAdmin_DeleteQuotaRecipient(*args)
    def GetQuotaRecipients(*args): return _MAPICore.IECServiceAdmin_GetQuotaRecipients(*args)
    def GetQuotaStatus(*args): return _MAPICore.IECServiceAdmin_GetQuotaStatus(*args)
    def PurgeSoftDelete(*args): return _MAPICore.IECServiceAdmin_PurgeSoftDelete(*args)
    def PurgeCache(*args): return _MAPICore.IECServiceAdmin_PurgeCache(*args)
    def OpenUserStoresTable(*args): return _MAPICore.IECServiceAdmin_OpenUserStoresTable(*args)
    def GetServerDetails(*args): return _MAPICore.IECServiceAdmin_GetServerDetails(*args)
    def ResolvePseudoUrl(*args): return _MAPICore.IECServiceAdmin_ResolvePseudoUrl(*args)
    def GetPublicStoreEntryID(*args): return _MAPICore.IECServiceAdmin_GetPublicStoreEntryID(*args)
    def GetArchiveStoreEntryID(*args): return _MAPICore.IECServiceAdmin_GetArchiveStoreEntryID(*args)
    __swig_destroy__ = _MAPICore.delete_IECServiceAdmin
    __del__ = lambda self : None;
IECServiceAdmin_swigregister = _MAPICore.IECServiceAdmin_swigregister
IECServiceAdmin_swigregister(IECServiceAdmin)

class IECSpooler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECSpooler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IECSpooler, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetMasterOutgoingTable(*args): return _MAPICore.IECSpooler_GetMasterOutgoingTable(*args)
    def DeleteFromMasterOutgoingTable(*args): return _MAPICore.IECSpooler_DeleteFromMasterOutgoingTable(*args)
    __swig_destroy__ = _MAPICore.delete_IECSpooler
    __del__ = lambda self : None;
IECSpooler_swigregister = _MAPICore.IECSpooler_swigregister
IECSpooler_swigregister(IECSpooler)

class IECTestProtocol(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECTestProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECTestProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def TestPerform(*args): return _MAPICore.IECTestProtocol_TestPerform(*args)
    def TestSet(*args): return _MAPICore.IECTestProtocol_TestSet(*args)
    def TestGet(*args): return _MAPICore.IECTestProtocol_TestGet(*args)
    __swig_destroy__ = _MAPICore.delete_IECTestProtocol
    __del__ = lambda self : None;
IECTestProtocol_swigregister = _MAPICore.IECTestProtocol_swigregister
IECTestProtocol_swigregister(IECTestProtocol)

class IECMultiStoreTable(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECMultiStoreTable, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECMultiStoreTable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def OpenMultiStoreTable(*args): return _MAPICore.IECMultiStoreTable_OpenMultiStoreTable(*args)
    __swig_destroy__ = _MAPICore.delete_IECMultiStoreTable
    __del__ = lambda self : None;
IECMultiStoreTable_swigregister = _MAPICore.IECMultiStoreTable_swigregister
IECMultiStoreTable_swigregister(IECMultiStoreTable)

class IECLicense(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECLicense, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECLicense, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def LicenseAuth(*args): return _MAPICore.IECLicense_LicenseAuth(*args)
    __swig_destroy__ = _MAPICore.delete_IECLicense
    __del__ = lambda self : None;
IECLicense_swigregister = _MAPICore.IECLicense_swigregister
IECLicense_swigregister(IECLicense)

class IECExportChanges(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECExportChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECExportChanges, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetChangeCount(*args): return _MAPICore.IECExportChanges_GetChangeCount(*args)
    def SetMessageInterface(*args): return _MAPICore.IECExportChanges_SetMessageInterface(*args)
    def SetLogger(*args): return _MAPICore.IECExportChanges_SetLogger(*args)
    __swig_destroy__ = _MAPICore.delete_IECExportChanges
    __del__ = lambda self : None;
IECExportChanges_swigregister = _MAPICore.IECExportChanges_swigregister
IECExportChanges_swigregister(IECExportChanges)

UnwrapObject = _MAPICore.UnwrapObject
class IECChangeAdvisor(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECChangeAdvisor, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECChangeAdvisor, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLastError(*args): return _MAPICore.IECChangeAdvisor_GetLastError(*args)
    def Config(*args): return _MAPICore.IECChangeAdvisor_Config(*args)
    def UpdateState(*args): return _MAPICore.IECChangeAdvisor_UpdateState(*args)
    def AddKeys(*args): return _MAPICore.IECChangeAdvisor_AddKeys(*args)
    def RemoveKeys(*args): return _MAPICore.IECChangeAdvisor_RemoveKeys(*args)
    def IsMonitoringSyncId(*args): return _MAPICore.IECChangeAdvisor_IsMonitoringSyncId(*args)
    def UpdateSyncState(*args): return _MAPICore.IECChangeAdvisor_UpdateSyncState(*args)
    __swig_destroy__ = _MAPICore.delete_IECChangeAdvisor
    __del__ = lambda self : None;
IECChangeAdvisor_swigregister = _MAPICore.IECChangeAdvisor_swigregister
IECChangeAdvisor_swigregister(IECChangeAdvisor)

class IECChangeAdviseSink(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECChangeAdviseSink, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECChangeAdviseSink, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def OnNotify(*args): return _MAPICore.IECChangeAdviseSink_OnNotify(*args)
    __swig_destroy__ = _MAPICore.delete_IECChangeAdviseSink
    __del__ = lambda self : None;
IECChangeAdviseSink_swigregister = _MAPICore.IECChangeAdviseSink_swigregister
IECChangeAdviseSink_swigregister(IECChangeAdviseSink)

class IECImportContentsChanges(IExchangeImportContentsChanges):
    __swig_setmethods__ = {}
    for _s in [IExchangeImportContentsChanges]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECImportContentsChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IExchangeImportContentsChanges]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECImportContentsChanges, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def ConfigForConversionStream(*args): return _MAPICore.IECImportContentsChanges_ConfigForConversionStream(*args)
    def ImportMessageChangeAsAStream(*args): return _MAPICore.IECImportContentsChanges_ImportMessageChangeAsAStream(*args)
    def SetMessageInterface(*args): return _MAPICore.IECImportContentsChanges_SetMessageInterface(*args)
    __swig_destroy__ = _MAPICore.delete_IECImportContentsChanges
    __del__ = lambda self : None;
IECImportContentsChanges_swigregister = _MAPICore.IECImportContentsChanges_swigregister
IECImportContentsChanges_swigregister(IECImportContentsChanges)

class IECSingleInstance(IUnknown):
    __swig_setmethods__ = {}
    for _s in [IUnknown]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IECSingleInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [IUnknown]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IECSingleInstance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSingleInstanceId(*args): return _MAPICore.IECSingleInstance_GetSingleInstanceId(*args)
    def SetSingleInstanceId(*args): return _MAPICore.IECSingleInstance_SetSingleInstanceId(*args)
    __swig_destroy__ = _MAPICore.delete_IECSingleInstance
    __del__ = lambda self : None;
IECSingleInstance_swigregister = _MAPICore.IECSingleInstance_swigregister
IECSingleInstance_swigregister(IECSingleInstance)

class ECChangeAdviseSink(IECChangeAdviseSink):
    __swig_setmethods__ = {}
    for _s in [IECChangeAdviseSink]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECChangeAdviseSink, name, value)
    __swig_getmethods__ = {}
    for _s in [IECChangeAdviseSink]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ECChangeAdviseSink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ECChangeAdviseSink:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ECChangeAdviseSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ECChangeAdviseSink
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ECChangeAdviseSink(self)
        return weakref_proxy(self)
ECChangeAdviseSink_swigregister = _MAPICore.ECChangeAdviseSink_swigregister
ECChangeAdviseSink_swigregister(ECChangeAdviseSink)

class ECImportContentsChanges(IECImportContentsChanges):
    __swig_setmethods__ = {}
    for _s in [IECImportContentsChanges]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECImportContentsChanges, name, value)
    __swig_getmethods__ = {}
    for _s in [IECImportContentsChanges]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ECImportContentsChanges, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ECImportContentsChanges:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ECImportContentsChanges(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ECImportContentsChanges
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ECImportContentsChanges(self)
        return weakref_proxy(self)
ECImportContentsChanges_swigregister = _MAPICore.ECImportContentsChanges_swigregister
ECImportContentsChanges_swigregister(ECImportContentsChanges)

MAPI_ORIG = _MAPICore.MAPI_ORIG
MAPI_TO = _MAPICore.MAPI_TO
MAPI_CC = _MAPICore.MAPI_CC
MAPI_BCC = _MAPICore.MAPI_BCC
MAPI_P1 = _MAPICore.MAPI_P1
MAPI_SUBMITTED = _MAPICore.MAPI_SUBMITTED
MAPI_UNREAD = _MAPICore.MAPI_UNREAD
MAPI_RECEIPT_REQUESTED = _MAPICore.MAPI_RECEIPT_REQUESTED
MAPI_SENT = _MAPICore.MAPI_SENT
MAPI_LOGON_UI = _MAPICore.MAPI_LOGON_UI
MAPI_PASSWORD_UI = _MAPICore.MAPI_PASSWORD_UI
MAPI_NEW_SESSION = _MAPICore.MAPI_NEW_SESSION
MAPI_FORCE_DOWNLOAD = _MAPICore.MAPI_FORCE_DOWNLOAD
MAPI_EXTENDED = _MAPICore.MAPI_EXTENDED
MAPI_DIALOG = _MAPICore.MAPI_DIALOG
MAPI_USE_DEFAULT = _MAPICore.MAPI_USE_DEFAULT
MAPI_UNREAD_ONLY = _MAPICore.MAPI_UNREAD_ONLY
MAPI_GUARANTEE_FIFO = _MAPICore.MAPI_GUARANTEE_FIFO
MAPI_LONG_MSGID = _MAPICore.MAPI_LONG_MSGID
MAPI_PEEK = _MAPICore.MAPI_PEEK
MAPI_SUPPRESS_ATTACH = _MAPICore.MAPI_SUPPRESS_ATTACH
MAPI_ENVELOPE_ONLY = _MAPICore.MAPI_ENVELOPE_ONLY
MAPI_BODY_AS_FILE = _MAPICore.MAPI_BODY_AS_FILE
MAPI_AB_NOMODIFY = _MAPICore.MAPI_AB_NOMODIFY
class ECSimpleLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECSimpleLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECSimpleLogger, name)
    __repr__ = _swig_repr
    def Log(*args): return _MAPICore.ECSimpleLogger_Log(*args)
    def __init__(self, *args): 
        if self.__class__ == ECSimpleLogger:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_ECSimpleLogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ECSimpleLogger
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_ECSimpleLogger(self)
        return weakref_proxy(self)
ECSimpleLogger_swigregister = _MAPICore.ECSimpleLogger_swigregister
ECSimpleLogger_swigregister(ECSimpleLogger)

class Stream(IStream):
    __swig_setmethods__ = {}
    for _s in [IStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [IStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Stream:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _MAPICore.new_Stream(*args)
        try: self.this.append(this)
        except: self.this = this
    def Read(*args): return _MAPICore.Stream_Read(*args)
    def Write(*args): return _MAPICore.Stream_Write(*args)
    __swig_destroy__ = _MAPICore.delete_Stream
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _MAPICore.disown_Stream(self)
        return weakref_proxy(self)
Stream_swigregister = _MAPICore.Stream_swigregister
Stream_swigregister(Stream)

EC_SYNC_OPT_STREAM = _MAPICore.EC_SYNC_OPT_STREAM
EC_SYNC_OPT_CHANGENOTIF = _MAPICore.EC_SYNC_OPT_CHANGENOTIF
EC_SYNC_OPT_STATECOLLECT = _MAPICore.EC_SYNC_OPT_STATECOLLECT
EC_SYNC_OPT_CONTINUOUS = _MAPICore.EC_SYNC_OPT_CONTINUOUS
EC_SYNC_OPT_ALL = _MAPICore.EC_SYNC_OPT_ALL
class ECSyncSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECSyncSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECSyncSettings, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _MAPICore.ECSyncSettings_GetInstance
    if _newclass:GetInstance = staticmethod(_MAPICore.ECSyncSettings_GetInstance)
    def SyncLogEnabled(*args): return _MAPICore.ECSyncSettings_SyncLogEnabled(*args)
    def SyncLogLevel(*args): return _MAPICore.ECSyncSettings_SyncLogLevel(*args)
    def ContinuousLogging(*args): return _MAPICore.ECSyncSettings_ContinuousLogging(*args)
    def SyncStreamEnabled(*args): return _MAPICore.ECSyncSettings_SyncStreamEnabled(*args)
    def ChangeNotificationsEnabled(*args): return _MAPICore.ECSyncSettings_ChangeNotificationsEnabled(*args)
    def StateCollectorEnabled(*args): return _MAPICore.ECSyncSettings_StateCollectorEnabled(*args)
    def StreamTimeout(*args): return _MAPICore.ECSyncSettings_StreamTimeout(*args)
    def StreamBufferSize(*args): return _MAPICore.ECSyncSettings_StreamBufferSize(*args)
    def StreamBatchSize(*args): return _MAPICore.ECSyncSettings_StreamBatchSize(*args)
    def EnableSyncLog(*args): return _MAPICore.ECSyncSettings_EnableSyncLog(*args)
    def SetSyncLogLevel(*args): return _MAPICore.ECSyncSettings_SetSyncLogLevel(*args)
    def SetSyncOptions(*args): return _MAPICore.ECSyncSettings_SetSyncOptions(*args)
    def SetStreamTimeout(*args): return _MAPICore.ECSyncSettings_SetStreamTimeout(*args)
    def SetStreamBufferSize(*args): return _MAPICore.ECSyncSettings_SetStreamBufferSize(*args)
    def SetStreamBatchSize(*args): return _MAPICore.ECSyncSettings_SetStreamBatchSize(*args)
    __swig_destroy__ = _MAPICore.delete_ECSyncSettings
    __del__ = lambda self : None;
ECSyncSettings_swigregister = _MAPICore.ECSyncSettings_swigregister
ECSyncSettings_swigregister(ECSyncSettings)
ECSyncSettings_GetInstance = _MAPICore.ECSyncSettings_GetInstance

class ECSyncLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECSyncLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECSyncLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetLogger"] = lambda x: _MAPICore.ECSyncLog_GetLogger
    if _newclass:GetLogger = staticmethod(_MAPICore.ECSyncLog_GetLogger)
    __swig_getmethods__["SetLogger"] = lambda x: _MAPICore.ECSyncLog_SetLogger
    if _newclass:SetLogger = staticmethod(_MAPICore.ECSyncLog_SetLogger)
    def __init__(self, *args): 
        this = _MAPICore.new_ECSyncLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MAPICore.delete_ECSyncLog
    __del__ = lambda self : None;
ECSyncLog_swigregister = _MAPICore.ECSyncLog_swigregister
ECSyncLog_swigregister(ECSyncLog)
ECSyncLog_GetLogger = _MAPICore.ECSyncLog_GetLogger
ECSyncLog_SetLogger = _MAPICore.ECSyncLog_SetLogger




# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_icalmapi', [dirname(__file__)])
        except ImportError:
            import _icalmapi
            return _icalmapi
        if fp is not None:
            try:
                _mod = imp.load_module('_icalmapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _icalmapi = swig_import_helper()
    del swig_import_helper
else:
    import _icalmapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


VEVENT = _icalmapi.VEVENT
VTODO = _icalmapi.VTODO
VJOURNAL = _icalmapi.VJOURNAL
IC2M_NO_RECIPIENTS = _icalmapi.IC2M_NO_RECIPIENTS
IC2M_APPEND_ONLY = _icalmapi.IC2M_APPEND_ONLY
IC2M_NO_ORGANIZER = _icalmapi.IC2M_NO_ORGANIZER
class ICalToMapi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICalToMapi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICalToMapi, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _icalmapi.delete_ICalToMapi
    __del__ = lambda self : None;
    def ParseICal(self, *args): return _icalmapi.ICalToMapi_ParseICal(self, *args)
    def GetItemCount(self): return _icalmapi.ICalToMapi_GetItemCount(self)
    def GetItem(self, *args): return _icalmapi.ICalToMapi_GetItem(self, *args)
    def GetItemInfo(self, *args): return _icalmapi.ICalToMapi_GetItemInfo(self, *args)
ICalToMapi_swigregister = _icalmapi.ICalToMapi_swigregister
ICalToMapi_swigregister(ICalToMapi)


def CreateICalToMapi(*args):
  return _icalmapi.CreateICalToMapi(*args)
CreateICalToMapi = _icalmapi.CreateICalToMapi
M2IC_CENSOR_PRIVATE = _icalmapi.M2IC_CENSOR_PRIVATE
M2IC_NO_VTIMEZONE = _icalmapi.M2IC_NO_VTIMEZONE
class MapiToICal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapiToICal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapiToICal, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _icalmapi.delete_MapiToICal
    __del__ = lambda self : None;
    def AddMessage(self, *args): return _icalmapi.MapiToICal_AddMessage(self, *args)
    def AddBlocks(self, *args): return _icalmapi.MapiToICal_AddBlocks(self, *args)
    def Finalize(self, *args): return _icalmapi.MapiToICal_Finalize(self, *args)
    def ResetObject(self): return _icalmapi.MapiToICal_ResetObject(self)
MapiToICal_swigregister = _icalmapi.MapiToICal_swigregister
MapiToICal_swigregister(MapiToICal)


def CreateMapiToICal(*args):
  return _icalmapi.CreateMapiToICal(*args)
CreateMapiToICal = _icalmapi.CreateMapiToICal



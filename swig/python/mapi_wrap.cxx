/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be usefull for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(Arg) Swig::get_rtdir(static_cast<void*>(Arg))
# define SWIG_DIRECTOR_RGTR(Arg1, Arg2) Swig::set_rtdir(static_cast<void*>(Arg1), Arg2)

#else

# define SWIG_DIRECTOR_CAST(Arg) dynamic_cast<Swig::Director*>(Arg)
# define SWIG_DIRECTOR_RGTR(Arg1, Arg2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() = 0;

    virtual int get_own() const
    {
      return 0;
    }
  };

  GCItem::~GCItem()
  {
  }

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        swig_msg.insert(0, ": ");
        PyErr_SetString(error, getMessage());
      } else {
        SWIG_Python_AddErrorMsg(getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "Swig Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "Swig director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "Swig director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "Swig director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "Swig director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* name */, bool /* val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> ownership_map;
    mutable ownership_map owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        ownership_map::iterator iter = owner.find(vptr);
        if (iter != owner.end()) {
          own = iter->second->get_own();
          owner.erase(iter);
        }
      }
      return own;
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BYTE swig_types[0]
#define SWIGTYPE_p_ECChangeAdviseSink swig_types[1]
#define SWIGTYPE_p_ECImportContentsChanges swig_types[2]
#define SWIGTYPE_p_ECLogger swig_types[3]
#define SWIGTYPE_p_ECSimpleLogger swig_types[4]
#define SWIGTYPE_p_ECSyncLog swig_types[5]
#define SWIGTYPE_p_ECSyncSettings swig_types[6]
#define SWIGTYPE_p_ExchangeExportChanges swig_types[7]
#define SWIGTYPE_p_ExchangeImportContentsChanges swig_types[8]
#define SWIGTYPE_p_ExchangeImportHierarchyChanges swig_types[9]
#define SWIGTYPE_p_GUID swig_types[10]
#define SWIGTYPE_p_IABContainer swig_types[11]
#define SWIGTYPE_p_IAddrBook swig_types[12]
#define SWIGTYPE_p_IAttach swig_types[13]
#define SWIGTYPE_p_IDistList swig_types[14]
#define SWIGTYPE_p_IECChangeAdviseSink swig_types[15]
#define SWIGTYPE_p_IECChangeAdvisor swig_types[16]
#define SWIGTYPE_p_IECExportChanges swig_types[17]
#define SWIGTYPE_p_IECImportContentsChanges swig_types[18]
#define SWIGTYPE_p_IECLicense swig_types[19]
#define SWIGTYPE_p_IECMultiStoreTable swig_types[20]
#define SWIGTYPE_p_IECServiceAdmin swig_types[21]
#define SWIGTYPE_p_IECSingleInstance swig_types[22]
#define SWIGTYPE_p_IECSpooler swig_types[23]
#define SWIGTYPE_p_IECTestProtocol swig_types[24]
#define SWIGTYPE_p_IExchangeExportChanges swig_types[25]
#define SWIGTYPE_p_IExchangeImportContentsChanges swig_types[26]
#define SWIGTYPE_p_IExchangeImportHierarchyChanges swig_types[27]
#define SWIGTYPE_p_IExchangeManageStore swig_types[28]
#define SWIGTYPE_p_IExchangeModifyTable swig_types[29]
#define SWIGTYPE_p_IID swig_types[30]
#define SWIGTYPE_p_IMAPIAdviseSink swig_types[31]
#define SWIGTYPE_p_IMAPIContainer swig_types[32]
#define SWIGTYPE_p_IMAPIFolder swig_types[33]
#define SWIGTYPE_p_IMAPIProgress swig_types[34]
#define SWIGTYPE_p_IMAPIProp swig_types[35]
#define SWIGTYPE_p_IMAPISession swig_types[36]
#define SWIGTYPE_p_IMAPIStatus swig_types[37]
#define SWIGTYPE_p_IMAPITable swig_types[38]
#define SWIGTYPE_p_IMailUser swig_types[39]
#define SWIGTYPE_p_IMessage swig_types[40]
#define SWIGTYPE_p_IMsgServiceAdmin swig_types[41]
#define SWIGTYPE_p_IMsgStore swig_types[42]
#define SWIGTYPE_p_IProfAdmin swig_types[43]
#define SWIGTYPE_p_IProfSect swig_types[44]
#define SWIGTYPE_p_IProviderAdmin swig_types[45]
#define SWIGTYPE_p_IProxyStoreObject swig_types[46]
#define SWIGTYPE_p_ISequentialStream swig_types[47]
#define SWIGTYPE_p_IStream swig_types[48]
#define SWIGTYPE_p_IUnknown swig_types[49]
#define SWIGTYPE_p_LARGE_INTEGER swig_types[50]
#define SWIGTYPE_p_LONG swig_types[51]
#define SWIGTYPE_p_LPADRENTRY swig_types[52]
#define SWIGTYPE_p_LPADRLIST swig_types[53]
#define SWIGTYPE_p_LPADRPARM swig_types[54]
#define SWIGTYPE_p_LPBYTE swig_types[55]
#define SWIGTYPE_p_LPCIID swig_types[56]
#define SWIGTYPE_p_LPECCOMPANY swig_types[57]
#define SWIGTYPE_p_LPECGROUP swig_types[58]
#define SWIGTYPE_p_LPECQUOTA swig_types[59]
#define SWIGTYPE_p_LPECQUOTASTATUS swig_types[60]
#define SWIGTYPE_p_LPECSERVERLIST swig_types[61]
#define SWIGTYPE_p_LPECSVRNAMELIST swig_types[62]
#define SWIGTYPE_p_LPECUSER swig_types[63]
#define SWIGTYPE_p_LPECUSERCLIENTUPDATESTATUS swig_types[64]
#define SWIGTYPE_p_LPENTRYID swig_types[65]
#define SWIGTYPE_p_LPENTRYLIST swig_types[66]
#define SWIGTYPE_p_LPFNBUTTON swig_types[67]
#define SWIGTYPE_p_LPFNDISMISS swig_types[68]
#define SWIGTYPE_p_LPFlagList swig_types[69]
#define SWIGTYPE_p_LPGUID swig_types[70]
#define SWIGTYPE_p_LPMAPIADVISESINK swig_types[71]
#define SWIGTYPE_p_LPMAPIERROR swig_types[72]
#define SWIGTYPE_p_LPMAPIFOLDER swig_types[73]
#define SWIGTYPE_p_LPMAPINAMEID swig_types[74]
#define SWIGTYPE_p_LPMAPIPROP swig_types[75]
#define SWIGTYPE_p_LPMAPITABLE swig_types[76]
#define SWIGTYPE_p_LPMAPIUID swig_types[77]
#define SWIGTYPE_p_LPMDB swig_types[78]
#define SWIGTYPE_p_LPMESSAGE swig_types[79]
#define SWIGTYPE_p_LPNOTIFICATION swig_types[80]
#define SWIGTYPE_p_LPREADSTATE swig_types[81]
#define SWIGTYPE_p_LPROWLIST swig_types[82]
#define SWIGTYPE_p_LPSPropProblemArray swig_types[83]
#define SWIGTYPE_p_LPSPropTagArray swig_types[84]
#define SWIGTYPE_p_LPSPropValue swig_types[85]
#define SWIGTYPE_p_LPSRestriction swig_types[86]
#define SWIGTYPE_p_LPSRowSet swig_types[87]
#define SWIGTYPE_p_LPSSortOrderSet swig_types[88]
#define SWIGTYPE_p_LPSTR swig_types[89]
#define SWIGTYPE_p_LPTSTR swig_types[90]
#define SWIGTYPE_p_LPUNKNOWN swig_types[91]
#define SWIGTYPE_p_LPVOID swig_types[92]
#define SWIGTYPE_p_MAPIAdviseSink swig_types[93]
#define SWIGTYPE_p_MAPIINIT_0 swig_types[94]
#define SWIGTYPE_p_MAPINotifSink swig_types[95]
#define SWIGTYPE_p_STATSTG swig_types[96]
#define SWIGTYPE_p_Stream swig_types[97]
#define SWIGTYPE_p_ULARGE_INTEGER swig_types[98]
#define SWIGTYPE_p_ULONG swig_types[99]
#define SWIGTYPE_p_bool swig_types[100]
#define SWIGTYPE_p_char swig_types[101]
#define SWIGTYPE_p_p_ECChangeAdviseSink swig_types[102]
#define SWIGTYPE_p_p_ECImportContentsChanges swig_types[103]
#define SWIGTYPE_p_p_ECLogger swig_types[104]
#define SWIGTYPE_p_p_ExchangeExportChanges swig_types[105]
#define SWIGTYPE_p_p_ExchangeImportContentsChanges swig_types[106]
#define SWIGTYPE_p_p_ExchangeImportHierarchyChanges swig_types[107]
#define SWIGTYPE_p_p_IABContainer swig_types[108]
#define SWIGTYPE_p_p_IAddrBook swig_types[109]
#define SWIGTYPE_p_p_IAttach swig_types[110]
#define SWIGTYPE_p_p_IDistList swig_types[111]
#define SWIGTYPE_p_p_IECChangeAdviseSink swig_types[112]
#define SWIGTYPE_p_p_IECChangeAdvisor swig_types[113]
#define SWIGTYPE_p_p_IECExportChanges swig_types[114]
#define SWIGTYPE_p_p_IECImportContentsChanges swig_types[115]
#define SWIGTYPE_p_p_IECLicense swig_types[116]
#define SWIGTYPE_p_p_IECMultiStoreTable swig_types[117]
#define SWIGTYPE_p_p_IECServiceAdmin swig_types[118]
#define SWIGTYPE_p_p_IECSingleInstance swig_types[119]
#define SWIGTYPE_p_p_IECTestProtocol swig_types[120]
#define SWIGTYPE_p_p_IExchangeExportChanges swig_types[121]
#define SWIGTYPE_p_p_IExchangeImportContentsChanges swig_types[122]
#define SWIGTYPE_p_p_IExchangeImportHierarchyChanges swig_types[123]
#define SWIGTYPE_p_p_IExchangeManageStore swig_types[124]
#define SWIGTYPE_p_p_IExchangeModifyTable swig_types[125]
#define SWIGTYPE_p_p_IMAPIAdviseSink swig_types[126]
#define SWIGTYPE_p_p_IMAPIContainer swig_types[127]
#define SWIGTYPE_p_p_IMAPIFolder swig_types[128]
#define SWIGTYPE_p_p_IMAPIProgress swig_types[129]
#define SWIGTYPE_p_p_IMAPIProp swig_types[130]
#define SWIGTYPE_p_p_IMAPISession swig_types[131]
#define SWIGTYPE_p_p_IMAPIStatus swig_types[132]
#define SWIGTYPE_p_p_IMAPITable swig_types[133]
#define SWIGTYPE_p_p_IMailUser swig_types[134]
#define SWIGTYPE_p_p_IMessage swig_types[135]
#define SWIGTYPE_p_p_IMsgServiceAdmin swig_types[136]
#define SWIGTYPE_p_p_IMsgStore swig_types[137]
#define SWIGTYPE_p_p_IProfAdmin swig_types[138]
#define SWIGTYPE_p_p_IProfSect swig_types[139]
#define SWIGTYPE_p_p_IProviderAdmin swig_types[140]
#define SWIGTYPE_p_p_IProxyStoreObject swig_types[141]
#define SWIGTYPE_p_p_ISequentialStream swig_types[142]
#define SWIGTYPE_p_p_IStream swig_types[143]
#define SWIGTYPE_p_p_IUnknown swig_types[144]
#define SWIGTYPE_p_p_LPMAPINAMEID swig_types[145]
#define SWIGTYPE_p_p_LPTSTR swig_types[146]
#define SWIGTYPE_p_p_MAPIAdviseSink swig_types[147]
#define SWIGTYPE_p_p_MAPIERROR swig_types[148]
#define SWIGTYPE_p_p_MAPINotifSink swig_types[149]
#define SWIGTYPE_p_p_Stream swig_types[150]
#define SWIGTYPE_p_p_char swig_types[151]
#define SWIGTYPE_p_p_unsigned_char swig_types[152]
#define SWIGTYPE_p_p_void swig_types[153]
#define SWIGTYPE_p_tagLOCKTYPE swig_types[154]
#define SWIGTYPE_p_tagSTATFLAG swig_types[155]
#define SWIGTYPE_p_tagSTGTY swig_types[156]
#define SWIGTYPE_p_tagSTREAM_SEEK swig_types[157]
#define SWIGTYPE_p_unsigned_char swig_types[158]
#define SWIGTYPE_p_unsigned_int swig_types[159]
#define SWIGTYPE_p_void swig_types[160]
#define SWIGTYPE_p_wchar_t swig_types[161]
static swig_type_info *swig_types[163];
static swig_module_info swig_module = {swig_types, 162, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _MAPICore.so
  ------------------------------------------------*/
#define SWIG_init    init_MAPICore

#define SWIG_name    "_MAPICore"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#undef LOCK_WRITE
#include <platform.h>
#include <mapi.h>
#include <mapidefs.h>
#include <mapicode.h>
#include <mapiutil.h>
#include "IECServiceAdmin.h"
#include "IECSpooler.h"
#include "IECTestProtocol.h"
#include "IECMultiStoreTable.h"
#include "IECExportChanges.h"
#include "IECLicense.h"

/*
 * perl: CORE/thread.h can define PTHREAD_CREATE_JOINABLE to a value. This clashes with
 * the windows pthread implementation, where it's used in an enum.
 */
#ifdef PTHREAD_CREATE_JOINABLE
	#undef PTHREAD_CREATE_JOINABLE
#endif

#include "MAPINotifSink.h"
#include "director_util.h"


#include "conversion.h"
#include "director_util.h"

#define SWIG_SHADOW 0
#define SWIG_OWNER SWIG_POINTER_OWN

#define DIRECTORARGOUT(_arg) (__tupleIndex == -1 ? (PyObject*)(_arg) : PyTuple_GetItem((_arg), __tupleIndex++))


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN void delete_IUnknown(IUnknown *self){ self->Release(); }

  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN HRESULT ISequentialStream_Read(ISequentialStream *self,ULONG cb,char **lpOutput,ULONG *ulRead){
			char *buffer;
			HRESULT hr = MAPIAllocateBuffer(cb, (void **)&buffer);

			if(hr != hrSuccess)
				goto exit;			

			self->Read(buffer, cb, ulRead);

			*lpOutput = buffer;
		exit:
			return hr;
		}

SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}

SWIGINTERN IStream *new_IStream(){
			IStream *lpStream = NULL;
			HRESULT hr = CreateStreamOnHGlobal(NULL, TRUE, &lpStream);
			if(hr == hrSuccess)
				return lpStream;
			return NULL;
		}
SWIGINTERN void delete_IStream(IStream *self){
			self->Release();
		}

#undef LOCK_WRITE
#undef LOCK_EXCLUSIVE
#include <../include/mapidefs.h>

SWIGINTERN void delete_IMAPIProp(IMAPIProp *self){ self->Release(); }
SWIGINTERN void delete_IMAPIContainer(IMAPIContainer *self){ self->Release(); }
SWIGINTERN void delete_IMAPIAdviseSink(IMAPIAdviseSink *self){ self->Release(); }

#include "swig_iunknown.h"
typedef IUnknownImplementor<IMAPIAdviseSink> MAPIAdviseSink;

SWIGINTERN void delete_MAPIAdviseSink(MAPIAdviseSink *self){ self->Release(); }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <wchar.h>
#include <limits.h>
#ifndef WCHAR_MIN
#  define WCHAR_MIN 0
#endif
#ifndef WCHAR_MAX
#  define WCHAR_MAX 65535
#endif


SWIGINTERN swig_type_info*
SWIG_pwchar_descriptor()
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_wchar_t");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromWCharPtrAndSize(const wchar_t * carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pwchar_descriptor = SWIG_pwchar_descriptor();
      return pwchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< wchar_t * >(carray), pwchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyUnicode_FromWideChar(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromWCharPtr(const wchar_t *cptr)
{ 
  return SWIG_FromWCharPtrAndSize(cptr, (cptr ? wcslen(cptr) : 0));
}

SWIGINTERN void delete_IMsgStore(IMsgStore *self){ self->Release(); }
SWIGINTERN void delete_IProxyStoreObject(IProxyStoreObject *self){ self->Release(); }
SWIGINTERN HRESULT IProxyStoreObject_UnwrapNoRef(IProxyStoreObject *self,IUnknown **OUTPUT){
            HRESULT hr = 0;
            hr = self->UnwrapNoRef((LPVOID*)OUTPUT);
            if(hr == 0)
                (*OUTPUT)->AddRef();

            return hr;          
        }
SWIGINTERN void delete_IMAPIFolder(IMAPIFolder *self){ self->Release(); }
SWIGINTERN void delete_IMessage(IMessage *self){ self->Release(); }
SWIGINTERN void delete_IAttach(IAttach *self){ self->Release(); }
SWIGINTERN void delete_IABContainer(IABContainer *self){ self->Release(); }
SWIGINTERN void delete_IMailUser(IMailUser *self){ self->Release(); }
SWIGINTERN void delete_IDistList(IDistList *self){ self->Release(); }
SWIGINTERN void delete_IMAPIStatus(IMAPIStatus *self){ self->Release(); }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void delete_IMAPITable(IMAPITable *self){ self->Release(); }
SWIGINTERN void delete_IProfSect(IProfSect *self){ self->Release(); }
SWIGINTERN void delete_IMAPIProgress(IMAPIProgress *self){ self->Release(); }
SWIGINTERN void delete_IProviderAdmin(IProviderAdmin *self){ self->Release(); }

#include <../include/mapix.h>

SWIGINTERN void delete_IMAPISession(IMAPISession *self){ self->Release(); }
SWIGINTERN void delete_IAddrBook(IAddrBook *self){ self->Release(); }
SWIGINTERN void delete_IProfAdmin(IProfAdmin *self){ self->Release(); }
SWIGINTERN void delete_IMsgServiceAdmin(IMsgServiceAdmin *self){ self->Release(); }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN MAPINotifSink *new_MAPINotifSink(){ 
			MAPINotifSink *lpSink = NULL;
			MAPINotifSink::Create(&lpSink); 
			return lpSink; 
		}
SWIGINTERN void delete_MAPINotifSink(MAPINotifSink *self){ self->Release(); }

// Hack to get around OP_DELETE being an enum in perl\lib\core\opnames.h and EdkMdb.h
namespace EdkMdb {
	#include <edkmdb.h>
}
using namespace EdkMdb;

SWIGINTERN void delete_IExchangeImportContentsChanges(IExchangeImportContentsChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeImportHierarchyChanges(IExchangeImportHierarchyChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeExportChanges(IExchangeExportChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeManageStore(IExchangeManageStore *self){ self->Release(); }
SWIGINTERN void delete_IExchangeModifyTable(IExchangeModifyTable *self){ self->Release(); }

#include "swig_iunknown.h"
typedef IUnknownImplementor<IExchangeImportContentsChanges> ExchangeImportContentsChanges;
typedef IUnknownImplementor<IExchangeImportHierarchyChanges> ExchangeImportHierarchyChanges;
typedef IUnknownImplementor<IExchangeExportChanges> ExchangeExportChanges;

SWIGINTERN void delete_ExchangeImportContentsChanges(ExchangeImportContentsChanges *self){ delete self; }
SWIGINTERN void delete_ExchangeImportHierarchyChanges(ExchangeImportHierarchyChanges *self){ delete self; }
SWIGINTERN void delete_ExchangeExportChanges(ExchangeExportChanges *self){ delete self; }
SWIGINTERN void delete_IECServiceAdmin(IECServiceAdmin *self){ self->Release(); }
SWIGINTERN void delete_IECSpooler(IECSpooler *self){ self->Release(); }
SWIGINTERN void delete_IECTestProtocol(IECTestProtocol *self){ self->Release(); }
SWIGINTERN void delete_IECMultiStoreTable(IECMultiStoreTable *self){ self->Release(); }

SWIGINTERNINLINE PyObject *
SWIG_FromBytePtrAndSize(const unsigned char* carray, size_t size)
{
	return SWIG_FromCharPtrAndSize(reinterpret_cast<const char *>(carray), size);
}

SWIGINTERN void delete_IECLicense(IECLicense *self){ self->Release(); }

#include "IECExportChanges.h"

SWIGINTERN void delete_IECExportChanges(IECExportChanges *self){ self->Release(); }

#include "ECTags.h"
#include "IECUnknown.h"


const char *TypeFromObject(PyObject *op) { return op->ob_type->tp_name; }


HRESULT UnwrapObject(IMAPIProp *lpWrapped, LPCIID USE_IID_FOR_OUTPUT, LPUNKNOWN* OUTPUT_USE_IID) {
	HRESULT hr = hrSuccess;
	IECUnknown* lpUnwrapped = NULL;
	LPSPropValue lpPropValue = NULL;

	if (lpWrapped == NULL || OUTPUT_USE_IID == NULL) {
		hr = MAPI_E_INVALID_PARAMETER;
		goto exit;
	}

	if (HrGetOneProp(lpWrapped, PR_EC_OBJECT, &lpPropValue) == hrSuccess) {

		lpUnwrapped = (IECUnknown *)lpPropValue->Value.lpszA;
		if (lpUnwrapped == NULL) {
			hr = MAPI_E_INVALID_PARAMETER;
			goto exit;
		}

		hr = lpUnwrapped->QueryInterface(*USE_IID_FOR_OUTPUT, (void**)OUTPUT_USE_IID);
	} else {
		// Possible object already wrapped, gives the orignale object back
		hr = lpWrapped->QueryInterface(*USE_IID_FOR_OUTPUT, (void**)OUTPUT_USE_IID);
	}

exit:
	if (lpPropValue)
		MAPIFreeBuffer(lpPropValue);

	return hr;
}


#include "IECChangeAdvisor.h"
#include "IECChangeAdviseSink.h"
#include "IECSingleInstance.h"
#include "IECImportContentsChanges.h"

SWIGINTERN void delete_IECChangeAdvisor(IECChangeAdvisor *self){ self->Release(); }
SWIGINTERN void delete_IECChangeAdviseSink(IECChangeAdviseSink *self){ self->Release(); }
SWIGINTERN void delete_IECImportContentsChanges(IECImportContentsChanges *self){ self->Release(); }
SWIGINTERN void delete_IECSingleInstance(IECSingleInstance *self){ self->Release(); }

#include "swig_iunknown.h"
typedef IUnknownImplementor<IECChangeAdviseSink> ECChangeAdviseSink;
typedef IUnknownImplementor<IECImportContentsChanges> ECImportContentsChanges;

SWIGINTERN void delete_ECChangeAdviseSink(ECChangeAdviseSink *self){ delete self; }
SWIGINTERN void delete_ECImportContentsChanges(ECImportContentsChanges *self){ delete self; }

#include <ECGuid.h>
#include <edkguid.h>

swig_type_info *TypeFromIID(REFIID iid)
{
#define TYPECASE(x) if(iid == IID_##x) return SWIGTYPE_p_##x;
  TYPECASE(IUnknown)
  TYPECASE(IStream)
  TYPECASE(IMAPIProp)
  TYPECASE(IMessage)
  TYPECASE(IMAPIContainer)
  TYPECASE(IMAPIFolder)
  TYPECASE(IMAPITable)
  TYPECASE(IABContainer)
  TYPECASE(IMailUser)
  TYPECASE(IDistList)
  TYPECASE(IMsgStore)
  if (iid == IID_ECMsgStoreOnline || iid == IID_ECMsgStoreOffline) return SWIGTYPE_p_IMsgStore;
  TYPECASE(IExchangeExportChanges)
  TYPECASE(IECExportChanges)
  TYPECASE(IExchangeImportContentsChanges)
  TYPECASE(IExchangeImportHierarchyChanges)
  TYPECASE(IExchangeManageStore)
  TYPECASE(IExchangeModifyTable)
  TYPECASE(IECServiceAdmin)
  TYPECASE(IECTestProtocol)
  TYPECASE(IECMultiStoreTable)
  TYPECASE(IECSpooler)
  TYPECASE(IECChangeAdvisor)
  TYPECASE(IECChangeAdviseSink)
  TYPECASE(IECSingleInstance)
  TYPECASE(IECLicense)
  TYPECASE(IProxyStoreObject)
  return NULL;
}

LPCIID IIDFromType(const char *type)
{
#define IIDCASE(x) if(strstr(type, #x) != NULL) return &IID_##x;
  IIDCASE(IUnknown)
  IIDCASE(IStream)
  IIDCASE(IMAPIProp)
  IIDCASE(IMessage)
  IIDCASE(IMAPIContainer)
  IIDCASE(IMAPIFolder)
  IIDCASE(IMAPITable)
  IIDCASE(IABContainer)
  IIDCASE(IMailUser)
  IIDCASE(IDistList)
  IIDCASE(IMsgStore)
  IIDCASE(IExchangeExportChanges)
  IIDCASE(IECExportChanges)
  IIDCASE(IExchangeImportContentsChanges)
  IIDCASE(IExchangeImportHierarchyChanges)
  IIDCASE(IExchangeManageStore)
  IIDCASE(IExchangeModifyTable)
  IIDCASE(IECServiceAdmin)
  IIDCASE(IECTestProtocol)
  IIDCASE(IECMultiStoreTable)
  IIDCASE(IECChangeAdvisor)
  IIDCASE(IECChangeAdviseSink)
  IIDCASE(IECSingleInstance)
  IIDCASE(IECLicense)
  IIDCASE(IProxyStoreObject)
  return &IID_IUnknown;
}


#include "ECLogger.h"

class IECSimpleLogger {
public:
	virtual ~IECSimpleLogger() {};
	virtual HRESULT Log(int loglevel, const char *szMessage) = 0;
};

#include "swig_iunknown.h"
typedef IUnknownImplementor<IECSimpleLogger> ECSimpleLogger;

class ECLoggerProxy : public ECLogger {
public:
	static HRESULT Create(unsigned int ulLevel, ECSimpleLogger *lpSimpleLogger, ECLoggerProxy **lppProxy) {
		ECLoggerProxy *lpProxy = new ECLoggerProxy(ulLevel, lpSimpleLogger);
		//lpProxy->AddRef();
		*lppProxy = lpProxy;
		return hrSuccess;
	}

	~ECLoggerProxy() {
		if (m_lpLogger)
			m_lpLogger->Release();
	};

	virtual void Reset() { };
	virtual void Log(int loglevel, const std::string &message) { Log(loglevel, "%s", message.c_str()); };
	virtual void Log(int Loglevel, const char *format, ...) __LIKE_PRINTF(3, 4) { 
		va_list va;

		va_start(va, format);
		LogVA(Loglevel, format, va);
		va_end(va);
	};
	virtual void LogVA(int loglevel, const char *format, va_list& va) {
		if (m_lpLogger) {
			char buf[4096];
			vsnprintf(buf, sizeof(buf), format, va);
			m_lpLogger->Log(loglevel, buf);
		}
	};

private:
	ECLoggerProxy(unsigned int ulLevel, ECSimpleLogger *lpSimpleLogger) : ECLogger(ulLevel), m_lpLogger(lpSimpleLogger) {
		if (m_lpLogger)
			m_lpLogger->AddRef();
	};
	
	ECSimpleLogger *m_lpLogger;
};



#include "swig_iunknown.h"
typedef IUnknownImplementor<IStream> Stream;

SWIGINTERN void delete_Stream(Stream *self){ delete self; }

#include <mapix.h>
#include <mapidefs.h>
#include "ECSync.h"
#include "ECSyncSettings.h"
#include "ECSyncLog.h"


#include <string>


#include <cwchar>
#include <string>


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mapi_wrap.h"

SwigDirector_MAPIAdviseSink::SwigDirector_MAPIAdviseSink(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): MAPIAdviseSink(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((MAPIAdviseSink *)this, this); 
}




ULONG SwigDirector_MAPIAdviseSink::OnNotify(ULONG cNotif, LPNOTIFICATION lpNotifications) {
  ULONG c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPNOTIFICATION(lpNotifications, cNotif);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MAPIAdviseSink.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "OnNotify";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"OnNotify", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    unsigned int swig_val;
    int swig_res = SWIG_AsVal_unsigned_SS_int(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ULONG""'");
    }
    c_result = static_cast< ULONG >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (ULONG) c_result;
}


SwigDirector_ExchangeImportContentsChanges::SwigDirector_ExchangeImportContentsChanges(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): ExchangeImportContentsChanges(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ExchangeImportContentsChanges *)this, this); 
}




HRESULT SwigDirector_ExchangeImportContentsChanges::GetLastError(HRESULT hResult, ULONG ulFlags, LPMAPIERROR *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(hResult));
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "GetLastError";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"GetLastError", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = Object_to_LPMAPIERROR(DIRECTORARGOUT(result));
      if(PyErr_Occurred()) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPMAPIERROR *""'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::Config(IStream *lpStream, ULONG ulFlags) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char * const swig_method_name = "Config";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Config", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::UpdateState(IStream *lpStream) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char * const swig_method_name = "UpdateState";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"UpdateState", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::ImportMessageChange(ULONG cValues, LPSPropValue lpProps, ULONG ulFlags, IMessage **lppMessage) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPSPropValue(lpProps, cValues);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char * const swig_method_name = "ImportMessageChange";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageChange", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      int swig_res = SWIG_ConvertPtr(DIRECTORARGOUT(result), (void**)lppMessage, SWIGTYPE_p_IMessage, 0);
      if (!SWIG_IsOK(swig_res)) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""IMessage **""'");
      }
      
      /**
         * We use a referencing system in which the director object (the c++ interface) forwards
         * all addref() and release() calls to the python object, and the python object remains
         * the owner of the c++ director object; this means that when the python object gets to a refcount
         * of 0, it will clean up the c++ director object just like any other SWIGged object. However,
         * when this bit of code is invoked, it means that we are outputting an object from a director method
         * back to c++. When the object we are returning is a director object itself, this means that there are
         * now TWO references to the object: from python AND from C++ (since you should always return refcount 1
         * objects to c++). Since normally the object created will have a refcount of 1 (from python) we have
         * to increment the refcount when it is a director object.
         *
         * To put it a different way, although the object always had a c++ part, it was not referenced from c++
         * until we returned it to the realm of c++ from here, so we have to addref it now.
         */
      
      (*lppMessage)->AddRef();
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::ImportMessageDeletion(ULONG ulFlags, LPENTRYLIST lpSourceEntryList) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj1;
    {
      obj1 = List_from_LPENTRYLIST(lpSourceEntryList);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPENTRYLIST""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char * const swig_method_name = "ImportMessageDeletion";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageDeletion", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::ImportPerUserReadStateChange(ULONG cElements, LPREADSTATE lpReadState) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPREADSTATE(lpReadState, cElements);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char * const swig_method_name = "ImportPerUserReadStateChange";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportPerUserReadStateChange", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportContentsChanges::ImportMessageMove(ULONG cbSourceKeySrcFolder, BYTE *pbSourceKeySrcFolder, ULONG cbSourceKeySrcMessage, BYTE *pbSourceKeySrcMessage, ULONG cbPCLMessage, BYTE *pbPCLMessage, ULONG cbSourceKeyDestMessage, BYTE *pbSourceKeyDestMessage, ULONG cbChangeNumDestMessage, BYTE *pbChangeNumDestMessage) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      if (cbSourceKeySrcFolder > 0 && pbSourceKeySrcFolder != NULL)
      obj0 = SWIG_FromCharPtrAndSize((char*)pbSourceKeySrcFolder, cbSourceKeySrcFolder);
    }
    swig::PyObject_var obj1;
    {
      if (cbSourceKeySrcMessage > 0 && pbSourceKeySrcMessage != NULL)
      obj1 = SWIG_FromCharPtrAndSize((char*)pbSourceKeySrcMessage, cbSourceKeySrcMessage);
    }
    swig::PyObject_var obj2;
    {
      if (cbPCLMessage > 0 && pbPCLMessage != NULL)
      obj2 = SWIG_FromCharPtrAndSize((char*)pbPCLMessage, cbPCLMessage);
    }
    swig::PyObject_var obj3;
    {
      if (cbSourceKeyDestMessage > 0 && pbSourceKeyDestMessage != NULL)
      obj3 = SWIG_FromCharPtrAndSize((char*)pbSourceKeyDestMessage, cbSourceKeyDestMessage);
    }
    swig::PyObject_var obj4;
    {
      if (cbChangeNumDestMessage > 0 && pbChangeNumDestMessage != NULL)
      obj4 = SWIG_FromCharPtrAndSize((char*)pbChangeNumDestMessage, cbChangeNumDestMessage);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 6;
    const char * const swig_method_name = "ImportMessageMove";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageMove", (char *)"(OOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


SwigDirector_ExchangeImportHierarchyChanges::SwigDirector_ExchangeImportHierarchyChanges(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): ExchangeImportHierarchyChanges(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ExchangeImportHierarchyChanges *)this, this); 
}




HRESULT SwigDirector_ExchangeImportHierarchyChanges::GetLastError(HRESULT hResult, ULONG ulFlags, LPMAPIERROR *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(hResult));
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportHierarchyChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "GetLastError";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"GetLastError", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = Object_to_LPMAPIERROR(DIRECTORARGOUT(result));
      if(PyErr_Occurred()) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPMAPIERROR *""'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportHierarchyChanges::Config(IStream *lpStream, ULONG ulFlags) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportHierarchyChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char * const swig_method_name = "Config";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Config", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportHierarchyChanges::UpdateState(IStream *lpStream) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportHierarchyChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char * const swig_method_name = "UpdateState";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"UpdateState", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportHierarchyChanges::ImportFolderChange(ULONG cValues, LPSPropValue lpProps) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPSPropValue(lpProps, cValues);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportHierarchyChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char * const swig_method_name = "ImportFolderChange";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportFolderChange", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeImportHierarchyChanges::ImportFolderDeletion(ULONG ulFlags, LPENTRYLIST lpSrcEntryList) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj1;
    {
      obj1 = List_from_LPENTRYLIST(lpSrcEntryList);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPENTRYLIST""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeImportHierarchyChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char * const swig_method_name = "ImportFolderDeletion";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportFolderDeletion", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


SwigDirector_ExchangeExportChanges::SwigDirector_ExchangeExportChanges(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): ExchangeExportChanges(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ExchangeExportChanges *)this, this); 
}




HRESULT SwigDirector_ExchangeExportChanges::GetLastError(HRESULT hResult, ULONG ulFlags, LPMAPIERROR *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(hResult));
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeExportChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "GetLastError";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"GetLastError", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = Object_to_LPMAPIERROR(DIRECTORARGOUT(result));
      if(PyErr_Occurred()) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPMAPIERROR *""'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeExportChanges::Config(IStream *lpStream, ULONG ulFlags, IUnknown *lpUnk, LPSRestriction lpRestriction, LPSPropTagArray lpIncludeProps, LPSPropTagArray lpExcludeProps, ULONG ulBufferSize) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj2;
    obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(lpUnk), SWIGTYPE_p_IUnknown,  0 );
    swig::PyObject_var obj3;
    obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(&lpRestriction), SWIGTYPE_p_LPSRestriction,  0 );
    swig::PyObject_var obj4;
    {
      obj4 = List_from_LPSPropTagArray(lpIncludeProps);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPSPropTagArray""'");
    }
    swig::PyObject_var obj5;
    {
      obj5 = List_from_LPSPropTagArray(lpExcludeProps);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPSPropTagArray""'");
    }
    swig::PyObject_var obj6;
    obj6 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulBufferSize));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeExportChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char * const swig_method_name = "Config";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Config", (char *)"(OOOOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeExportChanges::Synchronize(ULONG *lpulSteps, ULONG *INOUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(INOUT), SWIGTYPE_p_ULONG,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeExportChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char * const swig_method_name = "Synchronize";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Synchronize", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ExchangeExportChanges::UpdateState(IStream *lpStream) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ExchangeExportChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char * const swig_method_name = "UpdateState";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"UpdateState", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


SwigDirector_ECChangeAdviseSink::SwigDirector_ECChangeAdviseSink(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): ECChangeAdviseSink(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ECChangeAdviseSink *)this, this); 
}




ULONG SwigDirector_ECChangeAdviseSink::OnNotify(ULONG ulFlags, LPENTRYLIST lpEntryList) {
  ULONG c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj1;
    {
      obj1 = List_from_LPENTRYLIST(lpEntryList);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPENTRYLIST""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECChangeAdviseSink.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "OnNotify";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"OnNotify", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    unsigned int swig_val;
    int swig_res = SWIG_AsVal_unsigned_SS_int(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""ULONG""'");
    }
    c_result = static_cast< ULONG >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (ULONG) c_result;
}


SwigDirector_ECImportContentsChanges::SwigDirector_ECImportContentsChanges(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): ECImportContentsChanges(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ECImportContentsChanges *)this, this); 
}




HRESULT SwigDirector_ECImportContentsChanges::GetLastError(HRESULT hResult, ULONG ulFlags, LPMAPIERROR *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(hResult));
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "GetLastError";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"GetLastError", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = Object_to_LPMAPIERROR(DIRECTORARGOUT(result));
      if(PyErr_Occurred()) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPMAPIERROR *""'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::Config(IStream *lpStream, ULONG ulFlags) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char * const swig_method_name = "Config";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Config", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::UpdateState(IStream *lpStream) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char * const swig_method_name = "UpdateState";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"UpdateState", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ImportMessageChange(ULONG cValues, LPSPropValue lpProps, ULONG ulFlags, IMessage **lppMessage) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPSPropValue(lpProps, cValues);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char * const swig_method_name = "ImportMessageChange";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageChange", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      int swig_res = SWIG_ConvertPtr(DIRECTORARGOUT(result), (void**)lppMessage, SWIGTYPE_p_IMessage, 0);
      if (!SWIG_IsOK(swig_res)) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""IMessage **""'");
      }
      
      /**
         * We use a referencing system in which the director object (the c++ interface) forwards
         * all addref() and release() calls to the python object, and the python object remains
         * the owner of the c++ director object; this means that when the python object gets to a refcount
         * of 0, it will clean up the c++ director object just like any other SWIGged object. However,
         * when this bit of code is invoked, it means that we are outputting an object from a director method
         * back to c++. When the object we are returning is a director object itself, this means that there are
         * now TWO references to the object: from python AND from C++ (since you should always return refcount 1
         * objects to c++). Since normally the object created will have a refcount of 1 (from python) we have
         * to increment the refcount when it is a director object.
         *
         * To put it a different way, although the object always had a c++ part, it was not referenced from c++
         * until we returned it to the realm of c++ from here, so we have to addref it now.
         */
      
      (*lppMessage)->AddRef();
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ImportMessageDeletion(ULONG ulFlags, LPENTRYLIST lpSourceEntryList) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj1;
    {
      obj1 = List_from_LPENTRYLIST(lpSourceEntryList);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""LPENTRYLIST""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char * const swig_method_name = "ImportMessageDeletion";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageDeletion", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ImportPerUserReadStateChange(ULONG cElements, LPREADSTATE lpReadState) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPREADSTATE(lpReadState, cElements);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char * const swig_method_name = "ImportPerUserReadStateChange";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportPerUserReadStateChange", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ImportMessageMove(ULONG cbSourceKeySrcFolder, BYTE *pbSourceKeySrcFolder, ULONG cbSourceKeySrcMessage, BYTE *pbSourceKeySrcMessage, ULONG cbPCLMessage, BYTE *pbPCLMessage, ULONG cbSourceKeyDestMessage, BYTE *pbSourceKeyDestMessage, ULONG cbChangeNumDestMessage, BYTE *pbChangeNumDestMessage) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      if (cbSourceKeySrcFolder > 0 && pbSourceKeySrcFolder != NULL)
      obj0 = SWIG_FromCharPtrAndSize((char*)pbSourceKeySrcFolder, cbSourceKeySrcFolder);
    }
    swig::PyObject_var obj1;
    {
      if (cbSourceKeySrcMessage > 0 && pbSourceKeySrcMessage != NULL)
      obj1 = SWIG_FromCharPtrAndSize((char*)pbSourceKeySrcMessage, cbSourceKeySrcMessage);
    }
    swig::PyObject_var obj2;
    {
      if (cbPCLMessage > 0 && pbPCLMessage != NULL)
      obj2 = SWIG_FromCharPtrAndSize((char*)pbPCLMessage, cbPCLMessage);
    }
    swig::PyObject_var obj3;
    {
      if (cbSourceKeyDestMessage > 0 && pbSourceKeyDestMessage != NULL)
      obj3 = SWIG_FromCharPtrAndSize((char*)pbSourceKeyDestMessage, cbSourceKeyDestMessage);
    }
    swig::PyObject_var obj4;
    {
      if (cbChangeNumDestMessage > 0 && pbChangeNumDestMessage != NULL)
      obj4 = SWIG_FromCharPtrAndSize((char*)pbChangeNumDestMessage, cbChangeNumDestMessage);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 6;
    const char * const swig_method_name = "ImportMessageMove";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageMove", (char *)"(OOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ConfigForConversionStream(IStream *lpStream, ULONG ulFlags, ULONG cValuesConversion, LPSPropValue lpPropArrayConversion) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(lpStream, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    swig::PyObject_var obj2;
    {
      obj2 = List_from_LPSPropValue(lpPropArrayConversion, cValuesConversion);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 7;
    const char * const swig_method_name = "ConfigForConversionStream";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ConfigForConversionStream", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::ImportMessageChangeAsAStream(ULONG cValues, LPSPropValue lpProps, ULONG ulFlags, IStream **lppStream) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = List_from_LPSPropValue(lpProps, cValues);
      if(PyErr_Occurred())
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(0)), "in output value of type '""ULONG""'");
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(ulFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 8;
    const char * const swig_method_name = "ImportMessageChangeAsAStream";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"ImportMessageChangeAsAStream", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      int swig_res = SWIG_ConvertPtr(DIRECTORARGOUT(result), (void**)lppStream, SWIGTYPE_p_IStream, 0);
      if (!SWIG_IsOK(swig_res)) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""IStream **""'");
      }
      
      /**
         * We use a referencing system in which the director object (the c++ interface) forwards
         * all addref() and release() calls to the python object, and the python object remains
         * the owner of the c++ director object; this means that when the python object gets to a refcount
         * of 0, it will clean up the c++ director object just like any other SWIGged object. However,
         * when this bit of code is invoked, it means that we are outputting an object from a director method
         * back to c++. When the object we are returning is a director object itself, this means that there are
         * now TWO references to the object: from python AND from C++ (since you should always return refcount 1
         * objects to c++). Since normally the object created will have a refcount of 1 (from python) we have
         * to increment the refcount when it is a director object.
         *
         * To put it a different way, although the object always had a c++ part, it was not referenced from c++
         * until we returned it to the realm of c++ from here, so we have to addref it now.
         */
      
      (*lppStream)->AddRef();
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_ECImportContentsChanges::SetMessageInterface(IID const &refiid) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&refiid), SWIGTYPE_p_IID,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECImportContentsChanges.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 9;
    const char * const swig_method_name = "SetMessageInterface";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"SetMessageInterface", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


SwigDirector_ECSimpleLogger::SwigDirector_ECSimpleLogger(PyObject *self): ECSimpleLogger(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((ECSimpleLogger *)this, this); 
}




HRESULT SwigDirector_ECSimpleLogger::Log(int loglevel, char const *szMessage) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_int(static_cast< int >(loglevel));
    swig::PyObject_var obj1;
    obj1 = SWIG_FromCharPtr((const char *)szMessage);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ECSimpleLogger.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "Log";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Log", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


SwigDirector_Stream::SwigDirector_Stream(PyObject *self, ULONG cInterfaces, LPCIID lpInterfaces): Stream(cInterfaces, lpInterfaces), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((Stream *)this, this); 
}




HRESULT SwigDirector_Stream::Write(char const *pv, ULONG cb, ULONG *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_FromCharPtr((const char *)pv);
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(cb));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char * const swig_method_name = "Write";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Write", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = PyInt_AsLong(result);
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Seek(LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&dlibMove), SWIGTYPE_p_LARGE_INTEGER,  0 );
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(dwOrigin));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char * const swig_method_name = "Seek";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Seek", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::SetSize(ULARGE_INTEGER libNewSize) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&libNewSize), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char * const swig_method_name = "SetSize";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"SetSize", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::CopyTo(IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_NewPointerObj(pstm, SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER);
    }
    swig::PyObject_var obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&cb), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char * const swig_method_name = "CopyTo";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"CopyTo", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Commit(DWORD grfCommitFlags) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(grfCommitFlags));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char * const swig_method_name = "Commit";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Commit", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Revert() {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char * const swig_method_name = "Revert";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, NULL, NULL);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *) "Revert", NULL);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&libOffset), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    swig::PyObject_var obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&cb), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    swig::PyObject_var obj2;
    obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(dwLockType));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 6;
    const char * const swig_method_name = "LockRegion";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"LockRegion", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&libOffset), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    swig::PyObject_var obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&cb), SWIGTYPE_p_ULARGE_INTEGER,  0 );
    swig::PyObject_var obj2;
    obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(dwLockType));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 7;
    const char * const swig_method_name = "UnlockRegion";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"UnlockRegion", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Stat(STATSTG *pstatstg, DWORD grfStatFlag) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(pstatstg), SWIGTYPE_p_STATSTG,  0 );
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(grfStatFlag));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 8;
    const char * const swig_method_name = "Stat";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Stat", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Clone(IStream **ppstm) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 9;
    const char * const swig_method_name = "Clone";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, NULL, NULL);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *) "Clone", NULL);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      int swig_res = SWIG_ConvertPtr(DIRECTORARGOUT(result), (void**)ppstm, SWIGTYPE_p_IStream, 0);
      if (!SWIG_IsOK(swig_res)) {
        Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""IStream **""'");
      }
      
      /**
         * We use a referencing system in which the director object (the c++ interface) forwards
         * all addref() and release() calls to the python object, and the python object remains
         * the owner of the c++ director object; this means that when the python object gets to a refcount
         * of 0, it will clean up the c++ director object just like any other SWIGged object. However,
         * when this bit of code is invoked, it means that we are outputting an object from a director method
         * back to c++. When the object we are returning is a director object itself, this means that there are
         * now TWO references to the object: from python AND from C++ (since you should always return refcount 1
         * objects to c++). Since normally the object created will have a refcount of 1 (from python) we have
         * to increment the refcount when it is a director object.
         *
         * To put it a different way, although the object always had a c++ part, it was not referenced from c++
         * until we returned it to the realm of c++ from here, so we have to addref it now.
         */
      
      (*ppstm)->AddRef();
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Read(void *OUTPUT, ULONG cb, ULONG *cbOUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(OUTPUT), SWIGTYPE_p_void,  0 );
    swig::PyObject_var obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(cb));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 10;
    const char * const swig_method_name = "Read";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Read", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


HRESULT SwigDirector_Stream::Write(void const *pv, ULONG cb, ULONG *OUTPUT) {
  Py_ssize_t __tupleIndex ;
  
  HRESULT c_result;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::PyObject_var obj0;
    {
      obj0 = SWIG_FromCharPtrAndSize((const char *)pv, cb);
    }
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Stream.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 11;
    const char * const swig_method_name = "Write";
    PyObject* method = swig_get_method(swig_method_index, swig_method_name);
    swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
    swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"Write", (char *)"(O)" ,(PyObject *)obj0);
#endif
    if (result == NULL) {
      PyObject *error = PyErr_Occurred();
      {
        if (error != NULL) {
          HRESULT hr;
          if (GetExceptionError(error, &hr) == 1) {
            PyErr_Clear();
            return hr;	// Early return
          } else {
            if (check_call_from_python() == true)
            throw Swig::DirectorMethodException();	// Let the calling python interpreter handle the exception
            else {
              PyErr_Print();
              PyErr_Clear();
              return MAPI_E_CALL_FAILED;
            }
          }
        }
      }
    }
    {
      __tupleIndex = (PyTuple_Check(result) == 0 ? -1 : 0);
      c_result = hrSuccess;
    }
    {
      *OUTPUT = PyInt_AsLong(result);
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (HRESULT) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_IUnknown_QueryInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IUnknown *arg1 = (IUnknown *) 0 ;
  IID *arg2 = 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  LPUNKNOWN temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  LPIID &__lpiid = arg2;
  {
    arg3 = (void **)&temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IUnknown_QueryInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IUnknown_QueryInterface" "', argument " "1"" of type '" "IUnknown *""'"); 
  }
  arg1 = reinterpret_cast< IUnknown * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IUnknown_QueryInterface" "', argument " "2"" of type '" "IID const &""'");
    }
    arg2 = reinterpret_cast< IID * >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryInterface((IID const &)*arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IUnknown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IUnknown *arg1 = (IUnknown *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IUnknown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IUnknown, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IUnknown" "', argument " "1"" of type '" "IUnknown *""'"); 
  }
  arg1 = reinterpret_cast< IUnknown * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IUnknown(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IUnknown_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IUnknown, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ISequentialStream_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISequentialStream *arg1 = (ISequentialStream *) 0 ;
  char *arg2 = (char *) 0 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:ISequentialStream_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ISequentialStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISequentialStream_Write" "', argument " "1"" of type '" "ISequentialStream *""'"); 
  }
  arg1 = reinterpret_cast< ISequentialStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISequentialStream_Write" "', argument " "2"" of type '" "(const char *pv, ULONG cb)""'");
  }
  arg2 = (char *) buf2;					       
  arg3 = (ULONG) size2 - 1;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Write((char const *)arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISequentialStream_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISequentialStream *arg1 = (ISequentialStream *) 0 ;
  ULONG arg2 ;
  char **arg3 = (char **) 0 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *temp3 = 0 ;
  ULONG tempn3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg3 = &temp3; arg4 = &tempn3;
  if (!PyArg_ParseTuple(args,(char *)"OO:ISequentialStream_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ISequentialStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISequentialStream_Read" "', argument " "1"" of type '" "ISequentialStream *""'"); 
  }
  arg1 = reinterpret_cast< ISequentialStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISequentialStream_Read" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ISequentialStream_Read(arg1,arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (*arg3) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize(*arg3,*arg4));
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISequentialStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISequentialStream *arg1 = (ISequentialStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ISequentialStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ISequentialStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISequentialStream" "', argument " "1"" of type '" "ISequentialStream *""'"); 
  }
  arg1 = reinterpret_cast< ISequentialStream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete arg1;
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ISequentialStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISequentialStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IStream_Seek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  LARGE_INTEGER arg2 ;
  DWORD arg3 ;
  ULARGE_INTEGER *arg4 = (ULARGE_INTEGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  ULARGE_INTEGER u4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg4 = &u4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IStream_Seek",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Seek" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    long long l = 0;
    SWIG_AsVal_long_SS_long (obj1, &l);  
    
    (&arg2)->QuadPart = l;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IStream_Seek" "', argument " "3"" of type '" "DWORD""'");
  } 
  arg3 = static_cast< DWORD >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Seek(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_long_SS_long  (arg4->QuadPart));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_SetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  ULARGE_INTEGER arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IStream_SetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_SetSize" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj1, &l);  
    
    (&arg2)->QuadPart = l;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSize(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_CopyTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  ULARGE_INTEGER arg3 ;
  ULARGE_INTEGER *arg4 = (ULARGE_INTEGER *) 0 ;
  ULARGE_INTEGER *arg5 = (ULARGE_INTEGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ULARGE_INTEGER u4 ;
  ULARGE_INTEGER u5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg4 = &u4;
  }
  {
    arg5 = &u5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IStream_CopyTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_CopyTo" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IStream_CopyTo" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj2, &l);  
    
    (&arg3)->QuadPart = l;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyTo(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_long_SS_long  (arg4->QuadPart));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_long_SS_long  (arg5->QuadPart));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_Commit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IStream_Commit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Commit" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IStream_Commit" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Commit(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_Revert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:IStream_Revert",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Revert" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Revert();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_LockRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  ULARGE_INTEGER arg2 ;
  ULARGE_INTEGER arg3 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IStream_LockRegion",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_LockRegion" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj1, &l);  
    
    (&arg2)->QuadPart = l;
  }
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj2, &l);  
    
    (&arg3)->QuadPart = l;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IStream_LockRegion" "', argument " "4"" of type '" "DWORD""'");
  } 
  arg4 = static_cast< DWORD >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->LockRegion(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_UnlockRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  ULARGE_INTEGER arg2 ;
  ULARGE_INTEGER arg3 ;
  DWORD arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IStream_UnlockRegion",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_UnlockRegion" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj1, &l);  
    
    (&arg2)->QuadPart = l;
  }
  {
    unsigned long long l = 0;
    SWIG_AsVal_unsigned_SS_long_SS_long (obj2, &l);  
    
    (&arg3)->QuadPart = l;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IStream_UnlockRegion" "', argument " "4"" of type '" "DWORD""'");
  } 
  arg4 = static_cast< DWORD >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UnlockRegion(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_Stat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  STATSTG *arg2 = (STATSTG *) 0 ;
  DWORD arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IStream_Stat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Stat" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_STATSTG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IStream_Stat" "', argument " "2"" of type '" "STATSTG *""'"); 
  }
  arg2 = reinterpret_cast< STATSTG * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IStream_Stat" "', argument " "3"" of type '" "DWORD""'");
  } 
  arg3 = static_cast< DWORD >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Stat(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IStream_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  IStream **arg2 = (IStream **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IStream *temp2 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  temp2 = NULL; arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IStream_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Clone" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Clone(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":new_IStream")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (IStream *)new_IStream();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IStream, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IStream" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IStream(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIProp_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIProp_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetLastError" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_SaveChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIProp_SaveChanges",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_SaveChanges" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_SaveChanges" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SaveChanges(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_GetProps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  LPSPropTagArray arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPSPropValue *arg5 = (LPSPropValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG c4 ;
  LPSPropValue lp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  lp4 = NULL; arg5 = &lp4; c4 = 0; arg4 = &c4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIProp_GetProps",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_GetProps" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetProps(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropValue(*(arg5),*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_GetPropList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  LPSPropTagArray *arg3 = (LPSPropTagArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  LPSPropTagArray temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIProp_GetPropList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetPropList" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_GetPropList" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetPropList(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropTagArray(*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_OpenProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  LPUNKNOWN *arg6 = (LPUNKNOWN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  LPUNKNOWN temp6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  LPCIID &__lpiid = arg3;
  ULONG ulFlags = 0;
  {
    arg6 = (LPUNKNOWN *)&temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPIProp_OpenProperty",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_OpenProperty" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_OpenProperty" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIProp_OpenProperty" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_OpenProperty" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIProp_OpenProperty" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenProperty(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg6), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_SetProps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  LPSPropValue arg3 ;
  LPSPropProblemArray *arg4 = (LPSPropProblemArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPSPropValue lpArray2 = NULL ;
  LPSPropProblemArray temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIProp_SetProps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_SetProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPSPropValue(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetProps(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropProblemArray(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_DeleteProps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  LPSPropTagArray arg2 ;
  LPSPropProblemArray *arg3 = (LPSPropProblemArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LPSPropProblemArray temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIProp_DeleteProps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_DeleteProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteProps(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropProblemArray(*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_CopyTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  LPSPropTagArray arg4 ;
  ULONG arg5 ;
  IMAPIProgress *arg6 = (IMAPIProgress *) 0 ;
  LPCIID arg7 ;
  IUnknown *arg8 = (IUnknown *) 0 ;
  ULONG arg9 ;
  LPSPropProblemArray *arg10 = (LPSPropProblemArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res7 ;
  char *buf7 ;
  size_t size7 ;
  int alloc7 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int fl9 ;
  int ecode9 ;
  LPSPropProblemArray temp10 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  arg4 = NULL;
  ULONG ulFlags = 0;
  temp10 = NULL; arg10 = &temp10;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:IMAPIProp_CopyTo",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_CopyTo" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg4 = List_to_LPSPropTagArray(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIProp_CopyTo" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  res6 = SWIG_ConvertPtr(obj4, &argp6,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIProp_CopyTo" "', argument " "6"" of type '" "IMAPIProgress *""'"); 
  }
  arg6 = reinterpret_cast< IMAPIProgress * >(argp6);
  {
    alloc7 = SWIG_OLDOBJ;
    res7 = SWIG_AsCharPtrAndSize(obj5, &buf7, &size7, &alloc7);
    if (!SWIG_IsOK(res7) || (size7 != 0 && (size7-1) != sizeof(MAPIUID))) {
      // size7-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IMAPIProp_CopyTo" "', argument " "7"" of type '" "LPCIID""'");
    }
    arg7 = reinterpret_cast< LPCIID >(buf7);
  }
  res8 = SWIG_ConvertPtr(obj6, &argp8,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IMAPIProp_CopyTo" "', argument " "8"" of type '" "IUnknown *""'"); 
  }
  arg8 = reinterpret_cast< IUnknown * >(argp8);
  {
    ecode9 = SWIG_AsVal_unsigned_SS_int (obj7, &fl9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPIProp_CopyTo" "', argument " "9"" of type '" "ULONG""'");
    } 
    arg9 = fl9;
    ulFlags = fl9;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropProblemArray(*(arg10)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(arg4)
    MAPIFreeBuffer(arg4);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    if(*arg10)
    MAPIFreeBuffer(*arg10);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(arg4)
    MAPIFreeBuffer(arg4);
  }
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  {
    if(*arg10)
    MAPIFreeBuffer(*arg10);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_CopyProps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  LPSPropTagArray arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  LPCIID arg5 ;
  IUnknown *arg6 = (IUnknown *) 0 ;
  ULONG arg7 ;
  LPSPropProblemArray *arg8 = (LPSPropProblemArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int fl7 ;
  int ecode7 ;
  LPSPropProblemArray temp8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  temp8 = NULL; arg8 = &temp8;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:IMAPIProp_CopyProps",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_CopyProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_CopyProps" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIProp_CopyProps" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIProp_CopyProps" "', argument " "5"" of type '" "LPCIID""'");
    }
    arg5 = reinterpret_cast< LPCIID >(buf5);
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIProp_CopyProps" "', argument " "6"" of type '" "IUnknown *""'"); 
  }
  arg6 = reinterpret_cast< IUnknown * >(argp6);
  {
    ecode7 = SWIG_AsVal_unsigned_SS_int (obj6, &fl7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIProp_CopyProps" "', argument " "7"" of type '" "ULONG""'");
    } 
    arg7 = fl7;
    ulFlags = fl7;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyProps(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropProblemArray(*(arg8)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if(*arg8)
    MAPIFreeBuffer(*arg8);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if(*arg8)
    MAPIFreeBuffer(*arg8);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_GetNamesFromIDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  LPSPropTagArray *arg2 = (LPSPropTagArray *) 0 ;
  LPGUID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPMAPINAMEID **arg6 = (LPMAPINAMEID **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LPSPropTagArray tmp2 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPMAPINAMEID *lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIProp_GetNamesFromIDs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    tmp2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
    arg2 = &tmp2;
  }
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "3"" of type '" "LPGUID""'");
    }
    arg3 = reinterpret_cast< LPGUID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetNamesFromIDs(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPMAPINAMEID(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg2)
    MAPIFreeBuffer(*arg2);
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg2)
    MAPIFreeBuffer(*arg2);
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProp_GetIDsFromNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  ULONG arg2 ;
  LPMAPINAMEID *arg3 = (LPMAPINAMEID *) 0 ;
  ULONG arg4 ;
  LPSPropTagArray *arg5 = (LPSPropTagArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPMAPINAMEID *lpArray2 = NULL ;
  unsigned int fl4 ;
  int ecode4 ;
  LPSPropTagArray temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIProp_GetIDsFromNames",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetIDsFromNames" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    ULONG len;
    arg3 = List_to_p_LPMAPINAMEID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_GetIDsFromNames" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetIDsFromNames(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropTagArray(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIProp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIProp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIProp" "', argument " "1"" of type '" "IMAPIProp *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProp * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIProp(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIProp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIProp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIContainer_GetContentsTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIContainer_GetContentsTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetContentsTable" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetContentsTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetContentsTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIContainer_GetHierarchyTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIContainer_GetHierarchyTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetHierarchyTable" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetHierarchyTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetHierarchyTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIContainer_OpenEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPCIID arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  IUnknown **arg7 = (IUnknown **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  unsigned int fl5 ;
  int ecode5 ;
  ULONG ulType6 ;
  IUnknown *lpUnk6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    ulType6 = NULL;
    lpUnk6 = NULL;
    
    arg6 = &ulType6;
    arg7 = &lpUnk6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIContainer_OpenEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_OpenEntry" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIContainer_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIContainer_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIContainer_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    switch(*(arg6)) {
    case MAPI_FOLDER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MESSAGE:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MAILUSER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_DISTLIST:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_ABCONT:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER)); break;
    default:
      break;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIContainer_SetSearchCriteria(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  LPSRestriction arg2 ;
  LPENTRYLIST arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIContainer_SetSearchCriteria",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_SetSearchCriteria" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    arg2 = Object_to_LPSRestriction(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg3 = List_to_LPENTRYLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIContainer_SetSearchCriteria" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSearchCriteria(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIContainer_GetSearchCriteria(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  ULONG arg2 ;
  LPSRestriction *arg3 = (LPSRestriction *) 0 ;
  LPENTRYLIST *arg4 = (LPENTRYLIST *) 0 ;
  ULONG *arg5 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  LPSRestriction temp3 ;
  LPENTRYLIST temp4 ;
  ULONG temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  temp4 = NULL; arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIContainer_GetSearchCriteria",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetSearchCriteria" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetSearchCriteria" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetSearchCriteria(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPSRestriction(*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPENTRYLIST(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIContainer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIContainer" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIContainer(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIContainer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIAdviseSink_OnNotify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIAdviseSink *arg1 = (IMAPIAdviseSink *) 0 ;
  ULONG arg2 ;
  LPNOTIFICATION arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPNOTIFICATION lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPIAdviseSink_OnNotify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIAdviseSink_OnNotify" "', argument " "1"" of type '" "IMAPIAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIAdviseSink * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPNOTIFICATION(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OnNotify(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIAdviseSink *arg1 = (IMAPIAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIAdviseSink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIAdviseSink" "', argument " "1"" of type '" "IMAPIAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIAdviseSink(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIAdviseSink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIAdviseSink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MAPIAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MAPIAdviseSink *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MAPIAdviseSink",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (MAPIAdviseSink *)new SwigDirector_MAPIAdviseSink(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MAPIAdviseSink, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MAPIAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIAdviseSink *arg1 = (MAPIAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MAPIAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIAdviseSink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAPIAdviseSink" "', argument " "1"" of type '" "MAPIAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< MAPIAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_MAPIAdviseSink(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_MAPIAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIAdviseSink *arg1 = (MAPIAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_MAPIAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_MAPIAdviseSink" "', argument " "1"" of type '" "MAPIAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< MAPIAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *MAPIAdviseSink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MAPIAdviseSink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMsgStore_Advise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  IMAPIAdviseSink *arg5 = (IMAPIAdviseSink *) 0 ;
  ULONG *arg6 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  ULONG temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgStore_Advise",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_Advise" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_Advise" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgStore_Advise" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMsgStore_Advise" "', argument " "5"" of type '" "IMAPIAdviseSink *""'"); 
  }
  arg5 = reinterpret_cast< IMAPIAdviseSink * >(argp5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_Unadvise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgStore_Unadvise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_Unadvise" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_Unadvise" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Unadvise(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_CompareEntryIDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  ULONG *arg7 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  ULONG temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgStore_CompareEntryIDs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj3, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_OpenEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPCIID arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  IUnknown **arg7 = (IUnknown **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  unsigned int fl5 ;
  int ecode5 ;
  ULONG ulType6 ;
  IUnknown *lpUnk6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    ulType6 = NULL;
    lpUnk6 = NULL;
    
    arg6 = &ulType6;
    arg7 = &lpUnk6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgStore_OpenEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_OpenEntry" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMsgStore_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    switch(*(arg6)) {
    case MAPI_FOLDER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MESSAGE:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MAILUSER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_DISTLIST:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_ABCONT:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER)); break;
    default:
      break;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_SetReceiveFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgStore_SetReceiveFolder",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetReceiveFolder(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_GetReceiveFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  LPTSTR *arg6 = (LPTSTR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  LPTSTR lpStr6 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  {
    arg6 = &lpStr6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgStore_GetReceiveFolder",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetReceiveFolder" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_GetReceiveFolder" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgStore_GetReceiveFolder" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetReceiveFolder(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    if (ulFlags & MAPI_UNICODE) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromWCharPtr(*arg6));
    } else {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr((char*)*arg6));
    }
  }
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_GetReceiveFolderTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgStore_GetReceiveFolderTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetReceiveFolderTable" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_GetReceiveFolderTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetReceiveFolderTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_StoreLogoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgStore_StoreLogoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_StoreLogoff" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  if (!(SWIG_IsOK((res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2),SWIGTYPE_p_ULONG,0))))) {
    unsigned int val; 
    int ecode = SWIG_AsVal_unsigned_SS_int(obj1, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMsgStore_StoreLogoff" "', argument " "2"" of type '" "ULONG""'");
    }
    temp2 = static_cast< ULONG >(val);
    arg2 = &temp2;
    res2 = SWIG_AddTmpMask(ecode);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->StoreLogoff(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_AbortSubmit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgStore_AbortSubmit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_AbortSubmit" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_AbortSubmit" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgStore_AbortSubmit" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AbortSubmit(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_GetOutgoingQueue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgStore_GetOutgoingQueue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetOutgoingQueue" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_GetOutgoingQueue" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetOutgoingQueue(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_SetLockState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  IMessage *arg2 = (IMessage *) 0 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgStore_SetLockState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_SetLockState" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_SetLockState" "', argument " "2"" of type '" "IMessage *""'"); 
  }
  arg2 = reinterpret_cast< IMessage * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_SetLockState" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetLockState(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_FinishedMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgStore_FinishedMsg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_FinishedMsg" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_FinishedMsg" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgStore_FinishedMsg" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->FinishedMsg(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgStore_NotifyNewMail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  LPNOTIFICATION arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgStore_NotifyNewMail",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_NotifyNewMail" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    arg2 = Object_to_LPNOTIFICATION(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->NotifyNewMail(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMsgStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgStore *arg1 = (IMsgStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMsgStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMsgStore" "', argument " "1"" of type '" "IMsgStore *""'"); 
  }
  arg1 = reinterpret_cast< IMsgStore * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMsgStore(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMsgStore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMsgStore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IProxyStoreObject_PlaceHolder1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:IProxyStoreObject_PlaceHolder1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_PlaceHolder1" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
  }
  arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PlaceHolder1();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProxyStoreObject_PlaceHolder2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:IProxyStoreObject_PlaceHolder2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_PlaceHolder2" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
  }
  arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PlaceHolder2();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IProxyStoreObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IProxyStoreObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProxyStoreObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProxyStoreObject" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
  }
  arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IProxyStoreObject(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProxyStoreObject_UnwrapNoRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
  IUnknown **arg2 = (IUnknown **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IUnknown *temp2 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  temp2 = NULL; arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IProxyStoreObject_UnwrapNoRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_UnwrapNoRef" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
  }
  arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = IProxyStoreObject_UnwrapNoRef(arg1,arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IUnknown, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IProxyStoreObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IProxyStoreObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIFolder_CreateMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  LPCIID arg2 ;
  ULONG arg3 ;
  IMessage **arg4 = (IMessage **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int fl3 ;
  int ecode3 ;
  IMessage *temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIFolder_CreateMessage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CreateMessage" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_CreateMessage" "', argument " "2"" of type '" "LPCIID""'");
    }
    arg2 = reinterpret_cast< LPCIID >(buf2);
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_CreateMessage" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateMessage(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_CopyMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  LPENTRYLIST arg2 ;
  LPCIID arg3 ;
  IUnknown *arg4 = (IUnknown *) 0 ;
  ULONG arg5 ;
  IMAPIProgress *arg6 = (IMAPIProgress *) 0 ;
  ULONG arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int fl7 ;
  int ecode7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:IMAPIFolder_CopyMessages",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CopyMessages" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIFolder_CopyMessages" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_CopyMessages" "', argument " "4"" of type '" "IUnknown *""'"); 
  }
  arg4 = reinterpret_cast< IUnknown * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_CopyMessages" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIFolder_CopyMessages" "', argument " "6"" of type '" "IMAPIProgress *""'"); 
  }
  arg6 = reinterpret_cast< IMAPIProgress * >(argp6);
  {
    ecode7 = SWIG_AsVal_unsigned_SS_int (obj6, &fl7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIFolder_CopyMessages" "', argument " "7"" of type '" "ULONG""'");
    } 
    arg7 = fl7;
    ulFlags = fl7;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyMessages(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_DeleteMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPIFolder_DeleteMessages",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteMessages(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_CreateFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  LPTSTR arg3 ;
  LPTSTR arg4 ;
  LPCIID arg5 ;
  ULONG arg6 ;
  IMAPIFolder **arg7 = (IMAPIFolder **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  unsigned int fl6 ;
  int ecode6 ;
  IMAPIFolder *temp7 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp7 = NULL; arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IMAPIFolder_CreateFolder",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CreateFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIFolder_CreateFolder" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_CreateFolder" "', argument " "5"" of type '" "LPCIID""'");
    }
    arg5 = reinterpret_cast< LPCIID >(buf5);
  }
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj5, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPIFolder_CreateFolder" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPIFolder_CreateFolder" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPIFolder_CreateFolder" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateFolder(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    
  }
  {
    
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_CopyFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPCIID arg4 ;
  IUnknown *arg5 = (IUnknown *) 0 ;
  LPTSTR arg6 ;
  ULONG arg7 ;
  IMAPIProgress *arg8 = (IMAPIProgress *) 0 ;
  ULONG arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int fl9 ;
  int ecode9 ;
  std::string strInput6 ;
  std::wstring wstrInput6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:IMAPIFolder_CopyFolder",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CopyFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_CopyFolder" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_CopyFolder" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_CopyFolder" "', argument " "5"" of type '" "IUnknown *""'"); 
  }
  arg5 = reinterpret_cast< IUnknown * >(argp5);
  {
    arg6 = (LPTSTR)obj4;
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIFolder_CopyFolder" "', argument " "7"" of type '" "ULONG""'");
  } 
  arg7 = static_cast< ULONG >(val7);
  res8 = SWIG_ConvertPtr(obj6, &argp8,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IMAPIFolder_CopyFolder" "', argument " "8"" of type '" "IMAPIProgress *""'"); 
  }
  arg8 = reinterpret_cast< IMAPIProgress * >(argp8);
  {
    ecode9 = SWIG_AsVal_unsigned_SS_int (obj7, &fl9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPIFolder_CopyFolder" "', argument " "9"" of type '" "ULONG""'");
    } 
    arg9 = fl9;
    ulFlags = fl9;
  }
  {
    PyObject *o = (PyObject *)arg6;
    if(o == Py_None)
    arg6 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput6.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg6 = (LPTSTR)wstrInput6.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput6.assign(input, size);
        
        arg6 = (LPTSTR)strInput6.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPIFolder_CopyFolder" "', argument " "6"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyFolder(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_DeleteFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  IMAPIProgress *arg5 = (IMAPIProgress *) 0 ;
  ULONG arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPIFolder_DeleteFolder",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "5"" of type '" "IMAPIProgress *""'"); 
  }
  arg5 = reinterpret_cast< IMAPIProgress * >(argp5);
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj4, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteFolder(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_SetReadFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPIFolder_SetReadFlags",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetReadFlags(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_GetMessageStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIFolder_GetMessageStatus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMessageStatus(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_SetMessageStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  ULONG temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIFolder_SetMessageStatus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetMessageStatus(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_SaveContentsSort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  LPSSortOrderSet arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIFolder_SaveContentsSort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SaveContentsSort" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    arg2 = Object_to_LPSSortOrderSet(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_SaveContentsSort" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SaveContentsSort(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIFolder_EmptyFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  ULONG arg2 ;
  IMAPIProgress *arg3 = (IMAPIProgress *) 0 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIFolder_EmptyFolder",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "3"" of type '" "IMAPIProgress *""'"); 
  }
  arg3 = reinterpret_cast< IMAPIProgress * >(argp3);
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->EmptyFolder(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIFolder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIFolder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIFolder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIFolder(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIFolder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIFolder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMessage_GetAttachmentTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMessage_GetAttachmentTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_GetAttachmentTable" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_GetAttachmentTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetAttachmentTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_OpenAttach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  IAttach **arg5 = (IAttach **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  IAttach *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMessage_OpenAttach",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_OpenAttach" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_OpenAttach" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMessage_OpenAttach" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMessage_OpenAttach" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenAttach(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAttach, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_CreateAttach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  LPCIID arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  IAttach **arg5 = (IAttach **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  IAttach *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg4 = &temp4;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMessage_CreateAttach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_CreateAttach" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMessage_CreateAttach" "', argument " "2"" of type '" "LPCIID""'");
    }
    arg2 = reinterpret_cast< LPCIID >(buf2);
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMessage_CreateAttach" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateAttach(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAttach, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_DeleteAttach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMessage_DeleteAttach",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_DeleteAttach" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_DeleteAttach" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMessage_DeleteAttach" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMessage_DeleteAttach" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMessage_DeleteAttach" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteAttach(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_GetRecipientTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMessage_GetRecipientTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_GetRecipientTable" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_GetRecipientTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetRecipientTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_ModifyRecipients(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  LPADRLIST arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMessage_ModifyRecipients",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_ModifyRecipients" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_ModifyRecipients" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPADRLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ModifyRecipients(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    FreeProws((LPSRowSet)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    FreeProws((LPSRowSet)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_SubmitMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMessage_SubmitMessage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_SubmitMessage" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_SubmitMessage" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SubmitMessage(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMessage_SetReadFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMessage_SetReadFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_SetReadFlag" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_SetReadFlag" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetReadFlag(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMessage" "', argument " "1"" of type '" "IMessage *""'"); 
  }
  arg1 = reinterpret_cast< IMessage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMessage(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IAttach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAttach *arg1 = (IAttach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IAttach",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAttach, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IAttach" "', argument " "1"" of type '" "IAttach *""'"); 
  }
  arg1 = reinterpret_cast< IAttach * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IAttach(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IAttach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IAttach, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IABContainer_CreateEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IABContainer *arg1 = (IABContainer *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPMAPIPROP *arg5 = (LPMAPIPROP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IABContainer_CreateEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_CreateEntry" "', argument " "1"" of type '" "IABContainer *""'"); 
  }
  arg1 = reinterpret_cast< IABContainer * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IABContainer_CreateEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IABContainer_CreateEntry" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_LPMAPIPROP, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IABContainer_CreateEntry" "', argument " "5"" of type '" "LPMAPIPROP *""'"); 
  }
  arg5 = reinterpret_cast< LPMAPIPROP * >(argp5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateEntry(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IABContainer_CopyEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IABContainer *arg1 = (IABContainer *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IABContainer_CopyEntries",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_CopyEntries" "', argument " "1"" of type '" "IABContainer *""'"); 
  }
  arg1 = reinterpret_cast< IABContainer * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_CopyEntries" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IABContainer_CopyEntries" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IABContainer_CopyEntries" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyEntries(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IABContainer_DeleteEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IABContainer *arg1 = (IABContainer *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IABContainer_DeleteEntries",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_DeleteEntries" "', argument " "1"" of type '" "IABContainer *""'"); 
  }
  arg1 = reinterpret_cast< IABContainer * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_DeleteEntries" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteEntries(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IABContainer_ResolveNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IABContainer *arg1 = (IABContainer *) 0 ;
  LPSPropTagArray arg2 ;
  ULONG arg3 ;
  LPADRLIST arg4 ;
  LPFlagList arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  arg4 = NULL;
  arg5 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IABContainer_ResolveNames",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_ResolveNames" "', argument " "1"" of type '" "IABContainer *""'"); 
  }
  arg1 = reinterpret_cast< IABContainer * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_ResolveNames" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg4 = List_to_LPADRLIST(obj3);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg5 = List_to_LPFlagList(obj4);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveNames(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPADRLIST(arg4));
    if(PyErr_Occurred()) goto fail;
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPFlagList(arg5));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IABContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IABContainer *arg1 = (IABContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IABContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IABContainer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IABContainer" "', argument " "1"" of type '" "IABContainer *""'"); 
  }
  arg1 = reinterpret_cast< IABContainer * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IABContainer(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IABContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IABContainer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IMailUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMailUser *arg1 = (IMailUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMailUser",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMailUser, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMailUser" "', argument " "1"" of type '" "IMailUser *""'"); 
  }
  arg1 = reinterpret_cast< IMailUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMailUser(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMailUser_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMailUser, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IDistList_CreateEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDistList *arg1 = (IDistList *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPMAPIPROP *arg5 = (LPMAPIPROP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IDistList_CreateEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_CreateEntry" "', argument " "1"" of type '" "IDistList *""'"); 
  }
  arg1 = reinterpret_cast< IDistList * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDistList_CreateEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDistList_CreateEntry" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_LPMAPIPROP, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IDistList_CreateEntry" "', argument " "5"" of type '" "LPMAPIPROP *""'"); 
  }
  arg5 = reinterpret_cast< LPMAPIPROP * >(argp5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateEntry(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDistList_CopyEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDistList *arg1 = (IDistList *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IDistList_CopyEntries",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_CopyEntries" "', argument " "1"" of type '" "IDistList *""'"); 
  }
  arg1 = reinterpret_cast< IDistList * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_CopyEntries" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDistList_CopyEntries" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
  }
  arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IDistList_CopyEntries" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyEntries(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDistList_DeleteEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDistList *arg1 = (IDistList *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IDistList_DeleteEntries",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_DeleteEntries" "', argument " "1"" of type '" "IDistList *""'"); 
  }
  arg1 = reinterpret_cast< IDistList * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_DeleteEntries" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteEntries(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDistList_ResolveNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDistList *arg1 = (IDistList *) 0 ;
  LPSPropTagArray arg2 ;
  ULONG arg3 ;
  LPADRLIST arg4 ;
  LPFlagList arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  arg4 = NULL;
  arg5 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IDistList_ResolveNames",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_ResolveNames" "', argument " "1"" of type '" "IDistList *""'"); 
  }
  arg1 = reinterpret_cast< IDistList * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_ResolveNames" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg4 = List_to_LPADRLIST(obj3);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg5 = List_to_LPFlagList(obj4);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveNames(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPADRLIST(arg4));
    if(PyErr_Occurred()) goto fail;
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPFlagList(arg5));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IDistList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDistList *arg1 = (IDistList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IDistList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDistList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDistList" "', argument " "1"" of type '" "IDistList *""'"); 
  }
  arg1 = reinterpret_cast< IDistList * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IDistList(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IDistList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IDistList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIStatus_ValidateState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIStatus_ValidateState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_ValidateState" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_ValidateState" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_ValidateState" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ValidateState(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIStatus_SettingsDialog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPIStatus_SettingsDialog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SettingsDialog(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIStatus_ChangePassword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIStatus_ChangePassword",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_ChangePassword" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIStatus_ChangePassword" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPIStatus_ChangePassword" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPIStatus_ChangePassword" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ChangePassword(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIStatus_FlushQueues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPIStatus_FlushQueues",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_FlushQueues" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_FlushQueues" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_FlushQueues" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_LPENTRYID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIStatus_FlushQueues" "', argument " "4"" of type '" "LPENTRYID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPIStatus_FlushQueues" "', argument " "4"" of type '" "LPENTRYID""'");
    } else {
      LPENTRYID * temp = reinterpret_cast< LPENTRYID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIStatus_FlushQueues" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->FlushQueues(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIStatus" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIStatus(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIStatus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIStatus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPITable_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetLastError" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_Advise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  IMAPIAdviseSink *arg3 = (IMAPIAdviseSink *) 0 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_Advise",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Advise" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_Advise" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPITable_Advise" "', argument " "3"" of type '" "IMAPIAdviseSink *""'"); 
  }
  arg3 = reinterpret_cast< IMAPIAdviseSink * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Advise(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_Unadvise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPITable_Unadvise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Unadvise" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_Unadvise" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Unadvise(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_GetStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  ULONG *arg3 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPITable_GetStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetStatus" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetStatus(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_SetColumns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LPSPropTagArray arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_SetColumns",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SetColumns" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    arg2 = List_to_LPSPropTagArray(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SetColumns" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetColumns(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_QueryColumns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  LPSPropTagArray *arg3 = (LPSPropTagArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  LPSPropTagArray temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPITable_QueryColumns",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryColumns" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_QueryColumns" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryColumns(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropTagArray(*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_GetRowCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  ULONG *arg3 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPITable_GetRowCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetRowCount" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetRowCount" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetRowCount(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_SeekRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  BOOKMARK arg2 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  LONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_SeekRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SeekRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SeekRow" "', argument " "2"" of type '" "BOOKMARK""'");
  } 
  arg2 = static_cast< BOOKMARK >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SeekRow" "', argument " "3"" of type '" "LONG""'");
  } 
  arg3 = static_cast< LONG >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SeekRow(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_LONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_SeekRowApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_SeekRowApprox",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SeekRowApprox" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SeekRowApprox" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SeekRowApprox" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SeekRowApprox(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_QueryPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  ULONG *arg3 = (ULONG *) 0 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPITable_QueryPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryPosition" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryPosition(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_FindRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LPSRestriction arg2 ;
  BOOKMARK arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPITable_FindRow",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_FindRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    arg2 = Object_to_LPSRestriction(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_FindRow" "', argument " "3"" of type '" "BOOKMARK""'");
  } 
  arg3 = static_cast< BOOKMARK >(val3);
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_FindRow" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->FindRow(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_Restrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LPSRestriction arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_Restrict",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Restrict" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    arg2 = Object_to_LPSRestriction(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_Restrict" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Restrict(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_CreateBookmark(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  BOOKMARK *arg2 = (BOOKMARK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BOOKMARK temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPITable_CreateBookmark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_CreateBookmark" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateBookmark(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_FreeBookmark(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  BOOKMARK arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPITable_FreeBookmark",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_FreeBookmark" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_FreeBookmark" "', argument " "2"" of type '" "BOOKMARK""'");
  } 
  arg2 = static_cast< BOOKMARK >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->FreeBookmark(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_SortTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LPSSortOrderSet arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_SortTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SortTable" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    arg2 = Object_to_LPSSortOrderSet(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SortTable" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SortTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_QuerySortOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LPSSortOrderSet *arg2 = (LPSSortOrderSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  LPSSortOrderSet temp2 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  temp2 = NULL; arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPITable_QuerySortOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QuerySortOrder" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QuerySortOrder(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPSSortOrderSet(*(arg2)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg2)
    MAPIFreeBuffer(*arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg2)
    MAPIFreeBuffer(*arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_QueryRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  LONG arg2 ;
  ULONG arg3 ;
  LPSRowSet *arg4 = (LPSRowSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPSRowSet temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_QueryRows",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryRows" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_QueryRows" "', argument " "2"" of type '" "LONG""'");
  } 
  arg2 = static_cast< LONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_QueryRows" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryRows(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSRowSet(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    FreeProws((LPSRowSet)*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    FreeProws((LPSRowSet)*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_Abort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPITable_Abort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Abort" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Abort();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_ExpandRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  ULONG arg4 ;
  ULONG arg5 ;
  LPSRowSet *arg6 = (LPSRowSet *) 0 ;
  ULONG *arg7 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  LPSRowSet temp6 ;
  ULONG temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp6 = NULL; arg6 = &temp6;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPITable_ExpandRow",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_ExpandRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPITable_ExpandRow" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< BYTE * >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_ExpandRow" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPITable_ExpandRow" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ExpandRow(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSRowSet(*(arg6)));
    if(PyErr_Occurred()) goto fail;
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    FreeProws((LPSRowSet)*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    FreeProws((LPSRowSet)*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_CollapseRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_CollapseRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_CollapseRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPITable_CollapseRow" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< BYTE * >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_CollapseRow" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CollapseRow(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_WaitForCompletion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPITable_WaitForCompletion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_WaitForCompletion" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_WaitForCompletion" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_WaitForCompletion" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->WaitForCompletion(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_GetCollapseState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPBYTE arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPBYTE *arg6 = (LPBYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ULONG temp5 ;
  int res5 = SWIG_TMPOBJ ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPITable_GetCollapseState",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetCollapseState" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetCollapseState" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_GetCollapseState" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_LPBYTE,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPITable_GetCollapseState" "', argument " "4"" of type '" "LPBYTE""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPITable_GetCollapseState" "', argument " "4"" of type '" "LPBYTE""'");
    } else {
      LPBYTE * temp = reinterpret_cast< LPBYTE * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res6 = SWIG_ConvertPtr(obj4, &argp6,SWIGTYPE_p_LPBYTE, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPITable_GetCollapseState" "', argument " "6"" of type '" "LPBYTE *""'"); 
  }
  arg6 = reinterpret_cast< LPBYTE * >(argp6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetCollapseState(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPITable_SetCollapseState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPBYTE arg4 ;
  BOOKMARK *arg5 = (BOOKMARK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  BOOKMARK temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPITable_SetCollapseState",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SetCollapseState" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SetCollapseState" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SetCollapseState" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_LPBYTE,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPITable_SetCollapseState" "', argument " "4"" of type '" "LPBYTE""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPITable_SetCollapseState" "', argument " "4"" of type '" "LPBYTE""'");
    } else {
      LPBYTE * temp = reinterpret_cast< LPBYTE * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetCollapseState(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPITable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPITable *arg1 = (IMAPITable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPITable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPITable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPITable" "', argument " "1"" of type '" "IMAPITable *""'"); 
  }
  arg1 = reinterpret_cast< IMAPITable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPITable(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPITable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPITable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IProfSect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfSect *arg1 = (IProfSect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IProfSect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfSect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProfSect" "', argument " "1"" of type '" "IProfSect *""'"); 
  }
  arg1 = reinterpret_cast< IProfSect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IProfSect(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IProfSect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IProfSect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMAPIProgress_Progress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPIProgress_Progress",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_Progress" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProgress_Progress" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProgress_Progress" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProgress_Progress" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Progress(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProgress_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPIProgress_GetFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetFlags" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetFlags(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProgress_GetMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPIProgress_GetMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetMax" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMax(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProgress_GetMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPIProgress_GetMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetMin" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMin(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPIProgress_SetLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  ULONG *arg3 = (ULONG *) 0 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPIProgress_SetLimits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_SetLimits" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetLimits(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPIProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPIProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPIProgress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIProgress" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
  }
  arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPIProgress(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPIProgress_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPIProgress, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IProviderAdmin_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IProviderAdmin_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_GetLastError" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProviderAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProviderAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProviderAdmin_GetProviderTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  ULONG arg2 ;
  LPMAPITABLE *arg3 = (LPMAPITABLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IProviderAdmin_GetProviderTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_LPMAPITABLE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "3"" of type '" "LPMAPITABLE *""'"); 
  }
  arg3 = reinterpret_cast< LPMAPITABLE * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetProviderTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProviderAdmin_CreateProvider(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  LPSPropValue arg4 ;
  ULONG arg5 ;
  ULONG arg6 ;
  LPMAPIUID arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray3 = 0 ;
  LPSPropValue lpArray3 = NULL ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  MAPIUID tmpUid7 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg3 = 0;
    arg4 = NULL;
  }
  ULONG ulFlags = 0;
  {
    arg7 = &tmpUid7;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IProviderAdmin_CreateProvider",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_CreateProvider" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ULONG len;
    arg4 = List_to_LPSPropValue(obj2, &len);
    arg3 = len;
    if(PyErr_Occurred()) goto fail;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProviderAdmin_CreateProvider" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj4, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProviderAdmin_CreateProvider" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProviderAdmin_CreateProvider" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateProvider(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)arg7,sizeof(MAPIUID)));
  }
  {
    
  }
  {
    if(arg4)
    MAPIFreeBuffer((void *)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(arg4)
    MAPIFreeBuffer((void *)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProviderAdmin_DeleteProvider(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  LPMAPIUID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IProviderAdmin_DeleteProvider",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_DeleteProvider" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProviderAdmin_DeleteProvider" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteProvider(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProviderAdmin_OpenProfileSection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  LPMAPIUID arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  IProfSect **arg5 = (IProfSect **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  IProfSect *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IProviderAdmin_OpenProfileSection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IProviderAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IProviderAdmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProviderAdmin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProviderAdmin" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IProviderAdmin(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IProviderAdmin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IProviderAdmin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MAPIINIT_0_ulVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:MAPIINIT_0_ulVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulVersion_set" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAPIINIT_0_ulVersion_set" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ulVersion = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPIINIT_0_ulVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:MAPIINIT_0_ulVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulVersion_get" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->ulVersion);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPIINIT_0_ulFlags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OO:MAPIINIT_0_ulFlags_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulFlags_set" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAPIINIT_0_ulFlags_set" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->ulFlags = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPIINIT_0_ulFlags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:MAPIINIT_0_ulFlags_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulFlags_get" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result =  ((arg1)->ulFlags);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MAPIINIT_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":new_MAPIINIT_0")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (MAPIINIT_0 *)new MAPIINIT_0();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MAPIINIT_0, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MAPIINIT_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MAPIINIT_0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAPIINIT_0" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete arg1;
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *MAPIINIT_0_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MAPIINIT_0, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MAPIInitialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPIINIT *arg1 = (MAPIINIT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:MAPIInitialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIInitialize" "', argument " "1"" of type '" "MAPIINIT *""'"); 
  }
  arg1 = reinterpret_cast< MAPIINIT * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = MAPIInitialize(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPIUninitialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":MAPIUninitialize")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        MAPIUninitialize();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPILogonEx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ULONG arg1 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  IMAPISession **arg5 = (IMAPISession **) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  IMAPISession *temp5 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MAPILogonEx",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAPILogonEx" "', argument " "1"" of type '" "ULONG""'");
  } 
  arg1 = static_cast< ULONG >(val1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MAPILogonEx" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "MAPILogonEx" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "MAPILogonEx" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = MAPILogonEx(arg1,arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IMAPISession, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAPIAdminProfiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ULONG arg1 ;
  IProfAdmin **arg2 = (IProfAdmin **) 0 ;
  unsigned int fl1 ;
  int ecode1 ;
  IProfAdmin *temp2 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp2 = NULL; arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:MAPIAdminProfiles",&obj0)) SWIG_fail;
  {
    ecode1 = SWIG_AsVal_unsigned_SS_int (obj0, &fl1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAPIAdminProfiles" "', argument " "1"" of type '" "ULONG""'");
    } 
    arg1 = fl1;
    ulFlags = fl1;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = MAPIAdminProfiles(arg1,arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IProfAdmin, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  MAPIERROR **arg4 = (MAPIERROR **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_GetLastError",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetLastError" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_MAPIERROR, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_GetLastError" "', argument " "4"" of type '" "MAPIERROR **""'"); 
  }
  arg4 = reinterpret_cast< MAPIERROR ** >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_GetMsgStoresTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPISession_GetMsgStoresTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetMsgStoresTable" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetMsgStoresTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMsgStoresTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_OpenMsgStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  LPCIID arg5 ;
  ULONG arg6 ;
  IMsgStore **arg7 = (IMsgStore **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  unsigned int fl6 ;
  int ecode6 ;
  IMsgStore *temp7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp7 = NULL; arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPISession_OpenMsgStore",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenMsgStore" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_OpenMsgStore" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenMsgStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj3, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_OpenMsgStore" "', argument " "5"" of type '" "LPCIID""'");
    }
    arg5 = reinterpret_cast< LPCIID >(buf5);
  }
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj4, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_OpenMsgStore" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenMsgStore(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMsgStore, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_OpenAddressBook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  IAddrBook **arg5 = (IAddrBook **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  IAddrBook *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_OpenAddressBook",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenAddressBook" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_OpenAddressBook" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenAddressBook" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_OpenAddressBook" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenAddressBook(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAddrBook, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_OpenProfileSection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  LPMAPIUID arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  IProfSect **arg5 = (IProfSect **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  IProfSect *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_OpenProfileSection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenProfileSection" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_GetStatusTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPISession_GetStatusTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetStatusTable" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetStatusTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetStatusTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_OpenEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPCIID arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  IUnknown **arg7 = (IUnknown **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  unsigned int fl5 ;
  int ecode5 ;
  ULONG ulType6 ;
  IUnknown *lpUnk6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    ulType6 = NULL;
    lpUnk6 = NULL;
    
    arg6 = &ulType6;
    arg7 = &lpUnk6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_OpenEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenEntry" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPISession_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    switch(*(arg6)) {
    case MAPI_FOLDER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MESSAGE:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MAILUSER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_DISTLIST:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_ABCONT:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER)); break;
    default:
      break;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_CompareEntryIDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  ULONG *arg7 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  ULONG temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_CompareEntryIDs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj3, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_Advise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPMAPIADVISESINK arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ULONG temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_Advise",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Advise" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_Advise" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_Advise" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    res5 = SWIG_ConvertPtr(obj3, &argp5, SWIGTYPE_p_LPMAPIADVISESINK,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'");
    } else {
      LPMAPIADVISESINK * temp = reinterpret_cast< LPMAPIADVISESINK * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_Unadvise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPISession_Unadvise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Unadvise" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_Unadvise" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Unadvise(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_MessageOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPTSTR arg4 ;
  LPMESSAGE arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  void *argp5 ;
  int res5 = 0 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMAPISession_MessageOptions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_MessageOptions" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_MessageOptions" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_MessageOptions" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_LPMESSAGE,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_MessageOptions" "', argument " "5"" of type '" "LPMESSAGE""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_MessageOptions" "', argument " "5"" of type '" "LPMESSAGE""'");
    } else {
      LPMESSAGE * temp = reinterpret_cast< LPMESSAGE * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPISession_MessageOptions" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->MessageOptions(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_QueryDefaultMessageOpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPSPropValue *arg5 = (LPSPropValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_QueryDefaultMessageOpt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  res5 = SWIG_ConvertPtr(obj3, &argp5,SWIGTYPE_p_LPSPropValue, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "5"" of type '" "LPSPropValue *""'"); 
  }
  arg5 = reinterpret_cast< LPSPropValue * >(argp5);
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryDefaultMessageOpt(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_EnumAdrTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  ULONG *arg3 = (ULONG *) 0 ;
  LPTSTR **arg4 = (LPTSTR **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPISession_EnumAdrTypes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  res4 = SWIG_ConvertPtr(obj2, &argp4,SWIGTYPE_p_p_LPTSTR, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "4"" of type '" "LPTSTR **""'"); 
  }
  arg4 = reinterpret_cast< LPTSTR ** >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->EnumAdrTypes(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_QueryIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPENTRYID *arg3 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cbEntryID2 = 0 ;
  LPENTRYID lpEntryID2 = NULL ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = &cbEntryID2; arg3 = &lpEntryID2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:IMAPISession_QueryIdentity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_QueryIdentity" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryIdentity(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg3) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2));
    }
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_Logoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMAPISession_Logoff",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Logoff" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_Logoff" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_Logoff" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_Logoff" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Logoff(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_SetDefaultStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPISession_SetDefaultStore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_SetDefaultStore" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_SetDefaultStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_SetDefaultStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetDefaultStore(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_AdminServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  IMsgServiceAdmin **arg3 = (IMsgServiceAdmin **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMsgServiceAdmin *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMAPISession_AdminServices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_AdminServices" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_AdminServices" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AdminServices(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMsgServiceAdmin, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_ShowForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  ULONG arg2 ;
  LPMDB arg3 ;
  LPMAPIFOLDER arg4 ;
  LPCIID arg5 ;
  ULONG arg6 ;
  LPMESSAGE arg7 ;
  ULONG arg8 ;
  ULONG arg9 ;
  ULONG arg10 ;
  ULONG arg11 ;
  LPSTR arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  unsigned int fl8 ;
  int ecode8 ;
  unsigned int val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  unsigned int val11 ;
  int ecode11 = 0 ;
  void *argp12 ;
  int res12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:IMAPISession_ShowForm",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_ShowForm" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_ShowForm" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_LPMDB,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_ShowForm" "', argument " "3"" of type '" "LPMDB""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "3"" of type '" "LPMDB""'");
    } else {
      LPMDB * temp = reinterpret_cast< LPMDB * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_LPMAPIFOLDER,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_ShowForm" "', argument " "4"" of type '" "LPMAPIFOLDER""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "4"" of type '" "LPMAPIFOLDER""'");
    } else {
      LPMAPIFOLDER * temp = reinterpret_cast< LPMAPIFOLDER * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_ShowForm" "', argument " "5"" of type '" "LPCIID""'");
    }
    arg5 = reinterpret_cast< LPCIID >(buf5);
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_ShowForm" "', argument " "6"" of type '" "ULONG""'");
  } 
  arg6 = static_cast< ULONG >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_LPMESSAGE,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IMAPISession_ShowForm" "', argument " "7"" of type '" "LPMESSAGE""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "7"" of type '" "LPMESSAGE""'");
    } else {
      LPMESSAGE * temp = reinterpret_cast< LPMESSAGE * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    ecode8 = SWIG_AsVal_unsigned_SS_int (obj7, &fl8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IMAPISession_ShowForm" "', argument " "8"" of type '" "ULONG""'");
    } 
    arg8 = fl8;
    ulFlags = fl8;
  }
  ecode9 = SWIG_AsVal_unsigned_SS_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPISession_ShowForm" "', argument " "9"" of type '" "ULONG""'");
  } 
  arg9 = static_cast< ULONG >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IMAPISession_ShowForm" "', argument " "10"" of type '" "ULONG""'");
  } 
  arg10 = static_cast< ULONG >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_int(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "IMAPISession_ShowForm" "', argument " "11"" of type '" "ULONG""'");
  } 
  arg11 = static_cast< ULONG >(val11);
  {
    res12 = SWIG_ConvertPtr(obj11, &argp12, SWIGTYPE_p_LPSTR,  0  | 0);
    if (!SWIG_IsOK(res12)) {
      SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "IMAPISession_ShowForm" "', argument " "12"" of type '" "LPSTR""'"); 
    }  
    if (!argp12) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "12"" of type '" "LPSTR""'");
    } else {
      LPSTR * temp = reinterpret_cast< LPSTR * >(argp12);
      arg12 = *temp;
      if (SWIG_IsNewObj(res12)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ShowForm(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMAPISession_PrepareForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  LPCIID arg2 ;
  LPMESSAGE arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  void *argp3 ;
  int res3 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMAPISession_PrepareForm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_PrepareForm" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_PrepareForm" "', argument " "2"" of type '" "LPCIID""'");
    }
    arg2 = reinterpret_cast< LPCIID >(buf2);
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_LPMESSAGE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_PrepareForm" "', argument " "3"" of type '" "LPMESSAGE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_PrepareForm" "', argument " "3"" of type '" "LPMESSAGE""'");
    } else {
      LPMESSAGE * temp = reinterpret_cast< LPMESSAGE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PrepareForm(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMAPISession(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPISession *arg1 = (IMAPISession *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMAPISession",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMAPISession, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPISession" "', argument " "1"" of type '" "IMAPISession *""'"); 
  }
  arg1 = reinterpret_cast< IMAPISession * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMAPISession(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMAPISession_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMAPISession, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IAddrBook_OpenEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPCIID arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  IUnknown **arg7 = (IUnknown **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  unsigned int fl5 ;
  int ecode5 ;
  ULONG ulType6 ;
  IUnknown *lpUnk6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    ulType6 = NULL;
    lpUnk6 = NULL;
    
    arg6 = &ulType6;
    arg7 = &lpUnk6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAddrBook_OpenEntry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_OpenEntry" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IAddrBook_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    switch(*(arg6)) {
    case MAPI_FOLDER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MESSAGE:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_MAILUSER:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_DISTLIST:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER)); break;
    case MAPI_ABCONT:
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER)); break;
    default:
      break;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_CompareEntryIDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  ULONG *arg7 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  ULONG temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg7 = &temp7;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAddrBook_CompareEntryIDs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj3, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_Advise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPMAPIADVISESINK arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ULONG temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAddrBook_Advise",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Advise" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_Advise" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IAddrBook_Advise" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    res5 = SWIG_ConvertPtr(obj3, &argp5, SWIGTYPE_p_LPMAPIADVISESINK,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IAddrBook_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'");
    } else {
      LPMAPIADVISESINK * temp = reinterpret_cast< LPMAPIADVISESINK * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_Unadvise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IAddrBook_Unadvise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Unadvise" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_Unadvise" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Unadvise(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_CreateOneOff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  LPTSTR arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  LPENTRYID *arg7 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  ULONG cbEntryID6 = 0 ;
  LPENTRYID lpEntryID6 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg6 = &cbEntryID6; arg7 = &lpEntryID6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IAddrBook_CreateOneOff",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_CreateOneOff" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IAddrBook_CreateOneOff" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_CreateOneOff" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_CreateOneOff" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_CreateOneOff" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateOneOff(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg7) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  {
    if(*arg7)
    MAPIFreeBuffer(*arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    
  }
  {
    if(*arg7)
    MAPIFreeBuffer(*arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_NewEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  LPENTRYID arg7 ;
  ULONG *arg8 = (ULONG *) 0 ;
  LPENTRYID *arg9 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  size_t size6 ;
  int alloc6 = 0 ;
  ULONG cbEntryID8 = 0 ;
  LPENTRYID lpEntryID8 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg8 = &cbEntryID8; arg9 = &lpEntryID8;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IAddrBook_NewEntry",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_NewEntry" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_NewEntry" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_NewEntry" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_NewEntry" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    res6 = SWIG_AsCharPtrAndSize(obj4, &buf6, &size6, &alloc6);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IAddrBook_NewEntry" "', argument " "6"" of type '" "ULONG""'");
    }
    if(buf6 == NULL) {
      arg6 = 0;
      arg7 = NULL;
    } else {
      arg6 = static_cast< ULONG >(size6 - 1);
      arg7 = reinterpret_cast< LPENTRYID >(buf6);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->NewEntry(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg9) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg9,*arg8));
    }
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  {
    if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  }
  {
    if(*arg9)
    MAPIFreeBuffer(*arg9);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  {
    if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  }
  {
    if(*arg9)
    MAPIFreeBuffer(*arg9);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_ResolveName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPTSTR arg4 ;
  LPADRLIST arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IAddrBook_ResolveName",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_ResolveName" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_ResolveName" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_ResolveName" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    arg5 = List_to_LPADRLIST(obj4);
    if(PyErr_Occurred()) goto fail;
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_ResolveName" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveName(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPADRLIST(arg5));
    if(PyErr_Occurred()) goto fail;
  }
  {
    
  }
  {
    FreeProws((LPSRowSet)arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    FreeProws((LPSRowSet)arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_Address(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPADRPARM arg3 ;
  LPADRLIST *arg4 = (LPADRLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  LPADRLIST temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:IAddrBook_Address",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Address" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res3 = SWIG_ConvertPtr(obj1, &argp3, SWIGTYPE_p_LPADRPARM,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_Address" "', argument " "3"" of type '" "LPADRPARM""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Address" "', argument " "3"" of type '" "LPADRPARM""'");
    } else {
      LPADRPARM * temp = reinterpret_cast< LPADRPARM * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Address(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPADRLIST(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    FreeProws((LPSRowSet)*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    FreeProws((LPSRowSet)*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_Details(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPFNDISMISS arg3 ;
  LPVOID arg4 ;
  ULONG arg5 ;
  LPENTRYID arg6 ;
  LPFNBUTTON arg7 ;
  LPVOID arg8 ;
  LPTSTR arg9 ;
  ULONG arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  size_t size5 ;
  int alloc5 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  unsigned int fl10 ;
  int ecode10 ;
  std::string strInput9 ;
  std::wstring wstrInput9 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:IAddrBook_Details",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Details" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res3 = SWIG_ConvertPtr(obj1, &argp3, SWIGTYPE_p_LPFNDISMISS,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_Details" "', argument " "3"" of type '" "LPFNDISMISS""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "3"" of type '" "LPFNDISMISS""'");
    } else {
      LPFNDISMISS * temp = reinterpret_cast< LPFNDISMISS * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj2, &argp4, SWIGTYPE_p_LPVOID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_Details" "', argument " "4"" of type '" "LPVOID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "4"" of type '" "LPVOID""'");
    } else {
      LPVOID * temp = reinterpret_cast< LPVOID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_AsCharPtrAndSize(obj3, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IAddrBook_Details" "', argument " "5"" of type '" "ULONG""'");
    }
    if(buf5 == NULL) {
      arg5 = 0;
      arg6 = NULL;
    } else {
      arg5 = static_cast< ULONG >(size5 - 1);
      arg6 = reinterpret_cast< LPENTRYID >(buf5);
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj4, &argp7, SWIGTYPE_p_LPFNBUTTON,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IAddrBook_Details" "', argument " "7"" of type '" "LPFNBUTTON""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "7"" of type '" "LPFNBUTTON""'");
    } else {
      LPFNBUTTON * temp = reinterpret_cast< LPFNBUTTON * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj5, &argp8, SWIGTYPE_p_LPVOID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IAddrBook_Details" "', argument " "8"" of type '" "LPVOID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "8"" of type '" "LPVOID""'");
    } else {
      LPVOID * temp = reinterpret_cast< LPVOID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    arg9 = (LPTSTR)obj6;
  }
  {
    ecode10 = SWIG_AsVal_unsigned_SS_int (obj7, &fl10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IAddrBook_Details" "', argument " "10"" of type '" "ULONG""'");
    } 
    arg10 = fl10;
    ulFlags = fl10;
  }
  {
    PyObject *o = (PyObject *)arg9;
    if(o == Py_None)
    arg9 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput9.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg9 = (LPTSTR)wstrInput9.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput9.assign(input, size);
        
        arg9 = (LPTSTR)strInput9.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_Details" "', argument " "9"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Details(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_RecipOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPADRENTRY arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAddrBook_RecipOptions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_RecipOptions" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_RecipOptions" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_RecipOptions" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_LPADRENTRY,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_RecipOptions" "', argument " "4"" of type '" "LPADRENTRY""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_RecipOptions" "', argument " "4"" of type '" "LPADRENTRY""'");
    } else {
      LPADRENTRY * temp = reinterpret_cast< LPADRENTRY * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RecipOptions(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_QueryDefaultRecipOpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPSPropValue *arg5 = (LPSPropValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG c4 ;
  LPSPropValue lp4 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp4 = NULL; arg5 = &lp4; c4 = 0; arg4 = &c4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAddrBook_QueryDefaultRecipOpt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_QueryDefaultRecipOpt" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_QueryDefaultRecipOpt" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IAddrBook_QueryDefaultRecipOpt" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->QueryDefaultRecipOpt(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSPropValue(*(arg5),*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_GetPAB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPENTRYID *arg3 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cbEntryID2 = 0 ;
  LPENTRYID lpEntryID2 = NULL ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = &cbEntryID2; arg3 = &lpEntryID2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:IAddrBook_GetPAB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetPAB" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetPAB(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg3) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2));
    }
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_SetPAB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IAddrBook_SetPAB",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetPAB" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_SetPAB" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetPAB(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_GetDefaultDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPENTRYID *arg3 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cbEntryID2 = 0 ;
  LPENTRYID lpEntryID2 = NULL ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = &cbEntryID2; arg3 = &lpEntryID2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:IAddrBook_GetDefaultDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetDefaultDir" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetDefaultDir(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg3) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2));
    }
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_SetDefaultDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IAddrBook_SetDefaultDir",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetDefaultDir" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_SetDefaultDir" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetDefaultDir(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_GetSearchPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPSRowSet *arg3 = (LPSRowSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  LPSRowSet temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IAddrBook_GetSearchPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetSearchPath" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_GetSearchPath" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetSearchPath(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPSRowSet(*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    FreeProws((LPSRowSet)*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    FreeProws((LPSRowSet)*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_SetSearchPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPSRowSet arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAddrBook_SetSearchPath",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetSearchPath" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_SetSearchPath" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_LPSRowSet,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_SetSearchPath" "', argument " "3"" of type '" "LPSRowSet""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_SetSearchPath" "', argument " "3"" of type '" "LPSRowSet""'");
    } else {
      LPSRowSet * temp = reinterpret_cast< LPSRowSet * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSearchPath(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    FreeProws((LPSRowSet)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    FreeProws((LPSRowSet)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAddrBook_PrepareRecips(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  ULONG arg2 ;
  LPSPropTagArray arg3 ;
  LPADRLIST arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  arg4 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAddrBook_PrepareRecips",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_PrepareRecips" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_PrepareRecips" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPSPropTagArray(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg4 = List_to_LPADRLIST(obj3);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PrepareRecips(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPADRLIST(arg4));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  {
    FreeProws((LPSRowSet)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IAddrBook(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IAddrBook *arg1 = (IAddrBook *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IAddrBook",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IAddrBook, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IAddrBook" "', argument " "1"" of type '" "IAddrBook *""'"); 
  }
  arg1 = reinterpret_cast< IAddrBook * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IAddrBook(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IAddrBook_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IAddrBook, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IProfAdmin_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IProfAdmin_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_GetLastError" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProfAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_GetProfileTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IProfAdmin_GetProfileTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_GetProfileTable" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProfAdmin_GetProfileTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetProfileTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_CreateProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IProfAdmin_CreateProfile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_CreateProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProfAdmin_CreateProfile" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_CreateProfile" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_CreateProfile" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_CreateProfile" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateProfile(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_DeleteProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IProfAdmin_DeleteProfile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_DeleteProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_DeleteProfile" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_DeleteProfile" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteProfile(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_ChangeProfilePassword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  LPTSTR arg4 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IProfAdmin_ChangeProfilePassword",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ChangeProfilePassword(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_CopyProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  LPTSTR arg4 ;
  ULONG arg5 ;
  ULONG arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IProfAdmin_CopyProfile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_CopyProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_CopyProfile" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj5, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProfAdmin_CopyProfile" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_CopyProfile" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_CopyProfile" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_CopyProfile" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyProfile(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_RenameProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  LPTSTR arg4 ;
  ULONG arg5 ;
  ULONG arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int fl6 ;
  int ecode6 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IProfAdmin_RenameProfile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_RenameProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_RenameProfile" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  {
    ecode6 = SWIG_AsVal_unsigned_SS_int (obj5, &fl6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProfAdmin_RenameProfile" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = fl6;
    ulFlags = fl6;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_RenameProfile" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_RenameProfile" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_RenameProfile" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RenameProfile(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_SetDefaultProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IProfAdmin_SetDefaultProfile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_SetDefaultProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_SetDefaultProfile" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_SetDefaultProfile" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetDefaultProfile(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProfAdmin_AdminServices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  IMsgServiceAdmin **arg6 = (IMsgServiceAdmin **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  IMsgServiceAdmin *temp6 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp6 = NULL; arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IProfAdmin_AdminServices",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_AdminServices" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProfAdmin_AdminServices" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_AdminServices" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_AdminServices" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IProfAdmin_AdminServices" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AdminServices(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg6), SWIGTYPE_p_IMsgServiceAdmin, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IProfAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IProfAdmin *arg1 = (IProfAdmin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IProfAdmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IProfAdmin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProfAdmin" "', argument " "1"" of type '" "IProfAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IProfAdmin * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IProfAdmin(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IProfAdmin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IProfAdmin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgServiceAdmin_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_GetMsgServiceTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgServiceAdmin_GetMsgServiceTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetMsgServiceTable" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetMsgServiceTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMsgServiceTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_CreateMsgService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMsgServiceAdmin_CreateMsgService",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateMsgService(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_DeleteMsgService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgServiceAdmin_DeleteMsgService",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_DeleteMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_DeleteMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteMsgService(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_CopyMsgService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  LPTSTR arg3 ;
  LPCIID arg4 ;
  LPCIID arg5 ;
  LPVOID arg6 ;
  ULONG arg7 ;
  ULONG arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  int res4 ;
  char *buf4 ;
  size_t size4 ;
  int alloc4 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  void *argp6 ;
  int res6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  unsigned int fl8 ;
  int ecode8 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:IMsgServiceAdmin_CopyMsgService",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    alloc4 = SWIG_OLDOBJ;
    res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
      // size4-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "4"" of type '" "LPCIID""'");
    }
    arg4 = reinterpret_cast< LPCIID >(buf4);
  }
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "5"" of type '" "LPCIID""'");
    }
    arg5 = reinterpret_cast< LPCIID >(buf5);
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_LPVOID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "6"" of type '" "LPVOID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "6"" of type '" "LPVOID""'");
    } else {
      LPVOID * temp = reinterpret_cast< LPVOID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "7"" of type '" "ULONG""'");
  } 
  arg7 = static_cast< ULONG >(val7);
  {
    ecode8 = SWIG_AsVal_unsigned_SS_int (obj7, &fl8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "8"" of type '" "ULONG""'");
    } 
    arg8 = fl8;
    ulFlags = fl8;
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CopyMsgService(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_RenameMsgService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  ULONG arg3 ;
  LPTSTR arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int fl3 ;
  int ecode3 ;
  std::string strInput4 ;
  std::wstring wstrInput4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgServiceAdmin_RenameMsgService",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg4 = (LPTSTR)obj3;
  }
  {
    PyObject *o = (PyObject *)arg4;
    if(o == Py_None)
    arg4 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput4.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg4 = (LPTSTR)wstrInput4.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput4.assign(input, size);
        
        arg4 = (LPTSTR)strInput4.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "4"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RenameMsgService(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_ConfigureMsgService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  ULONG arg3 ;
  ULONG arg4 ;
  ULONG arg5 ;
  LPSPropValue arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG cArray5 = 0 ;
  LPSPropValue lpArray5 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg5 = 0;
    arg6 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IMsgServiceAdmin_ConfigureMsgService",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    ULONG len;
    arg6 = List_to_LPSPropValue(obj4, &len);
    arg5 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ConfigureMsgService(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if(arg6)
    MAPIFreeBuffer((void *)arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if(arg6)
    MAPIFreeBuffer((void *)arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_OpenProfileSection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  LPCIID arg3 ;
  ULONG arg4 ;
  IProfSect **arg5 = (IProfSect **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  IProfSect *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgServiceAdmin_OpenProfileSection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
    }
    arg3 = reinterpret_cast< LPCIID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_MsgServiceTransportOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPMAPIUID arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 ;
  size_t size3 ;
  int alloc3 ;
  unsigned int fl4 ;
  int ecode4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IMsgServiceAdmin_MsgServiceTransportOrder",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    alloc3 = SWIG_OLDOBJ;
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
      // size3-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "3"" of type '" "LPMAPIUID""'");
    }
    arg3 = reinterpret_cast< LPMAPIUID >(buf3);
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->MsgServiceTransportOrder(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_AdminProviders(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  ULONG arg3 ;
  IProviderAdmin **arg4 = (IProviderAdmin **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int fl3 ;
  int ecode3 ;
  IProviderAdmin *temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgServiceAdmin_AdminProviders",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AdminProviders(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IProviderAdmin, SWIG_SHADOW | SWIG_OWNER));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_SetPrimaryIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  LPMAPIUID arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IMsgServiceAdmin_SetPrimaryIdentity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "2"" of type '" "LPMAPIUID""'");
    }
    arg2 = reinterpret_cast< LPMAPIUID >(buf2);
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetPrimaryIdentity(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMsgServiceAdmin_GetProviderTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IMsgServiceAdmin_GetProviderTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetProviderTable" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetProviderTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetProviderTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IMsgServiceAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IMsgServiceAdmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IMsgServiceAdmin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMsgServiceAdmin" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IMsgServiceAdmin(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IMsgServiceAdmin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IMsgServiceAdmin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MAPINotifSink_GetNotifications(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPINotifSink *arg1 = (MAPINotifSink *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPNOTIFICATION *arg3 = (LPNOTIFICATION *) 0 ;
  BOOL arg4 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG c2 ;
  LPNOTIFICATION lp2 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  lp2 = NULL; arg3 = &lp2; c2 = 0; arg2 = &c2;
  if (!PyArg_ParseTuple(args,(char *)"OOO:MAPINotifSink_GetNotifications",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPINotifSink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPINotifSink_GetNotifications" "', argument " "1"" of type '" "MAPINotifSink *""'"); 
  }
  arg1 = reinterpret_cast< MAPINotifSink * >(argp1);
  ecode4 = SWIG_AsVal_bool(obj1, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MAPINotifSink_GetNotifications" "', argument " "4"" of type '" "BOOL""'");
  } 
  arg4 = static_cast< BOOL >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj2, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MAPINotifSink_GetNotifications" "', argument " "5"" of type '" "ULONG""'");
  } 
  arg5 = static_cast< ULONG >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetNotifications(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPNOTIFICATION(*(arg3),*(arg2)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MAPINotifSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPINotifSink *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":new_MAPINotifSink")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (MAPINotifSink *)new_MAPINotifSink();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MAPINotifSink, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MAPINotifSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MAPINotifSink *arg1 = (MAPINotifSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MAPINotifSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MAPINotifSink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAPINotifSink" "', argument " "1"" of type '" "MAPINotifSink *""'"); 
  }
  arg1 = reinterpret_cast< MAPINotifSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_MAPINotifSink(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *MAPINotifSink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MAPINotifSink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_WrapStoreEntryID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ULONG arg1 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPENTRYID *arg6 = (LPENTRYID *) 0 ;
  unsigned int fl1 ;
  int ecode1 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  ULONG cbEntryID5 = 0 ;
  LPENTRYID lpEntryID5 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg5 = &cbEntryID5; arg6 = &lpEntryID5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:WrapStoreEntryID",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    ecode1 = SWIG_AsVal_unsigned_SS_int (obj0, &fl1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WrapStoreEntryID" "', argument " "1"" of type '" "ULONG""'");
    } 
    arg1 = fl1;
    ulFlags = fl1;
  }
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WrapStoreEntryID" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "WrapStoreEntryID" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = WrapStoreEntryID(arg1,arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg6) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5));
    }
  }
  {
    
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WrapCompressedRTFStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IStream *arg1 = (IStream *) 0 ;
  ULONG arg2 ;
  IStream **arg3 = (IStream **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IStream *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:WrapCompressedRTFStream",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WrapCompressedRTFStream" "', argument " "1"" of type '" "IStream *""'"); 
  }
  arg1 = reinterpret_cast< IStream * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WrapCompressedRTFStream" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = WrapCompressedRTFStream(arg1,arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportContentsChanges_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_Config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportContentsChanges_Config",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Config(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_UpdateState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeImportContentsChanges_UpdateState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_UpdateState" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportContentsChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UpdateState(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_ImportMessageChange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  ULONG arg2 ;
  LPSPropValue arg3 ;
  ULONG arg4 ;
  IMessage **arg5 = (IMessage **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPSPropValue lpArray2 = NULL ;
  unsigned int fl4 ;
  int ecode4 ;
  IMessage *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportContentsChanges_ImportMessageChange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageChange" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPSPropValue(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeImportContentsChanges_ImportMessageChange" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportMessageChange(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_ImportMessageDeletion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  ULONG arg2 ;
  LPENTRYLIST arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportContentsChanges_ImportMessageDeletion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageDeletion" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_ImportMessageDeletion" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPENTRYLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportMessageDeletion(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_ImportPerUserReadStateChange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  ULONG arg2 ;
  LPREADSTATE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPREADSTATE lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeImportContentsChanges_ImportPerUserReadStateChange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportPerUserReadStateChange" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPREADSTATE(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportPerUserReadStateChange(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportContentsChanges_ImportMessageMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  ULONG arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  ULONG arg4 ;
  BYTE *arg5 = (BYTE *) 0 ;
  ULONG arg6 ;
  BYTE *arg7 = (BYTE *) 0 ;
  ULONG arg8 ;
  BYTE *arg9 = (BYTE *) 0 ;
  ULONG arg10 ;
  BYTE *arg11 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:IExchangeImportContentsChanges_ImportMessageMove",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "3"" of type '" "BYTE *""'"); 
  }
  arg3 = reinterpret_cast< BYTE * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "4"" of type '" "ULONG""'");
  } 
  arg4 = static_cast< ULONG >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "5"" of type '" "BYTE *""'"); 
  }
  arg5 = reinterpret_cast< BYTE * >(argp5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "6"" of type '" "ULONG""'");
  } 
  arg6 = static_cast< ULONG >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "7"" of type '" "BYTE *""'"); 
  }
  arg7 = reinterpret_cast< BYTE * >(argp7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "8"" of type '" "ULONG""'");
  } 
  arg8 = static_cast< ULONG >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "9"" of type '" "BYTE *""'"); 
  }
  arg9 = reinterpret_cast< BYTE * >(argp9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "10"" of type '" "ULONG""'");
  } 
  arg10 = static_cast< ULONG >(val10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "11"" of type '" "BYTE *""'"); 
  }
  arg11 = reinterpret_cast< BYTE * >(argp11);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportMessageMove(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IExchangeImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IExchangeImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeImportContentsChanges" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IExchangeImportContentsChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IExchangeImportContentsChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IExchangeImportContentsChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IExchangeImportHierarchyChanges_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportHierarchyChanges_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportHierarchyChanges_Config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportHierarchyChanges_Config",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Config(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportHierarchyChanges_UpdateState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeImportHierarchyChanges_UpdateState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_UpdateState" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportHierarchyChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UpdateState(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportHierarchyChanges_ImportFolderChange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  ULONG arg2 ;
  LPSPropValue arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPSPropValue lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeImportHierarchyChanges_ImportFolderChange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_ImportFolderChange" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPSPropValue(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportFolderChange(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeImportHierarchyChanges_ImportFolderDeletion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  ULONG arg2 ;
  LPENTRYLIST arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeImportHierarchyChanges_ImportFolderDeletion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_ImportFolderDeletion" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportHierarchyChanges_ImportFolderDeletion" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPENTRYLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportFolderDeletion(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IExchangeImportHierarchyChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IExchangeImportHierarchyChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeImportHierarchyChanges" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IExchangeImportHierarchyChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IExchangeImportHierarchyChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IExchangeImportHierarchyChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IExchangeExportChanges_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeExportChanges_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeExportChanges_Config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  ULONG arg3 ;
  IUnknown *arg4 = (IUnknown *) 0 ;
  LPSRestriction arg5 ;
  LPSPropTagArray arg6 ;
  LPSPropTagArray arg7 ;
  ULONG arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg5 = NULL;
  arg6 = NULL;
  arg7 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:IExchangeExportChanges_Config",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_Config" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeExportChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeExportChanges_Config" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IUnknown, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeExportChanges_Config" "', argument " "4"" of type '" "IUnknown *""'"); 
  }
  arg4 = reinterpret_cast< IUnknown * >(argp4);
  {
    arg5 = Object_to_LPSRestriction(obj4);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg6 = List_to_LPSPropTagArray(obj5);
    if(PyErr_Occurred()) goto fail;
  }
  {
    arg7 = List_to_LPSPropTagArray(obj6);
    if(PyErr_Occurred()) goto fail;
  }
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IExchangeExportChanges_Config" "', argument " "8"" of type '" "ULONG""'");
  } 
  arg8 = static_cast< ULONG >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Config(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  {
    if(arg6)
    MAPIFreeBuffer(arg6);
  }
  {
    if(arg7)
    MAPIFreeBuffer(arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg5)
    MAPIFreeBuffer(arg5);
  }
  {
    if(arg6)
    MAPIFreeBuffer(arg6);
  }
  {
    if(arg7)
    MAPIFreeBuffer(arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeExportChanges_Synchronize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  ULONG *arg3 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  ULONG temp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeExportChanges_Synchronize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_Synchronize" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_ULONG,0))))) {
    unsigned int val; 
    int ecode = SWIG_AsVal_unsigned_SS_int(obj1, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IExchangeExportChanges_Synchronize" "', argument " "3"" of type '" "ULONG""'");
    }
    temp3 = static_cast< ULONG >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Synchronize(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeExportChanges_UpdateState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeExportChanges_UpdateState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_UpdateState" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeExportChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UpdateState(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IExchangeExportChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IExchangeExportChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeExportChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeExportChanges" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IExchangeExportChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IExchangeExportChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IExchangeExportChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IExchangeManageStore_CreateStoreEntryID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPENTRYID *arg6 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG cbEntryID5 = 0 ;
  LPENTRYID lpEntryID5 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg5 = &cbEntryID5; arg6 = &lpEntryID5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IExchangeManageStore_CreateStoreEntryID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateStoreEntryID(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg6) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5));
    }
  }
  {
    
  }
  {
    
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeManageStore_EntryIDFromSourceKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  ULONG arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  ULONG arg4 ;
  BYTE *arg5 = (BYTE *) 0 ;
  ULONG *arg6 = (ULONG *) 0 ;
  LPENTRYID *arg7 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  ULONG cbEntryID6 = 0 ;
  LPENTRYID lpEntryID6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg6 = &cbEntryID6; arg7 = &lpEntryID6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeManageStore_EntryIDFromSourceKey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< BYTE * >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< BYTE * >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->EntryIDFromSourceKey(arg2,arg3,arg4,arg5,arg6,arg7);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg7) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6));
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  {
    if(*arg7)
    MAPIFreeBuffer(*arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  {
    if(*arg7)
    MAPIFreeBuffer(*arg7);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeManageStore_GetRights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  ULONG temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeManageStore_GetRights",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetRights" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeManageStore_GetRights" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeManageStore_GetRights" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetRights(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeManageStore_GetMailboxTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  LPTSTR arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IMAPITable *temp3 ;
  unsigned int fl4 ;
  int ecode4 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeManageStore_GetMailboxTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetMailboxTable" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_GetMailboxTable" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IExchangeManageStore_GetMailboxTable" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMailboxTable(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeManageStore_GetPublicFolderTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  LPTSTR arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IMAPITable *temp3 ;
  unsigned int fl4 ;
  int ecode4 ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeManageStore_GetPublicFolderTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetPublicFolderTable" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_GetPublicFolderTable" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IExchangeManageStore_GetPublicFolderTable" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetPublicFolderTable(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IExchangeManageStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IExchangeManageStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeManageStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeManageStore" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IExchangeManageStore(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IExchangeManageStore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IExchangeManageStore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IExchangeModifyTable_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPMAPIERROR temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeModifyTable_GetLastError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPMAPIERROR(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeModifyTable_GetTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IExchangeModifyTable_GetTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_GetTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_GetTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IExchangeModifyTable_ModifyTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
  ULONG arg2 ;
  LPROWLIST arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IExchangeModifyTable_ModifyTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_ModifyTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_ModifyTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPROWLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ModifyTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IExchangeModifyTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IExchangeModifyTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IExchangeModifyTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeModifyTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
  }
  arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IExchangeModifyTable(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IExchangeModifyTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IExchangeModifyTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExchangeImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ExchangeImportContentsChanges *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ExchangeImportContentsChanges",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ExchangeImportContentsChanges *)new SwigDirector_ExchangeImportContentsChanges(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExchangeImportContentsChanges, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExchangeImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeImportContentsChanges *arg1 = (ExchangeImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExchangeImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExchangeImportContentsChanges" "', argument " "1"" of type '" "ExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_ExchangeImportContentsChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ExchangeImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeImportContentsChanges *arg1 = (ExchangeImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ExchangeImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ExchangeImportContentsChanges" "', argument " "1"" of type '" "ExchangeImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ExchangeImportContentsChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ExchangeImportContentsChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExchangeImportHierarchyChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ExchangeImportHierarchyChanges *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ExchangeImportHierarchyChanges",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ExchangeImportHierarchyChanges *)new SwigDirector_ExchangeImportHierarchyChanges(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExchangeImportHierarchyChanges, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExchangeImportHierarchyChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeImportHierarchyChanges *arg1 = (ExchangeImportHierarchyChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExchangeImportHierarchyChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeImportHierarchyChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExchangeImportHierarchyChanges" "', argument " "1"" of type '" "ExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeImportHierarchyChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_ExchangeImportHierarchyChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ExchangeImportHierarchyChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeImportHierarchyChanges *arg1 = (ExchangeImportHierarchyChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ExchangeImportHierarchyChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeImportHierarchyChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ExchangeImportHierarchyChanges" "', argument " "1"" of type '" "ExchangeImportHierarchyChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeImportHierarchyChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ExchangeImportHierarchyChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ExchangeImportHierarchyChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExchangeExportChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ExchangeExportChanges *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ExchangeExportChanges",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ExchangeExportChanges *)new SwigDirector_ExchangeExportChanges(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExchangeExportChanges, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExchangeExportChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeExportChanges *arg1 = (ExchangeExportChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExchangeExportChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeExportChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExchangeExportChanges" "', argument " "1"" of type '" "ExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeExportChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_ExchangeExportChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ExchangeExportChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExchangeExportChanges *arg1 = (ExchangeExportChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ExchangeExportChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExchangeExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ExchangeExportChanges" "', argument " "1"" of type '" "ExchangeExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< ExchangeExportChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ExchangeExportChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ExchangeExportChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECServiceAdmin_CreateStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPENTRYID *arg6 = (LPENTRYID *) 0 ;
  ULONG *arg7 = (ULONG *) 0 ;
  LPENTRYID *arg8 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  ULONG cbEntryID5 = 0 ;
  LPENTRYID lpEntryID5 = NULL ;
  ULONG cbEntryID7 = 0 ;
  LPENTRYID lpEntryID7 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg5 = &cbEntryID5; arg6 = &lpEntryID5;
  }
  {
    arg7 = &cbEntryID7; arg8 = &lpEntryID7;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_CreateStore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_CreateStore" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_CreateStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg6) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5));
    }
  }
  {
    if (*arg8) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg8,*arg7));
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  {
    if(*arg8)
    MAPIFreeBuffer(*arg8);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  {
    if(*arg8)
    MAPIFreeBuffer(*arg8);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_CreateEmptyStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  ULONG arg5 ;
  ULONG *arg6 = (ULONG *) 0 ;
  LPENTRYID *arg7 = (LPENTRYID *) 0 ;
  ULONG *arg8 = (ULONG *) 0 ;
  LPENTRYID *arg9 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  int res6 ;
  char *buf6 = 0 ;
  size_t size6 ;
  int alloc6 = 0 ;
  ULONG cbEntryID6 = 0 ;
  LPENTRYID lpEntryID6 = NULL ;
  LPENTRYID lpOrig6 = NULL ;
  int res8 ;
  char *buf8 = 0 ;
  size_t size8 ;
  int alloc8 = 0 ;
  ULONG cbEntryID8 = 0 ;
  LPENTRYID lpEntryID8 = NULL ;
  LPENTRYID lpOrig8 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IECServiceAdmin_CreateEmptyStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj3, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    arg6 = &cbEntryID6; arg7 = &lpEntryID6;
    
    res6 = SWIG_AsCharPtrAndSize(obj4, &buf6, &size6, &alloc6);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "6"" of type '" "ULONG *""'");
    }
    if(buf6 == NULL) {
      *arg6 = 0;
      *arg7 = NULL;
    } else {
      *arg6 = static_cast< ULONG >(size6 - 1);
      *arg7 = reinterpret_cast< LPENTRYID >(buf6);
    }
    lpOrig6 = *arg7;
  }
  {
    arg8 = &cbEntryID8; arg9 = &lpEntryID8;
    
    res8 = SWIG_AsCharPtrAndSize(obj5, &buf8, &size8, &alloc8);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "8"" of type '" "ULONG *""'");
    }
    if(buf8 == NULL) {
      *arg8 = 0;
      *arg9 = NULL;
    } else {
      *arg8 = static_cast< ULONG >(size8 - 1);
      *arg9 = reinterpret_cast< LPENTRYID >(buf8);
    }
    lpOrig8 = *arg9;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateEmptyStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg7) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6));
    }
  }
  {
    if (*arg9) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg9,*arg8));
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(!lpOrig6 && arg7 && *arg7)
    MAPIFreeBuffer(*arg7);
  }
  {
    if(!lpOrig8 && arg9 && *arg9)
    MAPIFreeBuffer(*arg9);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  {
    if(!lpOrig6 && arg7 && *arg7)
    MAPIFreeBuffer(*arg7);
  }
  {
    if(!lpOrig8 && arg9 && *arg9)
    MAPIFreeBuffer(*arg9);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_ResolveStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPGUID arg2 ;
  ULONG *arg3 = (ULONG *) 0 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  ULONG temp3 ;
  int res3 = SWIG_TMPOBJ ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg3 = &temp3;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_ResolveStore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_ResolveStore" "', argument " "2"" of type '" "LPGUID""'");
    }
    arg2 = reinterpret_cast< LPGUID >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveStore(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags));
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_HookStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  LPGUID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  int res5 ;
  char *buf5 ;
  size_t size5 ;
  int alloc5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECServiceAdmin_HookStore",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_HookStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_HookStore" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_HookStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    alloc5 = SWIG_OLDOBJ;
    res5 = SWIG_AsCharPtrAndSize(obj3, &buf5, &size5, &alloc5);
    if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
      // size5-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IECServiceAdmin_HookStore" "', argument " "5"" of type '" "LPGUID""'");
    }
    arg5 = reinterpret_cast< LPGUID >(buf5);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->HookStore(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_UnhookStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  LPENTRYID arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_UnhookStore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "3"" of type '" "ULONG""'");
    }
    if(buf3 == NULL) {
      arg3 = 0;
      arg4 = NULL;
    } else {
      arg3 = static_cast< ULONG >(size3 - 1);
      arg4 = reinterpret_cast< LPENTRYID >(buf3);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UnhookStore(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_RemoveStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPGUID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_RemoveStore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_RemoveStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_RemoveStore" "', argument " "2"" of type '" "LPGUID""'");
    }
    arg2 = reinterpret_cast< LPGUID >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RemoveStore(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_CreateUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECUSER arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_CreateUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECUSER)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateUser" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECUSER((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_CreateUser" "', argument " "2"" of type '" "LPECUSER""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DeleteUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_DeleteUser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteUser(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_SetUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECUSER arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_SetUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECUSER)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetUser" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECUSER((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_SetUser" "', argument " "2"" of type '" "LPECUSER""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetUser(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPECUSER *arg5 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  LPECUSER temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUser" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECUSER(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_ResolveUserName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_ResolveUserName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveUserName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveUserName" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_ResolveUserName" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveUserName(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetUserList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECUSER *arg6 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECUSER lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetUserList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserList" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetUserList(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECUSER(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetSendAsList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECUSER *arg6 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECUSER lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetSendAsList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetSendAsList(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECUSER(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_AddSendAsUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_AddSendAsUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddSendAsUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DelSendAsUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_DelSendAsUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DelSendAsUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetUserClientUpdateStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPECUSERCLIENTUPDATESTATUS *arg5 = (LPECUSERCLIENTUPDATESTATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  LPECUSERCLIENTUPDATESTATUS temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetUserClientUpdateStatus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetUserClientUpdateStatus(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECUSERCLIENTUPDATESTATUS(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_RemoveAllObjects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_RemoveAllObjects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_RemoveAllObjects" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_RemoveAllObjects" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RemoveAllObjects(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_CreateGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECGROUP arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_CreateGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECGROUP)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECGROUP((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "2"" of type '" "LPECGROUP""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateGroup(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DeleteGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_DeleteGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteGroup" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteGroup(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_SetGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECGROUP arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_SetGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECGROUP)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetGroup" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECGROUP((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_SetGroup" "', argument " "2"" of type '" "LPECGROUP""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetGroup(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPECGROUP *arg5 = (LPECGROUP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  LPECGROUP temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroup" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroup" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetGroup(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECGROUP(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_ResolveGroupName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_ResolveGroupName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveGroupName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveGroupName" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_ResolveGroupName" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveGroupName(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetGroupList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECGROUP *arg6 = (LPECGROUP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECGROUP lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetGroupList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetGroupList(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECGROUP(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DeleteGroupUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_DeleteGroupUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteGroupUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_AddGroupUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_AddGroupUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddGroupUser(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetUserListOfGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECUSER *arg6 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECUSER lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetUserListOfGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetUserListOfGroup(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECUSER(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetGroupListOfUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECGROUP *arg6 = (LPECGROUP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECGROUP lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetGroupListOfUser",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetGroupListOfUser(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECGROUP(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_CreateCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECCOMPANY arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_CreateCompany",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECCOMPANY)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECCOMPANY((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "2"" of type '" "LPECCOMPANY""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->CreateCompany(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DeleteCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_DeleteCompany",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteCompany" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteCompany(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_SetCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECCOMPANY arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_SetCompany",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPECCOMPANY)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetCompany" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    arg2 = Object_to_LPECCOMPANY((PyObject*)arg2, ulFlags);
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_SetCompany" "', argument " "2"" of type '" "LPECCOMPANY""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetCompany(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetCompany(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPECCOMPANY *arg5 = (LPECCOMPANY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  LPECCOMPANY temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetCompany",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetCompany" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetCompany" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetCompany(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECCOMPANY(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_ResolveCompanyName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPTSTR arg2 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  LPENTRYID *arg5 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cbEntryID4 = 0 ;
  LPENTRYID lpEntryID4 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg4 = &cbEntryID4; arg5 = &lpEntryID4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_ResolveCompanyName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveCompanyName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveCompanyName" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_ResolveCompanyName" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolveCompanyName(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg5) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4));
    }
  }
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetCompanyList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG *arg3 = (ULONG *) 0 ;
  LPECCOMPANY *arg4 = (LPECCOMPANY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  ULONG c3 ;
  LPECCOMPANY lp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp3 = NULL; arg4 = &lp3; c3 = 0; arg3 = &c3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_GetCompanyList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetCompanyList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_GetCompanyList" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetCompanyList(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECCOMPANY(*(arg4),*(arg3)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_AddCompanyToRemoteViewList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_AddCompanyToRemoteViewList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddCompanyToRemoteViewList(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DelCompanyFromRemoteViewList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_DelCompanyFromRemoteViewList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DelCompanyFromRemoteViewList(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetRemoteViewList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECCOMPANY *arg6 = (LPECCOMPANY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECCOMPANY lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetRemoteViewList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetRemoteViewList(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECCOMPANY(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_AddUserToRemoteAdminList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_AddUserToRemoteAdminList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddUserToRemoteAdminList(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DelUserFromRemoteAdminList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_DelUserFromRemoteAdminList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DelUserFromRemoteAdminList(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetRemoteAdminList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECUSER *arg6 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECUSER lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetRemoteAdminList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetRemoteAdminList(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECUSER(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_SyncUsers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_SyncUsers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SyncUsers" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SyncUsers" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SyncUsers(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetQuota(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  bool arg4 ;
  LPECQUOTA *arg5 = (LPECQUOTA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  LPECQUOTA temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetQuota",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuota" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuota" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  ecode4 = SWIG_AsVal_bool(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetQuota" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetQuota(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECQUOTA(*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg5)
    MAPIFreeBuffer(*arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_SetQuota(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPECQUOTA arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_SetQuota",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetQuota" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SetQuota" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    arg4 = Object_to_LPECQUOTA(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetQuota(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(arg4)
    MAPIFreeBuffer(arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(arg4)
    MAPIFreeBuffer(arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_AddQuotaRecipient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECServiceAdmin_AddQuotaRecipient",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj3, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "6"" of type '" "ULONG""'");
  } 
  arg6 = static_cast< ULONG >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddQuotaRecipient(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_DeleteQuotaRecipient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  LPENTRYID arg5 ;
  ULONG arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  size_t size4 ;
  int alloc4 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECServiceAdmin_DeleteQuotaRecipient",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    res4 = SWIG_AsCharPtrAndSize(obj2, &buf4, &size4, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "4"" of type '" "ULONG""'");
    }
    if(buf4 == NULL) {
      arg4 = 0;
      arg5 = NULL;
    } else {
      arg4 = static_cast< ULONG >(size4 - 1);
      arg5 = reinterpret_cast< LPENTRYID >(buf4);
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj3, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "6"" of type '" "ULONG""'");
  } 
  arg6 = static_cast< ULONG >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteQuotaRecipient(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetQuotaRecipients(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPECUSER *arg6 = (LPECUSER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG c5 ;
  LPECUSER lp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetQuotaRecipients",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetQuotaRecipients(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECUSER(*(arg6),*(arg5)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetQuotaStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  LPECQUOTASTATUS *arg4 = (LPECQUOTASTATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  LPECQUOTASTATUS temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_GetQuotaStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuotaStatus" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuotaStatus" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetQuotaStatus(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Object_from_LPECQUOTASTATUS(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_PurgeSoftDelete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_PurgeSoftDelete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_PurgeSoftDelete" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_PurgeSoftDelete" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PurgeSoftDelete(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_PurgeCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_PurgeCache",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_PurgeCache" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_PurgeCache" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->PurgeCache(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_OpenUserStoresTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_OpenUserStoresTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_OpenUserStoresTable" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_OpenUserStoresTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenUserStoresTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetServerDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPECSVRNAMELIST arg2 ;
  ULONG arg3 ;
  LPECSERVERLIST *arg4 = (LPECSERVERLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  LPECSERVERLIST temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECServiceAdmin_GetServerDetails",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetServerDetails" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = List_to_LPECSVRNAMELIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_GetServerDetails" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetServerDetails(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, List_from_LPECSERVERLIST(*(arg4)));
    if(PyErr_Occurred()) goto fail;
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_ResolvePseudoUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool *arg4 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *lpStr3 = NULL ;
  bool bBool4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg3 = &lpStr3;
  }
  {
    arg4 = &bBool4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_ResolvePseudoUrl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolvePseudoUrl" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_ResolvePseudoUrl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ResolvePseudoUrl(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr((char*)*arg3));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((int)*arg4));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetPublicStoreEntryID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  ULONG arg2 ;
  ULONG *arg3 = (ULONG *) 0 ;
  LPENTRYID *arg4 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  ULONG cbEntryID3 = 0 ;
  LPENTRYID lpEntryID3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg3 = &cbEntryID3; arg4 = &lpEntryID3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:IECServiceAdmin_GetPublicStoreEntryID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetPublicStoreEntryID" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_GetPublicStoreEntryID" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetPublicStoreEntryID(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg4) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg4,*arg3));
    }
  }
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg4)
    MAPIFreeBuffer(*arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECServiceAdmin_GetArchiveStoreEntryID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  LPTSTR arg2 ;
  LPTSTR arg3 ;
  ULONG arg4 ;
  ULONG *arg5 = (ULONG *) 0 ;
  LPENTRYID *arg6 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  ULONG cbEntryID5 = 0 ;
  LPENTRYID lpEntryID5 = NULL ;
  std::string strInput2 ;
  std::wstring wstrInput2 ;
  std::string strInput3 ;
  std::wstring wstrInput3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg5 = &cbEntryID5; arg6 = &lpEntryID5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECServiceAdmin_GetArchiveStoreEntryID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    arg2 = (LPTSTR)obj1;
  }
  {
    arg3 = (LPTSTR)obj2;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj3, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    PyObject *o = (PyObject *)arg2;
    if(o == Py_None)
    arg2 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput2.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg2 = (LPTSTR)wstrInput2.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput2.assign(input, size);
        
        arg2 = (LPTSTR)strInput2.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "2"" of type '" "LPTSTR""'");
    }
    
  }
  {
    PyObject *o = (PyObject *)arg3;
    if(o == Py_None)
    arg3 = NULL;
    else {
      if(ulFlags & MAPI_UNICODE) {
        if(PyUnicode_Check(o)) {
          wstrInput3.assign((wchar_t*)PyUnicode_AsUnicode(o), PyUnicode_GetSize(o));
          arg3 = (LPTSTR)wstrInput3.c_str();
        } else {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag passed but passed parameter is not a unicode string");
        }
      } else {
        if(PyUnicode_Check(o)) {
          PyErr_SetString(PyExc_RuntimeError, "MAPI_UNICODE flag not passed but passed parameter is a unicode string");
        }
        char *input;
        Py_ssize_t size;
        
        PyString_AsStringAndSize(o, &input, &size);
        strInput3.assign(input, size);
        
        arg3 = (LPTSTR)strInput3.c_str();
      }
    }
    
    if(PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ERROR), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "3"" of type '" "LPTSTR""'");
    }
    
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetArchiveStoreEntryID(arg2,arg3,arg4,arg5,arg6);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg6) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5));
    }
  }
  {
    
  }
  {
    
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    
  }
  {
    
  }
  {
    if(*arg6)
    MAPIFreeBuffer(*arg6);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECServiceAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECServiceAdmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECServiceAdmin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECServiceAdmin" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
  }
  arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECServiceAdmin(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECServiceAdmin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECServiceAdmin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECSpooler_GetMasterOutgoingTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSpooler *arg1 = (IECSpooler *) 0 ;
  ULONG arg2 ;
  IMAPITable **arg3 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  IMAPITable *temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  temp3 = NULL; arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECSpooler_GetMasterOutgoingTable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSpooler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSpooler_GetMasterOutgoingTable" "', argument " "1"" of type '" "IECSpooler *""'"); 
  }
  arg1 = reinterpret_cast< IECSpooler * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECSpooler_GetMasterOutgoingTable" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetMasterOutgoingTable(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECSpooler_DeleteFromMasterOutgoingTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSpooler *arg1 = (IECSpooler *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  ULONG arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned int fl4 ;
  int ecode4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECSpooler_DeleteFromMasterOutgoingTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSpooler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "1"" of type '" "IECSpooler *""'"); 
  }
  arg1 = reinterpret_cast< IECSpooler * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "2"" of type '" "ULONG""'");
    }
    if(buf2 == NULL) {
      arg2 = 0;
      arg3 = NULL;
    } else {
      arg2 = static_cast< ULONG >(size2 - 1);
      arg3 = reinterpret_cast< LPENTRYID >(buf2);
    }
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->DeleteFromMasterOutgoingTable(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECSpooler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSpooler *arg1 = (IECSpooler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECSpooler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSpooler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECSpooler" "', argument " "1"" of type '" "IECSpooler *""'"); 
  }
  arg1 = reinterpret_cast< IECSpooler * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECSpooler(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECSpooler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECSpooler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECTestProtocol_TestPerform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char **arg4 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECTestProtocol_TestPerform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestPerform" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
  }
  arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestPerform" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    /* Check if is a list */
    if (PyList_Check(obj2)) {
      int i;
      arg3 = PyList_Size(obj2);
      arg4 = (char **) malloc((arg3+1)*sizeof(char *));
      for (i = 0; i < arg3; i++) {
        PyObject *o = PyList_GetItem(obj2,i);
        if (PyString_Check(o))
        arg4[i] = PyString_AsString(PyList_GetItem(obj2,i));
        else {
          PyErr_SetString(PyExc_TypeError,"list must contain strings");
          free(arg4);
          return NULL;
        }
      }
      arg4[i] = 0;
    } else {
      PyErr_SetString(PyExc_TypeError,"not a list");
      return NULL;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->TestPerform(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((void *)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((void *)arg4);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECTestProtocol_TestSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECTestProtocol_TestSet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestSet" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
  }
  arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestSet" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECTestProtocol_TestSet" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->TestSet(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECTestProtocol_TestGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *temp3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECTestProtocol_TestGet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestGet" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
  }
  arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestGet" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->TestGet(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (*arg3) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(*arg3));
    MAPIFreeBuffer(*arg3);					  	     
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECTestProtocol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECTestProtocol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECTestProtocol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECTestProtocol" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
  }
  arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECTestProtocol(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECTestProtocol_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECTestProtocol, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECMultiStoreTable_OpenMultiStoreTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECMultiStoreTable *arg1 = (IECMultiStoreTable *) 0 ;
  LPENTRYLIST arg2 ;
  ULONG arg3 ;
  IMAPITable **arg4 = (IMAPITable **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  IMAPITable *temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  ULONG ulFlags = 0;
  temp4 = NULL; arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECMultiStoreTable_OpenMultiStoreTable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECMultiStoreTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECMultiStoreTable_OpenMultiStoreTable" "', argument " "1"" of type '" "IECMultiStoreTable *""'"); 
  }
  arg1 = reinterpret_cast< IECMultiStoreTable * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECMultiStoreTable_OpenMultiStoreTable" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OpenMultiStoreTable(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECMultiStoreTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECMultiStoreTable *arg1 = (IECMultiStoreTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECMultiStoreTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECMultiStoreTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECMultiStoreTable" "', argument " "1"" of type '" "IECMultiStoreTable *""'"); 
  }
  arg1 = reinterpret_cast< IECMultiStoreTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECMultiStoreTable(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECMultiStoreTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECMultiStoreTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECLicense_LicenseAuth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECLicense *arg1 = (IECLicense *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned int arg3 ;
  unsigned char **arg4 = (unsigned char **) 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 ;
  int alloc2 = 0 ;
  unsigned char *temp4 = 0 ;
  unsigned int tempn4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4; arg5 = &tempn4;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECLicense_LicenseAuth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECLicense, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECLicense_LicenseAuth" "', argument " "1"" of type '" "IECLicense *""'"); 
  }
  arg1 = reinterpret_cast< IECLicense * >(argp1);
  {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECLicense_LicenseAuth" "', argument " "2"" of type '" "unsigned char *""'");
    }
    if(buf2 == NULL) {
      arg2 = NULL;
      arg3 = 0;
    } else {
      arg2 = reinterpret_cast< unsigned char * >(buf2);
      arg3 = static_cast< unsigned int >(size2 - 1);
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->LicenseAuth(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (*arg4) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromBytePtrAndSize(*arg4,*arg5));
    delete[] *arg4;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECLicense *arg1 = (IECLicense *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECLicense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECLicense, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECLicense" "', argument " "1"" of type '" "IECLicense *""'"); 
  }
  arg1 = reinterpret_cast< IECLicense * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECLicense(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECLicense_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECLicense, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECExportChanges_GetChangeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECExportChanges *arg1 = (IECExportChanges *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:IECExportChanges_GetChangeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_GetChangeCount" "', argument " "1"" of type '" "IECExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECExportChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetChangeCount(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECExportChanges_SetMessageInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECExportChanges *arg1 = (IECExportChanges *) 0 ;
  IID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECExportChanges_SetMessageInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_SetMessageInterface" "', argument " "1"" of type '" "IECExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECExportChanges * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECExportChanges_SetMessageInterface" "', argument " "2"" of type '" "IID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECExportChanges_SetMessageInterface" "', argument " "2"" of type '" "IID""'");
    } else {
      IID * temp = reinterpret_cast< IID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetMessageInterface(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECExportChanges_SetLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECExportChanges *arg1 = (IECExportChanges *) 0 ;
  ECLogger *arg2 = (ECLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  ECSimpleLogger *sl2 ;
  ECLoggerProxy *proxy2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECExportChanges_SetLogger",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_SetLogger" "', argument " "1"" of type '" "IECExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECExportChanges * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, (void **)&sl2, SWIGTYPE_p_ECSimpleLogger, 0 | 0);
    if(!SWIG_IsOK(res2))
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECExportChanges_SetLogger" "', argument " "2"" of type '" "ECSimpleLogger""'");
    
    ECLoggerProxy::Create(EC_LOGLEVEL_DEBUG, sl2, &proxy2);
    arg2 = proxy2;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetLogger(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    arg2->Release();
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    arg2->Release();
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECExportChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECExportChanges *arg1 = (IECExportChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECExportChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECExportChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECExportChanges" "', argument " "1"" of type '" "IECExportChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECExportChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECExportChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECExportChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECExportChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UnwrapObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMAPIProp *arg1 = (IMAPIProp *) 0 ;
  LPCIID arg2 ;
  LPUNKNOWN *arg3 = (LPUNKNOWN *) 0 ;
  int res1 ;
  LPUNKNOWN temp3 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  LPCIID &__lpiid = arg2;
  {
    arg3 = (LPUNKNOWN *)&temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:UnwrapObject",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "BUG"); 
    }
    
    arg2 = IIDFromType(TypeFromObject(obj0));
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = UnwrapObject(arg1,arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg3), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_GetLastError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  HRESULT arg2 ;
  ULONG arg3 ;
  LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECChangeAdvisor_GetLastError",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
  } 
  arg2 = static_cast< HRESULT >(val2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_LPMAPIERROR, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "4"" of type '" "LPMAPIERROR *""'"); 
  }
  arg4 = reinterpret_cast< LPMAPIERROR * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetLastError(arg2,arg3,arg4);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_Config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  GUID *arg3 = (GUID *) 0 ;
  IECChangeAdviseSink *arg4 = (IECChangeAdviseSink *) 0 ;
  ULONG arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int fl5 ;
  int ecode5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IECChangeAdvisor_Config",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_Config" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECChangeAdvisor_Config" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GUID, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECChangeAdvisor_Config" "', argument " "3"" of type '" "GUID *""'"); 
  }
  arg3 = reinterpret_cast< GUID * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IECChangeAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECChangeAdvisor_Config" "', argument " "4"" of type '" "IECChangeAdviseSink *""'"); 
  }
  arg4 = reinterpret_cast< IECChangeAdviseSink * >(argp4);
  {
    ecode5 = SWIG_AsVal_unsigned_SS_int (obj4, &fl5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IECChangeAdvisor_Config" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = fl5;
    ulFlags = fl5;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->Config(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_UpdateState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECChangeAdvisor_UpdateState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_UpdateState" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECChangeAdvisor_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UpdateState(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_AddKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  LPENTRYLIST arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECChangeAdvisor_AddKeys",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_AddKeys" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->AddKeys(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_RemoveKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  LPENTRYLIST arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECChangeAdvisor_RemoveKeys",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_RemoveKeys" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  {
    arg2 = List_to_LPENTRYLIST(obj1);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->RemoveKeys(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg2)
    MAPIFreeBuffer(arg2);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_IsMonitoringSyncId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECChangeAdvisor_IsMonitoringSyncId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_IsMonitoringSyncId" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_IsMonitoringSyncId" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->IsMonitoringSyncId(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECChangeAdvisor_UpdateSyncState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  ULONG arg2 ;
  ULONG arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECChangeAdvisor_UpdateSyncState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->UpdateSyncState(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECChangeAdvisor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECChangeAdvisor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdvisor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECChangeAdvisor" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECChangeAdvisor(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECChangeAdvisor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECChangeAdvisor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECChangeAdviseSink_OnNotify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdviseSink *arg1 = (IECChangeAdviseSink *) 0 ;
  ULONG arg2 ;
  LPENTRYLIST arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int fl2 ;
  int ecode2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  arg3 = NULL;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECChangeAdviseSink_OnNotify",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdviseSink_OnNotify" "', argument " "1"" of type '" "IECChangeAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdviseSink * >(argp1);
  {
    ecode2 = SWIG_AsVal_unsigned_SS_int (obj1, &fl2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdviseSink_OnNotify" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = fl2;
    ulFlags = fl2;
  }
  {
    arg3 = List_to_LPENTRYLIST(obj2);
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->OnNotify(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer(arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECChangeAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECChangeAdviseSink *arg1 = (IECChangeAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECChangeAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECChangeAdviseSink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECChangeAdviseSink" "', argument " "1"" of type '" "IECChangeAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< IECChangeAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECChangeAdviseSink(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECChangeAdviseSink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECChangeAdviseSink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECImportContentsChanges_ConfigForConversionStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
  IStream *arg2 = (IStream *) 0 ;
  ULONG arg3 ;
  ULONG arg4 ;
  LPSPropValue arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int fl3 ;
  int ecode3 ;
  ULONG cArray4 = 0 ;
  LPSPropValue lpArray4 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  ULONG ulFlags = 0;
  {
    arg4 = 0;
    arg5 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IECImportContentsChanges_ConfigForConversionStream",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "2"" of type '" "IStream *""'"); 
  }
  arg2 = reinterpret_cast< IStream * >(argp2);
  {
    ecode3 = SWIG_AsVal_unsigned_SS_int (obj2, &fl3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = fl3;
    ulFlags = fl3;
  }
  {
    ULONG len;
    arg5 = List_to_LPSPropValue(obj3, &len);
    arg4 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ConfigForConversionStream(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if(arg5)
    MAPIFreeBuffer((void *)arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg5)
    MAPIFreeBuffer((void *)arg5);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECImportContentsChanges_ImportMessageChangeAsAStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
  ULONG arg2 ;
  LPSPropValue arg3 ;
  ULONG arg4 ;
  IStream **arg5 = (IStream **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cArray2 = 0 ;
  LPSPropValue lpArray2 = NULL ;
  unsigned int fl4 ;
  int ecode4 ;
  IStream *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  ULONG ulFlags = 0;
  temp5 = NULL; arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECImportContentsChanges_ImportMessageChangeAsAStream",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_ImportMessageChangeAsAStream" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
  {
    ULONG len;
    arg3 = List_to_LPSPropValue(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int (obj2, &fl4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECImportContentsChanges_ImportMessageChangeAsAStream" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = fl4;
    ulFlags = fl4;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->ImportMessageChangeAsAStream(arg2,arg3,arg4,arg5);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER));
  }
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECImportContentsChanges_SetMessageInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
  IID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 ;
  size_t size2 ;
  int alloc2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:IECImportContentsChanges_SetMessageInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_SetMessageInterface" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
  {
    alloc2 = SWIG_OLDOBJ;
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
      // size2-1 because we get \0 terminated string
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECImportContentsChanges_SetMessageInterface" "', argument " "2"" of type '" "IID const &""'");
    }
    arg2 = reinterpret_cast< IID * >(buf2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetMessageInterface((IID const &)*arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECImportContentsChanges" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECImportContentsChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECImportContentsChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECImportContentsChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IECSingleInstance_GetSingleInstanceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  LPENTRYID *arg3 = (LPENTRYID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ULONG cbEntryID2 = 0 ;
  LPENTRYID lpEntryID2 = NULL ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = &cbEntryID2; arg3 = &lpEntryID2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:IECSingleInstance_GetSingleInstanceId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSingleInstance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSingleInstance_GetSingleInstanceId" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
  }
  arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->GetSingleInstanceId(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    if (*arg3) {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2));
    }
  }
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(*arg3)
    MAPIFreeBuffer(*arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IECSingleInstance_SetSingleInstanceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
  ULONG arg2 ;
  LPENTRYID arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:IECSingleInstance_SetSingleInstanceId",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSingleInstance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
  }
  arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_LPENTRYID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "3"" of type '" "LPENTRYID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "3"" of type '" "LPENTRYID""'");
    } else {
      LPENTRYID * temp = reinterpret_cast< LPENTRYID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSingleInstanceId(arg2,arg3);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IECSingleInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IECSingleInstance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IECSingleInstance, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECSingleInstance" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
  }
  arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_IECSingleInstance(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *IECSingleInstance_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IECSingleInstance, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ECChangeAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ECChangeAdviseSink *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ECChangeAdviseSink",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ECChangeAdviseSink *)new SwigDirector_ECChangeAdviseSink(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ECChangeAdviseSink, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ECChangeAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECChangeAdviseSink *arg1 = (ECChangeAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ECChangeAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECChangeAdviseSink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ECChangeAdviseSink" "', argument " "1"" of type '" "ECChangeAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< ECChangeAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_ECChangeAdviseSink(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ECChangeAdviseSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECChangeAdviseSink *arg1 = (ECChangeAdviseSink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ECChangeAdviseSink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECChangeAdviseSink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ECChangeAdviseSink" "', argument " "1"" of type '" "ECChangeAdviseSink *""'"); 
  }
  arg1 = reinterpret_cast< ECChangeAdviseSink * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ECChangeAdviseSink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ECChangeAdviseSink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ECImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ECImportContentsChanges *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ECImportContentsChanges",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ECImportContentsChanges *)new SwigDirector_ECImportContentsChanges(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ECImportContentsChanges, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ECImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECImportContentsChanges *arg1 = (ECImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ECImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ECImportContentsChanges" "', argument " "1"" of type '" "ECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< ECImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_ECImportContentsChanges(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ECImportContentsChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECImportContentsChanges *arg1 = (ECImportContentsChanges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ECImportContentsChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECImportContentsChanges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ECImportContentsChanges" "', argument " "1"" of type '" "ECImportContentsChanges *""'"); 
  }
  arg1 = reinterpret_cast< ECImportContentsChanges * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ECImportContentsChanges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ECImportContentsChanges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ECSimpleLogger_Log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSimpleLogger *arg1 = (ECSimpleLogger *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OOO:ECSimpleLogger_Log",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSimpleLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSimpleLogger_Log" "', argument " "1"" of type '" "ECSimpleLogger *""'"); 
  }
  arg1 = reinterpret_cast< ECSimpleLogger * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSimpleLogger_Log" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ECSimpleLogger_Log" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        mark_call_from_python();
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("ECSimpleLogger::Log");
        } else {
          result = (arg1)->Log(arg2,(char const *)arg3);
        }
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ECSimpleLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  ECSimpleLogger *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:new_ECSimpleLogger",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (ECSimpleLogger *)new SwigDirector_ECSimpleLogger(arg1); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ECSimpleLogger, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ECSimpleLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSimpleLogger *arg1 = (ECSimpleLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ECSimpleLogger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSimpleLogger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ECSimpleLogger" "', argument " "1"" of type '" "ECSimpleLogger *""'"); 
  }
  arg1 = reinterpret_cast< ECSimpleLogger * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete arg1;
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ECSimpleLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSimpleLogger *arg1 = (ECSimpleLogger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ECSimpleLogger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSimpleLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ECSimpleLogger" "', argument " "1"" of type '" "ECSimpleLogger *""'"); 
  }
  arg1 = reinterpret_cast< ECSimpleLogger * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ECSimpleLogger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ECSimpleLogger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ULONG arg2 ;
  LPCIID arg3 ;
  ULONG cArray2 = 0 ;
  LPCIID lpArray2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stream *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    arg2 = 0;
    arg3 = NULL;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Stream",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    ULONG len;
    arg3 = List_to_LPCIID(obj1, &len);
    arg2 = len;
    if(PyErr_Occurred()) goto fail;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        if ( arg1 != Py_None ) {
          /* subclassed */
          result = (Stream *)new SwigDirector_Stream(arg1,arg2,arg3); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stream, SWIG_POINTER_NEW |  0 );
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    if(arg3)
    MAPIFreeBuffer((void *)arg3);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stream_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stream *arg1 = (Stream *) 0 ;
  void *arg2 = (void *) 0 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:Stream_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stream_Read" "', argument " "1"" of type '" "Stream *""'"); 
  }
  arg1 = reinterpret_cast< Stream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Stream_Read" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Stream_Read" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        mark_call_from_python();
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("Stream::Read");
        } else {
          result = (arg1)->Read(arg2,arg3,arg4);
        }
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stream_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stream *arg1 = (Stream *) 0 ;
  void *arg2 = (void *) 0 ;
  ULONG arg3 ;
  ULONG *arg4 = (ULONG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  ULONG temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OOO:Stream_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stream_Write" "', argument " "1"" of type '" "Stream *""'"); 
  }
  arg1 = reinterpret_cast< Stream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Stream_Write" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Stream_Write" "', argument " "3"" of type '" "ULONG""'");
  } 
  arg3 = static_cast< ULONG >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        mark_call_from_python();
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("Stream::Write");
        } else {
          result = (arg1)->Write((void const *)arg2,arg3,arg4);
        }
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_unsigned_SS_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags));
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stream *arg1 = (Stream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Stream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Stream" "', argument " "1"" of type '" "Stream *""'"); 
  }
  arg1 = reinterpret_cast< Stream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete_Stream(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stream *arg1 = (Stream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Stream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Stream" "', argument " "1"" of type '" "Stream *""'"); 
  }
  arg1 = reinterpret_cast< Stream * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Stream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ECSyncSettings_GetInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":ECSyncSettings_GetInstance")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (ECSyncSettings *)ECSyncSettings::GetInstance();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SyncLogEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_SyncLogEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SyncLogEnabled" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)((ECSyncSettings const *)arg1)->SyncLogEnabled();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SyncLogLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_SyncLogLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SyncLogLevel" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ((ECSyncSettings const *)arg1)->SyncLogLevel();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_ContinuousLogging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_ContinuousLogging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_ContinuousLogging" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)((ECSyncSettings const *)arg1)->ContinuousLogging();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SyncStreamEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_SyncStreamEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SyncStreamEnabled" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)((ECSyncSettings const *)arg1)->SyncStreamEnabled();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_ChangeNotificationsEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_ChangeNotificationsEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_ChangeNotificationsEnabled" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)((ECSyncSettings const *)arg1)->ChangeNotificationsEnabled();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_StateCollectorEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_StateCollectorEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_StateCollectorEnabled" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)((ECSyncSettings const *)arg1)->StateCollectorEnabled();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_StreamTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_StreamTimeout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_StreamTimeout" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ((ECSyncSettings const *)arg1)->StreamTimeout();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_StreamBufferSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_StreamBufferSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_StreamBufferSize" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ((ECSyncSettings const *)arg1)->StreamBufferSize();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_StreamBatchSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncSettings_StreamBatchSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_StreamBatchSize" "', argument " "1"" of type '" "ECSyncSettings const *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ((ECSyncSettings const *)arg1)->StreamBatchSize();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_EnableSyncLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_EnableSyncLog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_EnableSyncLog" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_EnableSyncLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (bool)(arg1)->EnableSyncLog(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SetSyncLogLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_SetSyncLogLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SetSyncLogLevel" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_SetSyncLogLevel" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSyncLogLevel(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SetSyncOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_SetSyncOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SetSyncOptions" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_SetSyncOptions" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetSyncOptions(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SetStreamTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_SetStreamTimeout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SetStreamTimeout" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_SetStreamTimeout" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetStreamTimeout(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SetStreamBufferSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_SetStreamBufferSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SetStreamBufferSize" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_SetStreamBufferSize" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetStreamBufferSize(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncSettings_SetStreamBatchSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  ULONG arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ULONG result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"OO:ECSyncSettings_SetStreamBatchSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncSettings_SetStreamBatchSize" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ECSyncSettings_SetStreamBatchSize" "', argument " "2"" of type '" "ULONG""'");
  } 
  arg2 = static_cast< ULONG >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (arg1)->SetStreamBatchSize(arg2);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ECSyncSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncSettings *arg1 = (ECSyncSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ECSyncSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ECSyncSettings" "', argument " "1"" of type '" "ECSyncSettings *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncSettings * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete arg1;
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ECSyncSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ECSyncSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ECSyncLog_GetLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECLogger **arg1 = (ECLogger **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncLog_GetLogger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_ECLogger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncLog_GetLogger" "', argument " "1"" of type '" "ECLogger **""'"); 
  }
  arg1 = reinterpret_cast< ECLogger ** >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ECSyncLog::GetLogger(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ECSyncLog_SetLogger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECLogger *arg1 = (ECLogger *) 0 ;
  int res1 ;
  ECSimpleLogger *sl1 ;
  ECLoggerProxy *proxy1 ;
  PyObject * obj0 = 0 ;
  HRESULT result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:ECSyncLog_SetLogger",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, (void **)&sl1, SWIGTYPE_p_ECSimpleLogger, 0 | 0);
    if(!SWIG_IsOK(res1))
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ECSyncLog_SetLogger" "', argument " "1"" of type '" "ECSimpleLogger""'");
    
    ECLoggerProxy::Create(EC_LOGLEVEL_DEBUG, sl1, &proxy1);
    arg1 = proxy1;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = ECSyncLog::SetLogger(arg1);
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    resultobj = Py_None;
    Py_INCREF(Py_None);
    if(FAILED(result)) {
      DoException(result);
      SWIG_fail;
    }
  }
  {
    arg1->Release();
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  {
    arg1->Release();
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ECSyncLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncLog *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)":new_ECSyncLog")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        result = (ECSyncLog *)new ECSyncLog();
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ECSyncLog, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ECSyncLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ECSyncLog *arg1 = (ECSyncLog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ECSyncLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ECSyncLog, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ECSyncLog" "', argument " "1"" of type '" "ECSyncLog *""'"); 
  }
  arg1 = reinterpret_cast< ECSyncLog * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      try {
        mark_call_from_python();
        delete arg1;
        unmark_call_from_python();
      } catch (const Swig::DirectorException &) {
        unmark_call_from_python();
        SWIG_fail;
      }
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ECSyncLog_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ECSyncLog, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"IUnknown_QueryInterface", _wrap_IUnknown_QueryInterface, METH_VARARGS, NULL},
	 { (char *)"delete_IUnknown", _wrap_delete_IUnknown, METH_VARARGS, NULL},
	 { (char *)"IUnknown_swigregister", IUnknown_swigregister, METH_VARARGS, NULL},
	 { (char *)"ISequentialStream_Write", _wrap_ISequentialStream_Write, METH_VARARGS, NULL},
	 { (char *)"ISequentialStream_Read", _wrap_ISequentialStream_Read, METH_VARARGS, NULL},
	 { (char *)"delete_ISequentialStream", _wrap_delete_ISequentialStream, METH_VARARGS, NULL},
	 { (char *)"ISequentialStream_swigregister", ISequentialStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"IStream_Seek", _wrap_IStream_Seek, METH_VARARGS, NULL},
	 { (char *)"IStream_SetSize", _wrap_IStream_SetSize, METH_VARARGS, NULL},
	 { (char *)"IStream_CopyTo", _wrap_IStream_CopyTo, METH_VARARGS, NULL},
	 { (char *)"IStream_Commit", _wrap_IStream_Commit, METH_VARARGS, NULL},
	 { (char *)"IStream_Revert", _wrap_IStream_Revert, METH_VARARGS, NULL},
	 { (char *)"IStream_LockRegion", _wrap_IStream_LockRegion, METH_VARARGS, NULL},
	 { (char *)"IStream_UnlockRegion", _wrap_IStream_UnlockRegion, METH_VARARGS, NULL},
	 { (char *)"IStream_Stat", _wrap_IStream_Stat, METH_VARARGS, NULL},
	 { (char *)"IStream_Clone", _wrap_IStream_Clone, METH_VARARGS, NULL},
	 { (char *)"new_IStream", _wrap_new_IStream, METH_VARARGS, NULL},
	 { (char *)"delete_IStream", _wrap_delete_IStream, METH_VARARGS, NULL},
	 { (char *)"IStream_swigregister", IStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_GetLastError", _wrap_IMAPIProp_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_SaveChanges", _wrap_IMAPIProp_SaveChanges, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_GetProps", _wrap_IMAPIProp_GetProps, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_GetPropList", _wrap_IMAPIProp_GetPropList, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_OpenProperty", _wrap_IMAPIProp_OpenProperty, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_SetProps", _wrap_IMAPIProp_SetProps, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_DeleteProps", _wrap_IMAPIProp_DeleteProps, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_CopyTo", _wrap_IMAPIProp_CopyTo, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_CopyProps", _wrap_IMAPIProp_CopyProps, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_GetNamesFromIDs", _wrap_IMAPIProp_GetNamesFromIDs, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_GetIDsFromNames", _wrap_IMAPIProp_GetIDsFromNames, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIProp", _wrap_delete_IMAPIProp, METH_VARARGS, NULL},
	 { (char *)"IMAPIProp_swigregister", IMAPIProp_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_GetContentsTable", _wrap_IMAPIContainer_GetContentsTable, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_GetHierarchyTable", _wrap_IMAPIContainer_GetHierarchyTable, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_OpenEntry", _wrap_IMAPIContainer_OpenEntry, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_SetSearchCriteria", _wrap_IMAPIContainer_SetSearchCriteria, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_GetSearchCriteria", _wrap_IMAPIContainer_GetSearchCriteria, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIContainer", _wrap_delete_IMAPIContainer, METH_VARARGS, NULL},
	 { (char *)"IMAPIContainer_swigregister", IMAPIContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIAdviseSink_OnNotify", _wrap_IMAPIAdviseSink_OnNotify, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIAdviseSink", _wrap_delete_IMAPIAdviseSink, METH_VARARGS, NULL},
	 { (char *)"IMAPIAdviseSink_swigregister", IMAPIAdviseSink_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MAPIAdviseSink", _wrap_new_MAPIAdviseSink, METH_VARARGS, NULL},
	 { (char *)"delete_MAPIAdviseSink", _wrap_delete_MAPIAdviseSink, METH_VARARGS, NULL},
	 { (char *)"disown_MAPIAdviseSink", _wrap_disown_MAPIAdviseSink, METH_VARARGS, NULL},
	 { (char *)"MAPIAdviseSink_swigregister", MAPIAdviseSink_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_Advise", _wrap_IMsgStore_Advise, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_Unadvise", _wrap_IMsgStore_Unadvise, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_CompareEntryIDs", _wrap_IMsgStore_CompareEntryIDs, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_OpenEntry", _wrap_IMsgStore_OpenEntry, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_SetReceiveFolder", _wrap_IMsgStore_SetReceiveFolder, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_GetReceiveFolder", _wrap_IMsgStore_GetReceiveFolder, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_GetReceiveFolderTable", _wrap_IMsgStore_GetReceiveFolderTable, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_StoreLogoff", _wrap_IMsgStore_StoreLogoff, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_AbortSubmit", _wrap_IMsgStore_AbortSubmit, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_GetOutgoingQueue", _wrap_IMsgStore_GetOutgoingQueue, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_SetLockState", _wrap_IMsgStore_SetLockState, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_FinishedMsg", _wrap_IMsgStore_FinishedMsg, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_NotifyNewMail", _wrap_IMsgStore_NotifyNewMail, METH_VARARGS, NULL},
	 { (char *)"delete_IMsgStore", _wrap_delete_IMsgStore, METH_VARARGS, NULL},
	 { (char *)"IMsgStore_swigregister", IMsgStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"IProxyStoreObject_PlaceHolder1", _wrap_IProxyStoreObject_PlaceHolder1, METH_VARARGS, NULL},
	 { (char *)"IProxyStoreObject_PlaceHolder2", _wrap_IProxyStoreObject_PlaceHolder2, METH_VARARGS, NULL},
	 { (char *)"delete_IProxyStoreObject", _wrap_delete_IProxyStoreObject, METH_VARARGS, NULL},
	 { (char *)"IProxyStoreObject_UnwrapNoRef", _wrap_IProxyStoreObject_UnwrapNoRef, METH_VARARGS, NULL},
	 { (char *)"IProxyStoreObject_swigregister", IProxyStoreObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_CreateMessage", _wrap_IMAPIFolder_CreateMessage, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_CopyMessages", _wrap_IMAPIFolder_CopyMessages, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_DeleteMessages", _wrap_IMAPIFolder_DeleteMessages, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_CreateFolder", _wrap_IMAPIFolder_CreateFolder, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_CopyFolder", _wrap_IMAPIFolder_CopyFolder, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_DeleteFolder", _wrap_IMAPIFolder_DeleteFolder, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_SetReadFlags", _wrap_IMAPIFolder_SetReadFlags, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_GetMessageStatus", _wrap_IMAPIFolder_GetMessageStatus, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_SetMessageStatus", _wrap_IMAPIFolder_SetMessageStatus, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_SaveContentsSort", _wrap_IMAPIFolder_SaveContentsSort, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_EmptyFolder", _wrap_IMAPIFolder_EmptyFolder, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIFolder", _wrap_delete_IMAPIFolder, METH_VARARGS, NULL},
	 { (char *)"IMAPIFolder_swigregister", IMAPIFolder_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMessage_GetAttachmentTable", _wrap_IMessage_GetAttachmentTable, METH_VARARGS, NULL},
	 { (char *)"IMessage_OpenAttach", _wrap_IMessage_OpenAttach, METH_VARARGS, NULL},
	 { (char *)"IMessage_CreateAttach", _wrap_IMessage_CreateAttach, METH_VARARGS, NULL},
	 { (char *)"IMessage_DeleteAttach", _wrap_IMessage_DeleteAttach, METH_VARARGS, NULL},
	 { (char *)"IMessage_GetRecipientTable", _wrap_IMessage_GetRecipientTable, METH_VARARGS, NULL},
	 { (char *)"IMessage_ModifyRecipients", _wrap_IMessage_ModifyRecipients, METH_VARARGS, NULL},
	 { (char *)"IMessage_SubmitMessage", _wrap_IMessage_SubmitMessage, METH_VARARGS, NULL},
	 { (char *)"IMessage_SetReadFlag", _wrap_IMessage_SetReadFlag, METH_VARARGS, NULL},
	 { (char *)"delete_IMessage", _wrap_delete_IMessage, METH_VARARGS, NULL},
	 { (char *)"IMessage_swigregister", IMessage_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IAttach", _wrap_delete_IAttach, METH_VARARGS, NULL},
	 { (char *)"IAttach_swigregister", IAttach_swigregister, METH_VARARGS, NULL},
	 { (char *)"IABContainer_CreateEntry", _wrap_IABContainer_CreateEntry, METH_VARARGS, NULL},
	 { (char *)"IABContainer_CopyEntries", _wrap_IABContainer_CopyEntries, METH_VARARGS, NULL},
	 { (char *)"IABContainer_DeleteEntries", _wrap_IABContainer_DeleteEntries, METH_VARARGS, NULL},
	 { (char *)"IABContainer_ResolveNames", _wrap_IABContainer_ResolveNames, METH_VARARGS, NULL},
	 { (char *)"delete_IABContainer", _wrap_delete_IABContainer, METH_VARARGS, NULL},
	 { (char *)"IABContainer_swigregister", IABContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IMailUser", _wrap_delete_IMailUser, METH_VARARGS, NULL},
	 { (char *)"IMailUser_swigregister", IMailUser_swigregister, METH_VARARGS, NULL},
	 { (char *)"IDistList_CreateEntry", _wrap_IDistList_CreateEntry, METH_VARARGS, NULL},
	 { (char *)"IDistList_CopyEntries", _wrap_IDistList_CopyEntries, METH_VARARGS, NULL},
	 { (char *)"IDistList_DeleteEntries", _wrap_IDistList_DeleteEntries, METH_VARARGS, NULL},
	 { (char *)"IDistList_ResolveNames", _wrap_IDistList_ResolveNames, METH_VARARGS, NULL},
	 { (char *)"delete_IDistList", _wrap_delete_IDistList, METH_VARARGS, NULL},
	 { (char *)"IDistList_swigregister", IDistList_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIStatus_ValidateState", _wrap_IMAPIStatus_ValidateState, METH_VARARGS, NULL},
	 { (char *)"IMAPIStatus_SettingsDialog", _wrap_IMAPIStatus_SettingsDialog, METH_VARARGS, NULL},
	 { (char *)"IMAPIStatus_ChangePassword", _wrap_IMAPIStatus_ChangePassword, METH_VARARGS, NULL},
	 { (char *)"IMAPIStatus_FlushQueues", _wrap_IMAPIStatus_FlushQueues, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIStatus", _wrap_delete_IMAPIStatus, METH_VARARGS, NULL},
	 { (char *)"IMAPIStatus_swigregister", IMAPIStatus_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_GetLastError", _wrap_IMAPITable_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_Advise", _wrap_IMAPITable_Advise, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_Unadvise", _wrap_IMAPITable_Unadvise, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_GetStatus", _wrap_IMAPITable_GetStatus, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_SetColumns", _wrap_IMAPITable_SetColumns, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_QueryColumns", _wrap_IMAPITable_QueryColumns, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_GetRowCount", _wrap_IMAPITable_GetRowCount, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_SeekRow", _wrap_IMAPITable_SeekRow, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_SeekRowApprox", _wrap_IMAPITable_SeekRowApprox, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_QueryPosition", _wrap_IMAPITable_QueryPosition, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_FindRow", _wrap_IMAPITable_FindRow, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_Restrict", _wrap_IMAPITable_Restrict, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_CreateBookmark", _wrap_IMAPITable_CreateBookmark, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_FreeBookmark", _wrap_IMAPITable_FreeBookmark, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_SortTable", _wrap_IMAPITable_SortTable, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_QuerySortOrder", _wrap_IMAPITable_QuerySortOrder, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_QueryRows", _wrap_IMAPITable_QueryRows, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_Abort", _wrap_IMAPITable_Abort, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_ExpandRow", _wrap_IMAPITable_ExpandRow, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_CollapseRow", _wrap_IMAPITable_CollapseRow, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_WaitForCompletion", _wrap_IMAPITable_WaitForCompletion, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_GetCollapseState", _wrap_IMAPITable_GetCollapseState, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_SetCollapseState", _wrap_IMAPITable_SetCollapseState, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPITable", _wrap_delete_IMAPITable, METH_VARARGS, NULL},
	 { (char *)"IMAPITable_swigregister", IMAPITable_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IProfSect", _wrap_delete_IProfSect, METH_VARARGS, NULL},
	 { (char *)"IProfSect_swigregister", IProfSect_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_Progress", _wrap_IMAPIProgress_Progress, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_GetFlags", _wrap_IMAPIProgress_GetFlags, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_GetMax", _wrap_IMAPIProgress_GetMax, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_GetMin", _wrap_IMAPIProgress_GetMin, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_SetLimits", _wrap_IMAPIProgress_SetLimits, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPIProgress", _wrap_delete_IMAPIProgress, METH_VARARGS, NULL},
	 { (char *)"IMAPIProgress_swigregister", IMAPIProgress_swigregister, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_GetLastError", _wrap_IProviderAdmin_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_GetProviderTable", _wrap_IProviderAdmin_GetProviderTable, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_CreateProvider", _wrap_IProviderAdmin_CreateProvider, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_DeleteProvider", _wrap_IProviderAdmin_DeleteProvider, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_OpenProfileSection", _wrap_IProviderAdmin_OpenProfileSection, METH_VARARGS, NULL},
	 { (char *)"delete_IProviderAdmin", _wrap_delete_IProviderAdmin, METH_VARARGS, NULL},
	 { (char *)"IProviderAdmin_swigregister", IProviderAdmin_swigregister, METH_VARARGS, NULL},
	 { (char *)"MAPIINIT_0_ulVersion_set", _wrap_MAPIINIT_0_ulVersion_set, METH_VARARGS, NULL},
	 { (char *)"MAPIINIT_0_ulVersion_get", _wrap_MAPIINIT_0_ulVersion_get, METH_VARARGS, NULL},
	 { (char *)"MAPIINIT_0_ulFlags_set", _wrap_MAPIINIT_0_ulFlags_set, METH_VARARGS, NULL},
	 { (char *)"MAPIINIT_0_ulFlags_get", _wrap_MAPIINIT_0_ulFlags_get, METH_VARARGS, NULL},
	 { (char *)"new_MAPIINIT_0", _wrap_new_MAPIINIT_0, METH_VARARGS, NULL},
	 { (char *)"delete_MAPIINIT_0", _wrap_delete_MAPIINIT_0, METH_VARARGS, NULL},
	 { (char *)"MAPIINIT_0_swigregister", MAPIINIT_0_swigregister, METH_VARARGS, NULL},
	 { (char *)"MAPIInitialize", _wrap_MAPIInitialize, METH_VARARGS, NULL},
	 { (char *)"MAPIUninitialize", _wrap_MAPIUninitialize, METH_VARARGS, NULL},
	 { (char *)"MAPILogonEx", _wrap_MAPILogonEx, METH_VARARGS, NULL},
	 { (char *)"MAPIAdminProfiles", _wrap_MAPIAdminProfiles, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_GetLastError", _wrap_IMAPISession_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_GetMsgStoresTable", _wrap_IMAPISession_GetMsgStoresTable, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_OpenMsgStore", _wrap_IMAPISession_OpenMsgStore, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_OpenAddressBook", _wrap_IMAPISession_OpenAddressBook, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_OpenProfileSection", _wrap_IMAPISession_OpenProfileSection, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_GetStatusTable", _wrap_IMAPISession_GetStatusTable, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_OpenEntry", _wrap_IMAPISession_OpenEntry, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_CompareEntryIDs", _wrap_IMAPISession_CompareEntryIDs, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_Advise", _wrap_IMAPISession_Advise, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_Unadvise", _wrap_IMAPISession_Unadvise, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_MessageOptions", _wrap_IMAPISession_MessageOptions, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_QueryDefaultMessageOpt", _wrap_IMAPISession_QueryDefaultMessageOpt, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_EnumAdrTypes", _wrap_IMAPISession_EnumAdrTypes, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_QueryIdentity", _wrap_IMAPISession_QueryIdentity, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_Logoff", _wrap_IMAPISession_Logoff, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_SetDefaultStore", _wrap_IMAPISession_SetDefaultStore, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_AdminServices", _wrap_IMAPISession_AdminServices, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_ShowForm", _wrap_IMAPISession_ShowForm, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_PrepareForm", _wrap_IMAPISession_PrepareForm, METH_VARARGS, NULL},
	 { (char *)"delete_IMAPISession", _wrap_delete_IMAPISession, METH_VARARGS, NULL},
	 { (char *)"IMAPISession_swigregister", IMAPISession_swigregister, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_OpenEntry", _wrap_IAddrBook_OpenEntry, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_CompareEntryIDs", _wrap_IAddrBook_CompareEntryIDs, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_Advise", _wrap_IAddrBook_Advise, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_Unadvise", _wrap_IAddrBook_Unadvise, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_CreateOneOff", _wrap_IAddrBook_CreateOneOff, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_NewEntry", _wrap_IAddrBook_NewEntry, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_ResolveName", _wrap_IAddrBook_ResolveName, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_Address", _wrap_IAddrBook_Address, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_Details", _wrap_IAddrBook_Details, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_RecipOptions", _wrap_IAddrBook_RecipOptions, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_QueryDefaultRecipOpt", _wrap_IAddrBook_QueryDefaultRecipOpt, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_GetPAB", _wrap_IAddrBook_GetPAB, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_SetPAB", _wrap_IAddrBook_SetPAB, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_GetDefaultDir", _wrap_IAddrBook_GetDefaultDir, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_SetDefaultDir", _wrap_IAddrBook_SetDefaultDir, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_GetSearchPath", _wrap_IAddrBook_GetSearchPath, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_SetSearchPath", _wrap_IAddrBook_SetSearchPath, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_PrepareRecips", _wrap_IAddrBook_PrepareRecips, METH_VARARGS, NULL},
	 { (char *)"delete_IAddrBook", _wrap_delete_IAddrBook, METH_VARARGS, NULL},
	 { (char *)"IAddrBook_swigregister", IAddrBook_swigregister, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_GetLastError", _wrap_IProfAdmin_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_GetProfileTable", _wrap_IProfAdmin_GetProfileTable, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_CreateProfile", _wrap_IProfAdmin_CreateProfile, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_DeleteProfile", _wrap_IProfAdmin_DeleteProfile, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_ChangeProfilePassword", _wrap_IProfAdmin_ChangeProfilePassword, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_CopyProfile", _wrap_IProfAdmin_CopyProfile, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_RenameProfile", _wrap_IProfAdmin_RenameProfile, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_SetDefaultProfile", _wrap_IProfAdmin_SetDefaultProfile, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_AdminServices", _wrap_IProfAdmin_AdminServices, METH_VARARGS, NULL},
	 { (char *)"delete_IProfAdmin", _wrap_delete_IProfAdmin, METH_VARARGS, NULL},
	 { (char *)"IProfAdmin_swigregister", IProfAdmin_swigregister, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_GetLastError", _wrap_IMsgServiceAdmin_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_GetMsgServiceTable", _wrap_IMsgServiceAdmin_GetMsgServiceTable, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_CreateMsgService", _wrap_IMsgServiceAdmin_CreateMsgService, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_DeleteMsgService", _wrap_IMsgServiceAdmin_DeleteMsgService, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_CopyMsgService", _wrap_IMsgServiceAdmin_CopyMsgService, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_RenameMsgService", _wrap_IMsgServiceAdmin_RenameMsgService, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_ConfigureMsgService", _wrap_IMsgServiceAdmin_ConfigureMsgService, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_OpenProfileSection", _wrap_IMsgServiceAdmin_OpenProfileSection, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_MsgServiceTransportOrder", _wrap_IMsgServiceAdmin_MsgServiceTransportOrder, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_AdminProviders", _wrap_IMsgServiceAdmin_AdminProviders, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_SetPrimaryIdentity", _wrap_IMsgServiceAdmin_SetPrimaryIdentity, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_GetProviderTable", _wrap_IMsgServiceAdmin_GetProviderTable, METH_VARARGS, NULL},
	 { (char *)"delete_IMsgServiceAdmin", _wrap_delete_IMsgServiceAdmin, METH_VARARGS, NULL},
	 { (char *)"IMsgServiceAdmin_swigregister", IMsgServiceAdmin_swigregister, METH_VARARGS, NULL},
	 { (char *)"MAPINotifSink_GetNotifications", _wrap_MAPINotifSink_GetNotifications, METH_VARARGS, NULL},
	 { (char *)"new_MAPINotifSink", _wrap_new_MAPINotifSink, METH_VARARGS, NULL},
	 { (char *)"delete_MAPINotifSink", _wrap_delete_MAPINotifSink, METH_VARARGS, NULL},
	 { (char *)"MAPINotifSink_swigregister", MAPINotifSink_swigregister, METH_VARARGS, NULL},
	 { (char *)"WrapStoreEntryID", _wrap_WrapStoreEntryID, METH_VARARGS, NULL},
	 { (char *)"WrapCompressedRTFStream", _wrap_WrapCompressedRTFStream, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_GetLastError", _wrap_IExchangeImportContentsChanges_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_Config", _wrap_IExchangeImportContentsChanges_Config, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_UpdateState", _wrap_IExchangeImportContentsChanges_UpdateState, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_ImportMessageChange", _wrap_IExchangeImportContentsChanges_ImportMessageChange, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_ImportMessageDeletion", _wrap_IExchangeImportContentsChanges_ImportMessageDeletion, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_ImportPerUserReadStateChange", _wrap_IExchangeImportContentsChanges_ImportPerUserReadStateChange, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_ImportMessageMove", _wrap_IExchangeImportContentsChanges_ImportMessageMove, METH_VARARGS, NULL},
	 { (char *)"delete_IExchangeImportContentsChanges", _wrap_delete_IExchangeImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportContentsChanges_swigregister", IExchangeImportContentsChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_GetLastError", _wrap_IExchangeImportHierarchyChanges_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_Config", _wrap_IExchangeImportHierarchyChanges_Config, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_UpdateState", _wrap_IExchangeImportHierarchyChanges_UpdateState, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_ImportFolderChange", _wrap_IExchangeImportHierarchyChanges_ImportFolderChange, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_ImportFolderDeletion", _wrap_IExchangeImportHierarchyChanges_ImportFolderDeletion, METH_VARARGS, NULL},
	 { (char *)"delete_IExchangeImportHierarchyChanges", _wrap_delete_IExchangeImportHierarchyChanges, METH_VARARGS, NULL},
	 { (char *)"IExchangeImportHierarchyChanges_swigregister", IExchangeImportHierarchyChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"IExchangeExportChanges_GetLastError", _wrap_IExchangeExportChanges_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IExchangeExportChanges_Config", _wrap_IExchangeExportChanges_Config, METH_VARARGS, NULL},
	 { (char *)"IExchangeExportChanges_Synchronize", _wrap_IExchangeExportChanges_Synchronize, METH_VARARGS, NULL},
	 { (char *)"IExchangeExportChanges_UpdateState", _wrap_IExchangeExportChanges_UpdateState, METH_VARARGS, NULL},
	 { (char *)"delete_IExchangeExportChanges", _wrap_delete_IExchangeExportChanges, METH_VARARGS, NULL},
	 { (char *)"IExchangeExportChanges_swigregister", IExchangeExportChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_CreateStoreEntryID", _wrap_IExchangeManageStore_CreateStoreEntryID, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_EntryIDFromSourceKey", _wrap_IExchangeManageStore_EntryIDFromSourceKey, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_GetRights", _wrap_IExchangeManageStore_GetRights, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_GetMailboxTable", _wrap_IExchangeManageStore_GetMailboxTable, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_GetPublicFolderTable", _wrap_IExchangeManageStore_GetPublicFolderTable, METH_VARARGS, NULL},
	 { (char *)"delete_IExchangeManageStore", _wrap_delete_IExchangeManageStore, METH_VARARGS, NULL},
	 { (char *)"IExchangeManageStore_swigregister", IExchangeManageStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"IExchangeModifyTable_GetLastError", _wrap_IExchangeModifyTable_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IExchangeModifyTable_GetTable", _wrap_IExchangeModifyTable_GetTable, METH_VARARGS, NULL},
	 { (char *)"IExchangeModifyTable_ModifyTable", _wrap_IExchangeModifyTable_ModifyTable, METH_VARARGS, NULL},
	 { (char *)"delete_IExchangeModifyTable", _wrap_delete_IExchangeModifyTable, METH_VARARGS, NULL},
	 { (char *)"IExchangeModifyTable_swigregister", IExchangeModifyTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExchangeImportContentsChanges", _wrap_new_ExchangeImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"delete_ExchangeImportContentsChanges", _wrap_delete_ExchangeImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"disown_ExchangeImportContentsChanges", _wrap_disown_ExchangeImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"ExchangeImportContentsChanges_swigregister", ExchangeImportContentsChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExchangeImportHierarchyChanges", _wrap_new_ExchangeImportHierarchyChanges, METH_VARARGS, NULL},
	 { (char *)"delete_ExchangeImportHierarchyChanges", _wrap_delete_ExchangeImportHierarchyChanges, METH_VARARGS, NULL},
	 { (char *)"disown_ExchangeImportHierarchyChanges", _wrap_disown_ExchangeImportHierarchyChanges, METH_VARARGS, NULL},
	 { (char *)"ExchangeImportHierarchyChanges_swigregister", ExchangeImportHierarchyChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExchangeExportChanges", _wrap_new_ExchangeExportChanges, METH_VARARGS, NULL},
	 { (char *)"delete_ExchangeExportChanges", _wrap_delete_ExchangeExportChanges, METH_VARARGS, NULL},
	 { (char *)"disown_ExchangeExportChanges", _wrap_disown_ExchangeExportChanges, METH_VARARGS, NULL},
	 { (char *)"ExchangeExportChanges_swigregister", ExchangeExportChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_CreateStore", _wrap_IECServiceAdmin_CreateStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_CreateEmptyStore", _wrap_IECServiceAdmin_CreateEmptyStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_ResolveStore", _wrap_IECServiceAdmin_ResolveStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_HookStore", _wrap_IECServiceAdmin_HookStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_UnhookStore", _wrap_IECServiceAdmin_UnhookStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_RemoveStore", _wrap_IECServiceAdmin_RemoveStore, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_CreateUser", _wrap_IECServiceAdmin_CreateUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DeleteUser", _wrap_IECServiceAdmin_DeleteUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_SetUser", _wrap_IECServiceAdmin_SetUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetUser", _wrap_IECServiceAdmin_GetUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_ResolveUserName", _wrap_IECServiceAdmin_ResolveUserName, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetUserList", _wrap_IECServiceAdmin_GetUserList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetSendAsList", _wrap_IECServiceAdmin_GetSendAsList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_AddSendAsUser", _wrap_IECServiceAdmin_AddSendAsUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DelSendAsUser", _wrap_IECServiceAdmin_DelSendAsUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetUserClientUpdateStatus", _wrap_IECServiceAdmin_GetUserClientUpdateStatus, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_RemoveAllObjects", _wrap_IECServiceAdmin_RemoveAllObjects, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_CreateGroup", _wrap_IECServiceAdmin_CreateGroup, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DeleteGroup", _wrap_IECServiceAdmin_DeleteGroup, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_SetGroup", _wrap_IECServiceAdmin_SetGroup, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetGroup", _wrap_IECServiceAdmin_GetGroup, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_ResolveGroupName", _wrap_IECServiceAdmin_ResolveGroupName, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetGroupList", _wrap_IECServiceAdmin_GetGroupList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DeleteGroupUser", _wrap_IECServiceAdmin_DeleteGroupUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_AddGroupUser", _wrap_IECServiceAdmin_AddGroupUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetUserListOfGroup", _wrap_IECServiceAdmin_GetUserListOfGroup, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetGroupListOfUser", _wrap_IECServiceAdmin_GetGroupListOfUser, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_CreateCompany", _wrap_IECServiceAdmin_CreateCompany, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DeleteCompany", _wrap_IECServiceAdmin_DeleteCompany, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_SetCompany", _wrap_IECServiceAdmin_SetCompany, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetCompany", _wrap_IECServiceAdmin_GetCompany, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_ResolveCompanyName", _wrap_IECServiceAdmin_ResolveCompanyName, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetCompanyList", _wrap_IECServiceAdmin_GetCompanyList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_AddCompanyToRemoteViewList", _wrap_IECServiceAdmin_AddCompanyToRemoteViewList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DelCompanyFromRemoteViewList", _wrap_IECServiceAdmin_DelCompanyFromRemoteViewList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetRemoteViewList", _wrap_IECServiceAdmin_GetRemoteViewList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_AddUserToRemoteAdminList", _wrap_IECServiceAdmin_AddUserToRemoteAdminList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DelUserFromRemoteAdminList", _wrap_IECServiceAdmin_DelUserFromRemoteAdminList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetRemoteAdminList", _wrap_IECServiceAdmin_GetRemoteAdminList, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_SyncUsers", _wrap_IECServiceAdmin_SyncUsers, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetQuota", _wrap_IECServiceAdmin_GetQuota, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_SetQuota", _wrap_IECServiceAdmin_SetQuota, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_AddQuotaRecipient", _wrap_IECServiceAdmin_AddQuotaRecipient, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_DeleteQuotaRecipient", _wrap_IECServiceAdmin_DeleteQuotaRecipient, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetQuotaRecipients", _wrap_IECServiceAdmin_GetQuotaRecipients, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetQuotaStatus", _wrap_IECServiceAdmin_GetQuotaStatus, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_PurgeSoftDelete", _wrap_IECServiceAdmin_PurgeSoftDelete, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_PurgeCache", _wrap_IECServiceAdmin_PurgeCache, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_OpenUserStoresTable", _wrap_IECServiceAdmin_OpenUserStoresTable, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetServerDetails", _wrap_IECServiceAdmin_GetServerDetails, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_ResolvePseudoUrl", _wrap_IECServiceAdmin_ResolvePseudoUrl, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetPublicStoreEntryID", _wrap_IECServiceAdmin_GetPublicStoreEntryID, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_GetArchiveStoreEntryID", _wrap_IECServiceAdmin_GetArchiveStoreEntryID, METH_VARARGS, NULL},
	 { (char *)"delete_IECServiceAdmin", _wrap_delete_IECServiceAdmin, METH_VARARGS, NULL},
	 { (char *)"IECServiceAdmin_swigregister", IECServiceAdmin_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECSpooler_GetMasterOutgoingTable", _wrap_IECSpooler_GetMasterOutgoingTable, METH_VARARGS, NULL},
	 { (char *)"IECSpooler_DeleteFromMasterOutgoingTable", _wrap_IECSpooler_DeleteFromMasterOutgoingTable, METH_VARARGS, NULL},
	 { (char *)"delete_IECSpooler", _wrap_delete_IECSpooler, METH_VARARGS, NULL},
	 { (char *)"IECSpooler_swigregister", IECSpooler_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECTestProtocol_TestPerform", _wrap_IECTestProtocol_TestPerform, METH_VARARGS, NULL},
	 { (char *)"IECTestProtocol_TestSet", _wrap_IECTestProtocol_TestSet, METH_VARARGS, NULL},
	 { (char *)"IECTestProtocol_TestGet", _wrap_IECTestProtocol_TestGet, METH_VARARGS, NULL},
	 { (char *)"delete_IECTestProtocol", _wrap_delete_IECTestProtocol, METH_VARARGS, NULL},
	 { (char *)"IECTestProtocol_swigregister", IECTestProtocol_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECMultiStoreTable_OpenMultiStoreTable", _wrap_IECMultiStoreTable_OpenMultiStoreTable, METH_VARARGS, NULL},
	 { (char *)"delete_IECMultiStoreTable", _wrap_delete_IECMultiStoreTable, METH_VARARGS, NULL},
	 { (char *)"IECMultiStoreTable_swigregister", IECMultiStoreTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECLicense_LicenseAuth", _wrap_IECLicense_LicenseAuth, METH_VARARGS, NULL},
	 { (char *)"delete_IECLicense", _wrap_delete_IECLicense, METH_VARARGS, NULL},
	 { (char *)"IECLicense_swigregister", IECLicense_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECExportChanges_GetChangeCount", _wrap_IECExportChanges_GetChangeCount, METH_VARARGS, NULL},
	 { (char *)"IECExportChanges_SetMessageInterface", _wrap_IECExportChanges_SetMessageInterface, METH_VARARGS, NULL},
	 { (char *)"IECExportChanges_SetLogger", _wrap_IECExportChanges_SetLogger, METH_VARARGS, NULL},
	 { (char *)"delete_IECExportChanges", _wrap_delete_IECExportChanges, METH_VARARGS, NULL},
	 { (char *)"IECExportChanges_swigregister", IECExportChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"UnwrapObject", _wrap_UnwrapObject, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_GetLastError", _wrap_IECChangeAdvisor_GetLastError, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_Config", _wrap_IECChangeAdvisor_Config, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_UpdateState", _wrap_IECChangeAdvisor_UpdateState, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_AddKeys", _wrap_IECChangeAdvisor_AddKeys, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_RemoveKeys", _wrap_IECChangeAdvisor_RemoveKeys, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_IsMonitoringSyncId", _wrap_IECChangeAdvisor_IsMonitoringSyncId, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_UpdateSyncState", _wrap_IECChangeAdvisor_UpdateSyncState, METH_VARARGS, NULL},
	 { (char *)"delete_IECChangeAdvisor", _wrap_delete_IECChangeAdvisor, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdvisor_swigregister", IECChangeAdvisor_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdviseSink_OnNotify", _wrap_IECChangeAdviseSink_OnNotify, METH_VARARGS, NULL},
	 { (char *)"delete_IECChangeAdviseSink", _wrap_delete_IECChangeAdviseSink, METH_VARARGS, NULL},
	 { (char *)"IECChangeAdviseSink_swigregister", IECChangeAdviseSink_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECImportContentsChanges_ConfigForConversionStream", _wrap_IECImportContentsChanges_ConfigForConversionStream, METH_VARARGS, NULL},
	 { (char *)"IECImportContentsChanges_ImportMessageChangeAsAStream", _wrap_IECImportContentsChanges_ImportMessageChangeAsAStream, METH_VARARGS, NULL},
	 { (char *)"IECImportContentsChanges_SetMessageInterface", _wrap_IECImportContentsChanges_SetMessageInterface, METH_VARARGS, NULL},
	 { (char *)"delete_IECImportContentsChanges", _wrap_delete_IECImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"IECImportContentsChanges_swigregister", IECImportContentsChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"IECSingleInstance_GetSingleInstanceId", _wrap_IECSingleInstance_GetSingleInstanceId, METH_VARARGS, NULL},
	 { (char *)"IECSingleInstance_SetSingleInstanceId", _wrap_IECSingleInstance_SetSingleInstanceId, METH_VARARGS, NULL},
	 { (char *)"delete_IECSingleInstance", _wrap_delete_IECSingleInstance, METH_VARARGS, NULL},
	 { (char *)"IECSingleInstance_swigregister", IECSingleInstance_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ECChangeAdviseSink", _wrap_new_ECChangeAdviseSink, METH_VARARGS, NULL},
	 { (char *)"delete_ECChangeAdviseSink", _wrap_delete_ECChangeAdviseSink, METH_VARARGS, NULL},
	 { (char *)"disown_ECChangeAdviseSink", _wrap_disown_ECChangeAdviseSink, METH_VARARGS, NULL},
	 { (char *)"ECChangeAdviseSink_swigregister", ECChangeAdviseSink_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ECImportContentsChanges", _wrap_new_ECImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"delete_ECImportContentsChanges", _wrap_delete_ECImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"disown_ECImportContentsChanges", _wrap_disown_ECImportContentsChanges, METH_VARARGS, NULL},
	 { (char *)"ECImportContentsChanges_swigregister", ECImportContentsChanges_swigregister, METH_VARARGS, NULL},
	 { (char *)"ECSimpleLogger_Log", _wrap_ECSimpleLogger_Log, METH_VARARGS, NULL},
	 { (char *)"new_ECSimpleLogger", _wrap_new_ECSimpleLogger, METH_VARARGS, NULL},
	 { (char *)"delete_ECSimpleLogger", _wrap_delete_ECSimpleLogger, METH_VARARGS, NULL},
	 { (char *)"disown_ECSimpleLogger", _wrap_disown_ECSimpleLogger, METH_VARARGS, NULL},
	 { (char *)"ECSimpleLogger_swigregister", ECSimpleLogger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Stream", _wrap_new_Stream, METH_VARARGS, NULL},
	 { (char *)"Stream_Read", _wrap_Stream_Read, METH_VARARGS, NULL},
	 { (char *)"Stream_Write", _wrap_Stream_Write, METH_VARARGS, NULL},
	 { (char *)"delete_Stream", _wrap_delete_Stream, METH_VARARGS, NULL},
	 { (char *)"disown_Stream", _wrap_disown_Stream, METH_VARARGS, NULL},
	 { (char *)"Stream_swigregister", Stream_swigregister, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_GetInstance", _wrap_ECSyncSettings_GetInstance, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SyncLogEnabled", _wrap_ECSyncSettings_SyncLogEnabled, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SyncLogLevel", _wrap_ECSyncSettings_SyncLogLevel, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_ContinuousLogging", _wrap_ECSyncSettings_ContinuousLogging, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SyncStreamEnabled", _wrap_ECSyncSettings_SyncStreamEnabled, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_ChangeNotificationsEnabled", _wrap_ECSyncSettings_ChangeNotificationsEnabled, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_StateCollectorEnabled", _wrap_ECSyncSettings_StateCollectorEnabled, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_StreamTimeout", _wrap_ECSyncSettings_StreamTimeout, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_StreamBufferSize", _wrap_ECSyncSettings_StreamBufferSize, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_StreamBatchSize", _wrap_ECSyncSettings_StreamBatchSize, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_EnableSyncLog", _wrap_ECSyncSettings_EnableSyncLog, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SetSyncLogLevel", _wrap_ECSyncSettings_SetSyncLogLevel, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SetSyncOptions", _wrap_ECSyncSettings_SetSyncOptions, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SetStreamTimeout", _wrap_ECSyncSettings_SetStreamTimeout, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SetStreamBufferSize", _wrap_ECSyncSettings_SetStreamBufferSize, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_SetStreamBatchSize", _wrap_ECSyncSettings_SetStreamBatchSize, METH_VARARGS, NULL},
	 { (char *)"delete_ECSyncSettings", _wrap_delete_ECSyncSettings, METH_VARARGS, NULL},
	 { (char *)"ECSyncSettings_swigregister", ECSyncSettings_swigregister, METH_VARARGS, NULL},
	 { (char *)"ECSyncLog_GetLogger", _wrap_ECSyncLog_GetLogger, METH_VARARGS, NULL},
	 { (char *)"ECSyncLog_SetLogger", _wrap_ECSyncLog_SetLogger, METH_VARARGS, NULL},
	 { (char *)"new_ECSyncLog", _wrap_new_ECSyncLog, METH_VARARGS, NULL},
	 { (char *)"delete_ECSyncLog", _wrap_delete_ECSyncLog, METH_VARARGS, NULL},
	 { (char *)"ECSyncLog_swigregister", ECSyncLog_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ECImportContentsChangesTo_p_IECImportContentsChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IECImportContentsChanges *)  ((ECImportContentsChanges *) x));
}
static void *_p_ExchangeExportChangesTo_p_IExchangeExportChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeExportChanges *)  ((ExchangeExportChanges *) x));
}
static void *_p_ExchangeImportHierarchyChangesTo_p_IExchangeImportHierarchyChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeImportHierarchyChanges *)  ((ExchangeImportHierarchyChanges *) x));
}
static void *_p_ExchangeImportContentsChangesTo_p_IExchangeImportContentsChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeImportContentsChanges *)  ((ExchangeImportContentsChanges *) x));
}
static void *_p_IECImportContentsChangesTo_p_IExchangeImportContentsChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeImportContentsChanges *)  ((IECImportContentsChanges *) x));
}
static void *_p_ECImportContentsChangesTo_p_IExchangeImportContentsChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeImportContentsChanges *) (IECImportContentsChanges *) ((ECImportContentsChanges *) x));
}
static void *_p_IMAPIStatusTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMAPIStatus *) x));
}
static void *_p_IMsgStoreTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMsgStore *) x));
}
static void *_p_IMAPIFolderTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IMAPIFolder *) x));
}
static void *_p_IMailUserTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMailUser *) x));
}
static void *_p_IAddrBookTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IAddrBook *) x));
}
static void *_p_IAttachTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IAttach *) x));
}
static void *_p_IMessageTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMessage *) x));
}
static void *_p_IProfSectTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IProfSect *) x));
}
static void *_p_IMAPIContainerTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMAPIContainer *) x));
}
static void *_p_IABContainerTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IABContainer *) x));
}
static void *_p_IDistListTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IDistList *) x));
}
static void *_p_IMAPIFolderTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IMAPIFolder *) x));
}
static void *_p_IABContainerTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IABContainer *) x));
}
static void *_p_IDistListTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IDistList *) x));
}
static void *_p_StreamTo_p_IStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IStream *)  ((Stream *) x));
}
static void *_p_p_StreamTo_p_p_IStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IStream **)  ((Stream **) x));
}
static void *_p_IStreamTo_p_ISequentialStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISequentialStream *)  ((IStream *) x));
}
static void *_p_StreamTo_p_ISequentialStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISequentialStream *) (IStream *) ((Stream *) x));
}
static void *_p_ECChangeAdviseSinkTo_p_IECChangeAdviseSink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IECChangeAdviseSink *)  ((ECChangeAdviseSink *) x));
}
static void *_p_MAPINotifSinkTo_p_IMAPIAdviseSink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIAdviseSink *)  ((MAPINotifSink *) x));
}
static void *_p_MAPIAdviseSinkTo_p_IMAPIAdviseSink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIAdviseSink *)  ((MAPIAdviseSink *) x));
}
static void *_p_p_IMAPIStatusTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMAPIStatus **) x));
}
static void *_p_p_IECSingleInstanceTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECSingleInstance **) x));
}
static void *_p_p_IAddrBookTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IAddrBook **) x));
}
static void *_p_p_IMessageTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMessage **) x));
}
static void *_p_p_IExchangeManageStoreTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeManageStore **) x));
}
static void *_p_p_IMailUserTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMailUser **) x));
}
static void *_p_p_IMsgStoreTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMsgStore **) x));
}
static void *_p_p_ExchangeExportChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeExportChanges *) ((ExchangeExportChanges **) x));
}
static void *_p_p_ExchangeImportHierarchyChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeImportHierarchyChanges *) ((ExchangeImportHierarchyChanges **) x));
}
static void *_p_p_ExchangeImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeImportContentsChanges *) ((ExchangeImportContentsChanges **) x));
}
static void *_p_p_IExchangeExportChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeExportChanges **) x));
}
static void *_p_p_IExchangeImportHierarchyChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeImportHierarchyChanges **) x));
}
static void *_p_p_IExchangeImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeImportContentsChanges **) x));
}
static void *_p_p_IECServiceAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECServiceAdmin **) x));
}
static void *_p_p_IMsgServiceAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMsgServiceAdmin **) x));
}
static void *_p_p_IECExportChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECExportChanges **) x));
}
static void *_p_p_IECImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeImportContentsChanges *) ((IECImportContentsChanges **) x));
}
static void *_p_p_ECImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeImportContentsChanges *)(IECImportContentsChanges *) ((ECImportContentsChanges **) x));
}
static void *_p_p_IProviderAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProviderAdmin **) x));
}
static void *_p_p_IAttachTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IAttach **) x));
}
static void *_p_p_IExchangeModifyTableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeModifyTable **) x));
}
static void *_p_p_IMAPITableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPITable **) x));
}
static void *_p_p_IECChangeAdvisorTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECChangeAdvisor **) x));
}
static void *_p_p_IDistListTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IDistList **) x));
}
static void *_p_p_IECMultiStoreTableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECMultiStoreTable **) x));
}
static void *_p_p_IMAPIContainerTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMAPIContainer **) x));
}
static void *_p_p_IABContainerTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IABContainer **) x));
}
static void *_p_p_IMAPISessionTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPISession **) x));
}
static void *_p_p_ISequentialStreamTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((ISequentialStream **) x));
}
static void *_p_p_IMAPIFolderTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IMAPIFolder **) x));
}
static void *_p_p_IECTestProtocolTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECTestProtocol **) x));
}
static void *_p_p_StreamTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (ISequentialStream *)(IStream *) ((Stream **) x));
}
static void *_p_p_MAPINotifSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIAdviseSink *) ((MAPINotifSink **) x));
}
static void *_p_p_IProxyStoreObjectTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProxyStoreObject **) x));
}
static void *_p_p_IECLicenseTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECLicense **) x));
}
static void *_p_p_IProfAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProfAdmin **) x));
}
static void *_p_p_IMAPIPropTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIProp **) x));
}
static void *_p_p_IMAPIAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIAdviseSink **) x));
}
static void *_p_p_MAPIAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIAdviseSink *) ((MAPIAdviseSink **) x));
}
static void *_p_p_IECChangeAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECChangeAdviseSink **) x));
}
static void *_p_p_ECChangeAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IECChangeAdviseSink *) ((ECChangeAdviseSink **) x));
}
static void *_p_p_IMAPIProgressTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIProgress **) x));
}
static void *_p_p_IProfSectTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IProfSect **) x));
}
static void *_p_p_IStreamTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (ISequentialStream *) ((IStream **) x));
}
static void *_p_IMAPIStatusTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMAPIStatus *) x));
}
static void *_p_IECSingleInstanceTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECSingleInstance *) x));
}
static void *_p_IAddrBookTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IAddrBook *) x));
}
static void *_p_IMessageTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMessage *) x));
}
static void *_p_IExchangeManageStoreTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeManageStore *) x));
}
static void *_p_IMailUserTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMailUser *) x));
}
static void *_p_IMsgStoreTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMsgStore *) x));
}
static void *_p_ExchangeExportChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeExportChanges *) ((ExchangeExportChanges *) x));
}
static void *_p_ExchangeImportHierarchyChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeImportHierarchyChanges *) ((ExchangeImportHierarchyChanges *) x));
}
static void *_p_ExchangeImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeImportContentsChanges *) ((ExchangeImportContentsChanges *) x));
}
static void *_p_IExchangeExportChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeExportChanges *) x));
}
static void *_p_IExchangeImportHierarchyChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeImportHierarchyChanges *) x));
}
static void *_p_IExchangeImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeImportContentsChanges *) x));
}
static void *_p_IECServiceAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECServiceAdmin *) x));
}
static void *_p_IMsgServiceAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMsgServiceAdmin *) x));
}
static void *_p_IECExportChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECExportChanges *) x));
}
static void *_p_IECImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeImportContentsChanges *) ((IECImportContentsChanges *) x));
}
static void *_p_ECImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeImportContentsChanges *)(IECImportContentsChanges *) ((ECImportContentsChanges *) x));
}
static void *_p_IProviderAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProviderAdmin *) x));
}
static void *_p_IAttachTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IAttach *) x));
}
static void *_p_IExchangeModifyTableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeModifyTable *) x));
}
static void *_p_IMAPITableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPITable *) x));
}
static void *_p_IECChangeAdvisorTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECChangeAdvisor *) x));
}
static void *_p_IDistListTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IDistList *) x));
}
static void *_p_IECMultiStoreTableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECMultiStoreTable *) x));
}
static void *_p_IMAPIContainerTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMAPIContainer *) x));
}
static void *_p_IABContainerTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IABContainer *) x));
}
static void *_p_IMAPISessionTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPISession *) x));
}
static void *_p_ISequentialStreamTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((ISequentialStream *) x));
}
static void *_p_IMAPIFolderTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IMAPIFolder *) x));
}
static void *_p_IECTestProtocolTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECTestProtocol *) x));
}
static void *_p_StreamTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (ISequentialStream *)(IStream *) ((Stream *) x));
}
static void *_p_MAPINotifSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIAdviseSink *) ((MAPINotifSink *) x));
}
static void *_p_IProxyStoreObjectTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProxyStoreObject *) x));
}
static void *_p_IECLicenseTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECLicense *) x));
}
static void *_p_IProfAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProfAdmin *) x));
}
static void *_p_IMAPIPropTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIProp *) x));
}
static void *_p_IMAPIAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIAdviseSink *) x));
}
static void *_p_MAPIAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIAdviseSink *) ((MAPIAdviseSink *) x));
}
static void *_p_IECChangeAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECChangeAdviseSink *) x));
}
static void *_p_ECChangeAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IECChangeAdviseSink *) ((ECChangeAdviseSink *) x));
}
static void *_p_IMAPIProgressTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIProgress *) x));
}
static void *_p_IProfSectTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IProfSect *) x));
}
static void *_p_IStreamTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (ISequentialStream *) ((IStream *) x));
}
static swig_type_info _swigt__p_BYTE = {"_p_BYTE", "BYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECChangeAdviseSink = {"_p_ECChangeAdviseSink", "ECChangeAdviseSink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECImportContentsChanges = {"_p_ECImportContentsChanges", "ECImportContentsChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECLogger = {"_p_ECLogger", "ECLogger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECSimpleLogger = {"_p_ECSimpleLogger", "ECSimpleLogger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECSyncLog = {"_p_ECSyncLog", "ECSyncLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECSyncSettings = {"_p_ECSyncSettings", "ECSyncSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExchangeExportChanges = {"_p_ExchangeExportChanges", "ExchangeExportChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExchangeImportContentsChanges = {"_p_ExchangeImportContentsChanges", "ExchangeImportContentsChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExchangeImportHierarchyChanges = {"_p_ExchangeImportHierarchyChanges", "ExchangeImportHierarchyChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GUID = {"_p_GUID", "GUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IABContainer = {"_p_IABContainer", "IABContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IAddrBook = {"_p_IAddrBook", "IAddrBook *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IAttach = {"_p_IAttach", "IAttach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDistList = {"_p_IDistList", "IDistList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECChangeAdviseSink = {"_p_IECChangeAdviseSink", "IECChangeAdviseSink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECChangeAdvisor = {"_p_IECChangeAdvisor", "IECChangeAdvisor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECExportChanges = {"_p_IECExportChanges", "IECExportChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECImportContentsChanges = {"_p_IECImportContentsChanges", "IECImportContentsChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECLicense = {"_p_IECLicense", "IECLicense *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECMultiStoreTable = {"_p_IECMultiStoreTable", "IECMultiStoreTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECServiceAdmin = {"_p_IECServiceAdmin", "IECServiceAdmin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECSingleInstance = {"_p_IECSingleInstance", "IECSingleInstance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECSpooler = {"_p_IECSpooler", "IECSpooler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IECTestProtocol = {"_p_IECTestProtocol", "IECTestProtocol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IExchangeExportChanges = {"_p_IExchangeExportChanges", "IExchangeExportChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IExchangeImportContentsChanges = {"_p_IExchangeImportContentsChanges", "IExchangeImportContentsChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IExchangeImportHierarchyChanges = {"_p_IExchangeImportHierarchyChanges", "IExchangeImportHierarchyChanges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IExchangeManageStore = {"_p_IExchangeManageStore", "IExchangeManageStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IExchangeModifyTable = {"_p_IExchangeModifyTable", "IExchangeModifyTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IID = {"_p_IID", "IID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIAdviseSink = {"_p_IMAPIAdviseSink", "IMAPIAdviseSink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIContainer = {"_p_IMAPIContainer", "IMAPIContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIFolder = {"_p_IMAPIFolder", "IMAPIFolder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIProgress = {"_p_IMAPIProgress", "IMAPIProgress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIProp = {"_p_IMAPIProp", "IMAPIProp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPISession = {"_p_IMAPISession", "IMAPISession *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIStatus = {"_p_IMAPIStatus", "IMAPIStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPITable = {"_p_IMAPITable", "IMAPITable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMailUser = {"_p_IMailUser", "IMailUser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMessage = {"_p_IMessage", "IMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMsgServiceAdmin = {"_p_IMsgServiceAdmin", "IMsgServiceAdmin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMsgStore = {"_p_IMsgStore", "IMsgStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IProfAdmin = {"_p_IProfAdmin", "IProfAdmin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IProfSect = {"_p_IProfSect", "IProfSect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IProviderAdmin = {"_p_IProviderAdmin", "IProviderAdmin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IProxyStoreObject = {"_p_IProxyStoreObject", "IProxyStoreObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISequentialStream = {"_p_ISequentialStream", "ISequentialStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IStream = {"_p_IStream", "IStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IUnknown = {"_p_IUnknown", "IUnknown *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LARGE_INTEGER = {"_p_LARGE_INTEGER", "LARGE_INTEGER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LONG = {"_p_LONG", "LONG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRENTRY = {"_p_LPADRENTRY", "LPADRENTRY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRLIST = {"_p_LPADRLIST", "LPADRLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRPARM = {"_p_LPADRPARM", "LPADRPARM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPBYTE = {"_p_LPBYTE", "LPBYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPCIID = {"_p_LPCIID", "LPCIID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECCOMPANY = {"_p_LPECCOMPANY", "LPECCOMPANY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECGROUP = {"_p_LPECGROUP", "LPECGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECQUOTA = {"_p_LPECQUOTA", "LPECQUOTA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECQUOTASTATUS = {"_p_LPECQUOTASTATUS", "LPECQUOTASTATUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECSERVERLIST = {"_p_LPECSERVERLIST", "LPECSERVERLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECSVRNAMELIST = {"_p_LPECSVRNAMELIST", "LPECSVRNAMELIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECUSER = {"_p_LPECUSER", "LPECUSER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECUSERCLIENTUPDATESTATUS = {"_p_LPECUSERCLIENTUPDATESTATUS", "LPECUSERCLIENTUPDATESTATUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPENTRYID = {"_p_LPENTRYID", "LPENTRYID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPENTRYLIST = {"_p_LPENTRYLIST", "LPENTRYLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFNBUTTON = {"_p_LPFNBUTTON", "LPFNBUTTON *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFNDISMISS = {"_p_LPFNDISMISS", "LPFNDISMISS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFlagList = {"_p_LPFlagList", "LPFlagList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPGUID = {"_p_LPGUID", "LPGUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIADVISESINK = {"_p_LPMAPIADVISESINK", "LPMAPIADVISESINK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIERROR = {"_p_LPMAPIERROR", "LPMAPIERROR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIFOLDER = {"_p_LPMAPIFOLDER", "LPMAPIFOLDER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPINAMEID = {"_p_LPMAPINAMEID", "LPMAPINAMEID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIPROP = {"_p_LPMAPIPROP", "LPMAPIPROP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPITABLE = {"_p_LPMAPITABLE", "LPMAPITABLE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIUID = {"_p_LPMAPIUID", "LPMAPIUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMDB = {"_p_LPMDB", "LPMDB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMESSAGE = {"_p_LPMESSAGE", "LPMESSAGE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPNOTIFICATION = {"_p_LPNOTIFICATION", "LPNOTIFICATION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPREADSTATE = {"_p_LPREADSTATE", "LPREADSTATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPROWLIST = {"_p_LPROWLIST", "LPROWLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropProblemArray = {"_p_LPSPropProblemArray", "LPSPropProblemArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropTagArray = {"_p_LPSPropTagArray", "LPSPropTagArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropValue = {"_p_LPSPropValue", "LPSPropValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSRestriction = {"_p_LPSRestriction", "LPSRestriction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSRowSet = {"_p_LPSRowSet", "LPSRowSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSSortOrderSet = {"_p_LPSSortOrderSet", "LPSSortOrderSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSTR = {"_p_LPSTR", "LPSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPTSTR = {"_p_LPTSTR", "LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPUNKNOWN = {"_p_LPUNKNOWN", "LPUNKNOWN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPVOID = {"_p_LPVOID", "LPVOID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MAPIAdviseSink = {"_p_MAPIAdviseSink", "MAPIAdviseSink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MAPIINIT_0 = {"_p_MAPIINIT_0", "MAPIINIT *|MAPIINIT_0 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MAPINotifSink = {"_p_MAPINotifSink", "MAPINotifSink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_STATSTG = {"_p_STATSTG", "STATSTG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stream = {"_p_Stream", "Stream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ULARGE_INTEGER = {"_p_ULARGE_INTEGER", "ULARGE_INTEGER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ULONG = {"_p_ULONG", "ULONG *|BOOKMARK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ECLogger = {"_p_p_ECLogger", "ECLogger **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IAddrBook = {"_p_p_IAddrBook", "IAddrBook **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IAttach = {"_p_p_IAttach", "IAttach **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPIFolder = {"_p_p_IMAPIFolder", "IMAPIFolder **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPISession = {"_p_p_IMAPISession", "IMAPISession **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPITable = {"_p_p_IMAPITable", "IMAPITable **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMessage = {"_p_p_IMessage", "IMessage **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMsgServiceAdmin = {"_p_p_IMsgServiceAdmin", "IMsgServiceAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMsgStore = {"_p_p_IMsgStore", "IMsgStore **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProfAdmin = {"_p_p_IProfAdmin", "IProfAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProfSect = {"_p_p_IProfSect", "IProfSect **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProviderAdmin = {"_p_p_IProviderAdmin", "IProviderAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IStream = {"_p_p_IStream", "IStream **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Stream = {"_p_p_Stream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IUnknown = {"_p_p_IUnknown", "IUnknown **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPIStatus = {"_p_p_IMAPIStatus", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECSingleInstance = {"_p_p_IECSingleInstance", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeManageStore = {"_p_p_IExchangeManageStore", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMailUser = {"_p_p_IMailUser", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeImportContentsChanges = {"_p_p_IExchangeImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeImportHierarchyChanges = {"_p_p_IExchangeImportHierarchyChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeExportChanges = {"_p_p_IExchangeExportChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ECImportContentsChanges = {"_p_p_ECImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECImportContentsChanges = {"_p_p_IECImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECExportChanges = {"_p_p_IECExportChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ExchangeExportChanges = {"_p_p_ExchangeExportChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ExchangeImportHierarchyChanges = {"_p_p_ExchangeImportHierarchyChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ExchangeImportContentsChanges = {"_p_p_ExchangeImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECServiceAdmin = {"_p_p_IECServiceAdmin", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeModifyTable = {"_p_p_IExchangeModifyTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECChangeAdvisor = {"_p_p_IECChangeAdvisor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IDistList = {"_p_p_IDistList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECMultiStoreTable = {"_p_p_IECMultiStoreTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIContainer = {"_p_p_IMAPIContainer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IABContainer = {"_p_p_IABContainer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ISequentialStream = {"_p_p_ISequentialStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECTestProtocol = {"_p_p_IECTestProtocol", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IProxyStoreObject = {"_p_p_IProxyStoreObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_MAPINotifSink = {"_p_p_MAPINotifSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECLicense = {"_p_p_IECLicense", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIProp = {"_p_p_IMAPIProp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIAdviseSink = {"_p_p_IMAPIAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_MAPIAdviseSink = {"_p_p_MAPIAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECChangeAdviseSink = {"_p_p_IECChangeAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ECChangeAdviseSink = {"_p_p_ECChangeAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIProgress = {"_p_p_IMAPIProgress", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_LPMAPINAMEID = {"_p_p_LPMAPINAMEID", "LPMAPINAMEID **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_LPTSTR = {"_p_p_LPTSTR", "LPTSTR **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_MAPIERROR = {"_p_p_MAPIERROR", "MAPIERROR **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagLOCKTYPE = {"_p_tagLOCKTYPE", "enum tagLOCKTYPE *|LOCKTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTATFLAG = {"_p_tagSTATFLAG", "enum tagSTATFLAG *|STATFLAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTGTY = {"_p_tagSTGTY", "enum tagSTGTY *|STGTY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTREAM_SEEK = {"_p_tagSTREAM_SEEK", "enum tagSTREAM_SEEK *|STREAM_SEEK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BYTE,
  &_swigt__p_ECChangeAdviseSink,
  &_swigt__p_ECImportContentsChanges,
  &_swigt__p_ECLogger,
  &_swigt__p_ECSimpleLogger,
  &_swigt__p_ECSyncLog,
  &_swigt__p_ECSyncSettings,
  &_swigt__p_ExchangeExportChanges,
  &_swigt__p_ExchangeImportContentsChanges,
  &_swigt__p_ExchangeImportHierarchyChanges,
  &_swigt__p_GUID,
  &_swigt__p_IABContainer,
  &_swigt__p_IAddrBook,
  &_swigt__p_IAttach,
  &_swigt__p_IDistList,
  &_swigt__p_IECChangeAdviseSink,
  &_swigt__p_IECChangeAdvisor,
  &_swigt__p_IECExportChanges,
  &_swigt__p_IECImportContentsChanges,
  &_swigt__p_IECLicense,
  &_swigt__p_IECMultiStoreTable,
  &_swigt__p_IECServiceAdmin,
  &_swigt__p_IECSingleInstance,
  &_swigt__p_IECSpooler,
  &_swigt__p_IECTestProtocol,
  &_swigt__p_IExchangeExportChanges,
  &_swigt__p_IExchangeImportContentsChanges,
  &_swigt__p_IExchangeImportHierarchyChanges,
  &_swigt__p_IExchangeManageStore,
  &_swigt__p_IExchangeModifyTable,
  &_swigt__p_IID,
  &_swigt__p_IMAPIAdviseSink,
  &_swigt__p_IMAPIContainer,
  &_swigt__p_IMAPIFolder,
  &_swigt__p_IMAPIProgress,
  &_swigt__p_IMAPIProp,
  &_swigt__p_IMAPISession,
  &_swigt__p_IMAPIStatus,
  &_swigt__p_IMAPITable,
  &_swigt__p_IMailUser,
  &_swigt__p_IMessage,
  &_swigt__p_IMsgServiceAdmin,
  &_swigt__p_IMsgStore,
  &_swigt__p_IProfAdmin,
  &_swigt__p_IProfSect,
  &_swigt__p_IProviderAdmin,
  &_swigt__p_IProxyStoreObject,
  &_swigt__p_ISequentialStream,
  &_swigt__p_IStream,
  &_swigt__p_IUnknown,
  &_swigt__p_LARGE_INTEGER,
  &_swigt__p_LONG,
  &_swigt__p_LPADRENTRY,
  &_swigt__p_LPADRLIST,
  &_swigt__p_LPADRPARM,
  &_swigt__p_LPBYTE,
  &_swigt__p_LPCIID,
  &_swigt__p_LPECCOMPANY,
  &_swigt__p_LPECGROUP,
  &_swigt__p_LPECQUOTA,
  &_swigt__p_LPECQUOTASTATUS,
  &_swigt__p_LPECSERVERLIST,
  &_swigt__p_LPECSVRNAMELIST,
  &_swigt__p_LPECUSER,
  &_swigt__p_LPECUSERCLIENTUPDATESTATUS,
  &_swigt__p_LPENTRYID,
  &_swigt__p_LPENTRYLIST,
  &_swigt__p_LPFNBUTTON,
  &_swigt__p_LPFNDISMISS,
  &_swigt__p_LPFlagList,
  &_swigt__p_LPGUID,
  &_swigt__p_LPMAPIADVISESINK,
  &_swigt__p_LPMAPIERROR,
  &_swigt__p_LPMAPIFOLDER,
  &_swigt__p_LPMAPINAMEID,
  &_swigt__p_LPMAPIPROP,
  &_swigt__p_LPMAPITABLE,
  &_swigt__p_LPMAPIUID,
  &_swigt__p_LPMDB,
  &_swigt__p_LPMESSAGE,
  &_swigt__p_LPNOTIFICATION,
  &_swigt__p_LPREADSTATE,
  &_swigt__p_LPROWLIST,
  &_swigt__p_LPSPropProblemArray,
  &_swigt__p_LPSPropTagArray,
  &_swigt__p_LPSPropValue,
  &_swigt__p_LPSRestriction,
  &_swigt__p_LPSRowSet,
  &_swigt__p_LPSSortOrderSet,
  &_swigt__p_LPSTR,
  &_swigt__p_LPTSTR,
  &_swigt__p_LPUNKNOWN,
  &_swigt__p_LPVOID,
  &_swigt__p_MAPIAdviseSink,
  &_swigt__p_MAPIINIT_0,
  &_swigt__p_MAPINotifSink,
  &_swigt__p_STATSTG,
  &_swigt__p_Stream,
  &_swigt__p_ULARGE_INTEGER,
  &_swigt__p_ULONG,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_p_ECChangeAdviseSink,
  &_swigt__p_p_ECImportContentsChanges,
  &_swigt__p_p_ECLogger,
  &_swigt__p_p_ExchangeExportChanges,
  &_swigt__p_p_ExchangeImportContentsChanges,
  &_swigt__p_p_ExchangeImportHierarchyChanges,
  &_swigt__p_p_IABContainer,
  &_swigt__p_p_IAddrBook,
  &_swigt__p_p_IAttach,
  &_swigt__p_p_IDistList,
  &_swigt__p_p_IECChangeAdviseSink,
  &_swigt__p_p_IECChangeAdvisor,
  &_swigt__p_p_IECExportChanges,
  &_swigt__p_p_IECImportContentsChanges,
  &_swigt__p_p_IECLicense,
  &_swigt__p_p_IECMultiStoreTable,
  &_swigt__p_p_IECServiceAdmin,
  &_swigt__p_p_IECSingleInstance,
  &_swigt__p_p_IECTestProtocol,
  &_swigt__p_p_IExchangeExportChanges,
  &_swigt__p_p_IExchangeImportContentsChanges,
  &_swigt__p_p_IExchangeImportHierarchyChanges,
  &_swigt__p_p_IExchangeManageStore,
  &_swigt__p_p_IExchangeModifyTable,
  &_swigt__p_p_IMAPIAdviseSink,
  &_swigt__p_p_IMAPIContainer,
  &_swigt__p_p_IMAPIFolder,
  &_swigt__p_p_IMAPIProgress,
  &_swigt__p_p_IMAPIProp,
  &_swigt__p_p_IMAPISession,
  &_swigt__p_p_IMAPIStatus,
  &_swigt__p_p_IMAPITable,
  &_swigt__p_p_IMailUser,
  &_swigt__p_p_IMessage,
  &_swigt__p_p_IMsgServiceAdmin,
  &_swigt__p_p_IMsgStore,
  &_swigt__p_p_IProfAdmin,
  &_swigt__p_p_IProfSect,
  &_swigt__p_p_IProviderAdmin,
  &_swigt__p_p_IProxyStoreObject,
  &_swigt__p_p_ISequentialStream,
  &_swigt__p_p_IStream,
  &_swigt__p_p_IUnknown,
  &_swigt__p_p_LPMAPINAMEID,
  &_swigt__p_p_LPTSTR,
  &_swigt__p_p_MAPIAdviseSink,
  &_swigt__p_p_MAPIERROR,
  &_swigt__p_p_MAPINotifSink,
  &_swigt__p_p_Stream,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_void,
  &_swigt__p_tagLOCKTYPE,
  &_swigt__p_tagSTATFLAG,
  &_swigt__p_tagSTGTY,
  &_swigt__p_tagSTREAM_SEEK,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_BYTE[] = {  {&_swigt__p_BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECChangeAdviseSink[] = {  {&_swigt__p_ECChangeAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECImportContentsChanges[] = {  {&_swigt__p_ECImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECLogger[] = {  {&_swigt__p_ECLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECSimpleLogger[] = {  {&_swigt__p_ECSimpleLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECSyncLog[] = {  {&_swigt__p_ECSyncLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECSyncSettings[] = {  {&_swigt__p_ECSyncSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExchangeExportChanges[] = {  {&_swigt__p_ExchangeExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExchangeImportContentsChanges[] = {  {&_swigt__p_ExchangeImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExchangeImportHierarchyChanges[] = {  {&_swigt__p_ExchangeImportHierarchyChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GUID[] = {  {&_swigt__p_GUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IABContainer[] = {  {&_swigt__p_IABContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAddrBook[] = {  {&_swigt__p_IAddrBook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAttach[] = {  {&_swigt__p_IAttach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDistList[] = {  {&_swigt__p_IDistList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECChangeAdviseSink[] = {  {&_swigt__p_IECChangeAdviseSink, 0, 0, 0},  {&_swigt__p_ECChangeAdviseSink, _p_ECChangeAdviseSinkTo_p_IECChangeAdviseSink, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECChangeAdvisor[] = {  {&_swigt__p_IECChangeAdvisor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECExportChanges[] = {  {&_swigt__p_IECExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECImportContentsChanges[] = {  {&_swigt__p_IECImportContentsChanges, 0, 0, 0},  {&_swigt__p_ECImportContentsChanges, _p_ECImportContentsChangesTo_p_IECImportContentsChanges, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECLicense[] = {  {&_swigt__p_IECLicense, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECMultiStoreTable[] = {  {&_swigt__p_IECMultiStoreTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECServiceAdmin[] = {  {&_swigt__p_IECServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECSingleInstance[] = {  {&_swigt__p_IECSingleInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECSpooler[] = {  {&_swigt__p_IECSpooler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECTestProtocol[] = {  {&_swigt__p_IECTestProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeExportChanges[] = {  {&_swigt__p_IExchangeExportChanges, 0, 0, 0},  {&_swigt__p_ExchangeExportChanges, _p_ExchangeExportChangesTo_p_IExchangeExportChanges, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeImportContentsChanges[] = {  {&_swigt__p_IExchangeImportContentsChanges, 0, 0, 0},  {&_swigt__p_ExchangeImportContentsChanges, _p_ExchangeImportContentsChangesTo_p_IExchangeImportContentsChanges, 0, 0},  {&_swigt__p_IECImportContentsChanges, _p_IECImportContentsChangesTo_p_IExchangeImportContentsChanges, 0, 0},  {&_swigt__p_ECImportContentsChanges, _p_ECImportContentsChangesTo_p_IExchangeImportContentsChanges, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeImportHierarchyChanges[] = {  {&_swigt__p_IExchangeImportHierarchyChanges, 0, 0, 0},  {&_swigt__p_ExchangeImportHierarchyChanges, _p_ExchangeImportHierarchyChangesTo_p_IExchangeImportHierarchyChanges, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeManageStore[] = {  {&_swigt__p_IExchangeManageStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeModifyTable[] = {  {&_swigt__p_IExchangeModifyTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IID[] = {  {&_swigt__p_IID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIAdviseSink[] = {  {&_swigt__p_MAPINotifSink, _p_MAPINotifSinkTo_p_IMAPIAdviseSink, 0, 0},  {&_swigt__p_IMAPIAdviseSink, 0, 0, 0},  {&_swigt__p_MAPIAdviseSink, _p_MAPIAdviseSinkTo_p_IMAPIAdviseSink, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIContainer[] = {  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IMAPIContainer, 0, 0},  {&_swigt__p_IMAPIContainer, 0, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IMAPIContainer, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IMAPIContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIFolder[] = {  {&_swigt__p_IMAPIFolder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIProgress[] = {  {&_swigt__p_IMAPIProgress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIProp[] = {  {&_swigt__p_IMAPIStatus, _p_IMAPIStatusTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMsgStore, _p_IMsgStoreTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMailUser, _p_IMailUserTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IAddrBook, _p_IAddrBookTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IAttach, _p_IAttachTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMessage, _p_IMessageTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IProfSect, _p_IProfSectTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIContainer, _p_IMAPIContainerTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIProp, 0, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IMAPIProp, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPISession[] = {  {&_swigt__p_IMAPISession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIStatus[] = {  {&_swigt__p_IMAPIStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPITable[] = {  {&_swigt__p_IMAPITable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMailUser[] = {  {&_swigt__p_IMailUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMessage[] = {  {&_swigt__p_IMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMsgServiceAdmin[] = {  {&_swigt__p_IMsgServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMsgStore[] = {  {&_swigt__p_IMsgStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProfAdmin[] = {  {&_swigt__p_IProfAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProfSect[] = {  {&_swigt__p_IProfSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProviderAdmin[] = {  {&_swigt__p_IProviderAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProxyStoreObject[] = {  {&_swigt__p_IProxyStoreObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISequentialStream[] = {  {&_swigt__p_IStream, _p_IStreamTo_p_ISequentialStream, 0, 0},  {&_swigt__p_Stream, _p_StreamTo_p_ISequentialStream, 0, 0},  {&_swigt__p_ISequentialStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IStream[] = {  {&_swigt__p_IStream, 0, 0, 0},  {&_swigt__p_Stream, _p_StreamTo_p_IStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IUnknown[] = {  {&_swigt__p_IMAPIStatus, _p_IMAPIStatusTo_p_IUnknown, 0, 0},  {&_swigt__p_IECSingleInstance, _p_IECSingleInstanceTo_p_IUnknown, 0, 0},  {&_swigt__p_IAddrBook, _p_IAddrBookTo_p_IUnknown, 0, 0},  {&_swigt__p_IMessage, _p_IMessageTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeManageStore, _p_IExchangeManageStoreTo_p_IUnknown, 0, 0},  {&_swigt__p_IMailUser, _p_IMailUserTo_p_IUnknown, 0, 0},  {&_swigt__p_IMsgStore, _p_IMsgStoreTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeImportContentsChanges, _p_IExchangeImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeImportHierarchyChanges, _p_IExchangeImportHierarchyChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeExportChanges, _p_IExchangeExportChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_ECImportContentsChanges, _p_ECImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IECImportContentsChanges, _p_IECImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IECExportChanges, _p_IECExportChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_ExchangeExportChanges, _p_ExchangeExportChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_ExchangeImportHierarchyChanges, _p_ExchangeImportHierarchyChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_ExchangeImportContentsChanges, _p_ExchangeImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IECServiceAdmin, _p_IECServiceAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IMsgServiceAdmin, _p_IMsgServiceAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IUnknown, 0, 0, 0},  {&_swigt__p_IProviderAdmin, _p_IProviderAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IAttach, _p_IAttachTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeModifyTable, _p_IExchangeModifyTableTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPITable, _p_IMAPITableTo_p_IUnknown, 0, 0},  {&_swigt__p_IECChangeAdvisor, _p_IECChangeAdvisorTo_p_IUnknown, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IUnknown, 0, 0},  {&_swigt__p_IECMultiStoreTable, _p_IECMultiStoreTableTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIContainer, _p_IMAPIContainerTo_p_IUnknown, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPISession, _p_IMAPISessionTo_p_IUnknown, 0, 0},  {&_swigt__p_ISequentialStream, _p_ISequentialStreamTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IUnknown, 0, 0},  {&_swigt__p_IECTestProtocol, _p_IECTestProtocolTo_p_IUnknown, 0, 0},  {&_swigt__p_MAPINotifSink, _p_MAPINotifSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IProxyStoreObject, _p_IProxyStoreObjectTo_p_IUnknown, 0, 0},  {&_swigt__p_IECLicense, _p_IECLicenseTo_p_IUnknown, 0, 0},  {&_swigt__p_IProfAdmin, _p_IProfAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIProp, _p_IMAPIPropTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIAdviseSink, _p_IMAPIAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_MAPIAdviseSink, _p_MAPIAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IECChangeAdviseSink, _p_IECChangeAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_ECChangeAdviseSink, _p_ECChangeAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIProgress, _p_IMAPIProgressTo_p_IUnknown, 0, 0},  {&_swigt__p_Stream, _p_StreamTo_p_IUnknown, 0, 0},  {&_swigt__p_IStream, _p_IStreamTo_p_IUnknown, 0, 0},  {&_swigt__p_IProfSect, _p_IProfSectTo_p_IUnknown, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LARGE_INTEGER[] = {  {&_swigt__p_LARGE_INTEGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LONG[] = {  {&_swigt__p_LONG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRENTRY[] = {  {&_swigt__p_LPADRENTRY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRLIST[] = {  {&_swigt__p_LPADRLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRPARM[] = {  {&_swigt__p_LPADRPARM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPBYTE[] = {  {&_swigt__p_LPBYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPCIID[] = {  {&_swigt__p_LPCIID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECCOMPANY[] = {  {&_swigt__p_LPECCOMPANY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECGROUP[] = {  {&_swigt__p_LPECGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECQUOTA[] = {  {&_swigt__p_LPECQUOTA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECQUOTASTATUS[] = {  {&_swigt__p_LPECQUOTASTATUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECSERVERLIST[] = {  {&_swigt__p_LPECSERVERLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECSVRNAMELIST[] = {  {&_swigt__p_LPECSVRNAMELIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECUSER[] = {  {&_swigt__p_LPECUSER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECUSERCLIENTUPDATESTATUS[] = {  {&_swigt__p_LPECUSERCLIENTUPDATESTATUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPENTRYID[] = {  {&_swigt__p_LPENTRYID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPENTRYLIST[] = {  {&_swigt__p_LPENTRYLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFNBUTTON[] = {  {&_swigt__p_LPFNBUTTON, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFNDISMISS[] = {  {&_swigt__p_LPFNDISMISS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFlagList[] = {  {&_swigt__p_LPFlagList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPGUID[] = {  {&_swigt__p_LPGUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIADVISESINK[] = {  {&_swigt__p_LPMAPIADVISESINK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIERROR[] = {  {&_swigt__p_LPMAPIERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIFOLDER[] = {  {&_swigt__p_LPMAPIFOLDER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPINAMEID[] = {  {&_swigt__p_LPMAPINAMEID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIPROP[] = {  {&_swigt__p_LPMAPIPROP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPITABLE[] = {  {&_swigt__p_LPMAPITABLE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIUID[] = {  {&_swigt__p_LPMAPIUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMDB[] = {  {&_swigt__p_LPMDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMESSAGE[] = {  {&_swigt__p_LPMESSAGE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPNOTIFICATION[] = {  {&_swigt__p_LPNOTIFICATION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPREADSTATE[] = {  {&_swigt__p_LPREADSTATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPROWLIST[] = {  {&_swigt__p_LPROWLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropProblemArray[] = {  {&_swigt__p_LPSPropProblemArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropTagArray[] = {  {&_swigt__p_LPSPropTagArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropValue[] = {  {&_swigt__p_LPSPropValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSRestriction[] = {  {&_swigt__p_LPSRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSRowSet[] = {  {&_swigt__p_LPSRowSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSSortOrderSet[] = {  {&_swigt__p_LPSSortOrderSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSTR[] = {  {&_swigt__p_LPSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPTSTR[] = {  {&_swigt__p_LPTSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPUNKNOWN[] = {  {&_swigt__p_LPUNKNOWN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPVOID[] = {  {&_swigt__p_LPVOID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MAPIAdviseSink[] = {  {&_swigt__p_MAPIAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MAPIINIT_0[] = {  {&_swigt__p_MAPIINIT_0, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MAPINotifSink[] = {  {&_swigt__p_MAPINotifSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_STATSTG[] = {  {&_swigt__p_STATSTG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stream[] = {  {&_swigt__p_Stream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ULARGE_INTEGER[] = {  {&_swigt__p_ULARGE_INTEGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ULONG[] = {  {&_swigt__p_ULONG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ECLogger[] = {  {&_swigt__p_p_ECLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IAddrBook[] = {  {&_swigt__p_p_IAddrBook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IAttach[] = {  {&_swigt__p_p_IAttach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIFolder[] = {  {&_swigt__p_p_IMAPIFolder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPISession[] = {  {&_swigt__p_p_IMAPISession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPITable[] = {  {&_swigt__p_p_IMAPITable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMessage[] = {  {&_swigt__p_p_IMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMsgServiceAdmin[] = {  {&_swigt__p_p_IMsgServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMsgStore[] = {  {&_swigt__p_p_IMsgStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProfAdmin[] = {  {&_swigt__p_p_IProfAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProfSect[] = {  {&_swigt__p_p_IProfSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProviderAdmin[] = {  {&_swigt__p_p_IProviderAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Stream[] = {{&_swigt__p_p_Stream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IStream[] = {  {&_swigt__p_p_IStream, 0, 0, 0},  {&_swigt__p_p_Stream, _p_p_StreamTo_p_p_IStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIStatus[] = {{&_swigt__p_p_IMAPIStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECSingleInstance[] = {{&_swigt__p_p_IECSingleInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeManageStore[] = {{&_swigt__p_p_IExchangeManageStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMailUser[] = {{&_swigt__p_p_IMailUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeImportContentsChanges[] = {{&_swigt__p_p_IExchangeImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeImportHierarchyChanges[] = {{&_swigt__p_p_IExchangeImportHierarchyChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeExportChanges[] = {{&_swigt__p_p_IExchangeExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ECImportContentsChanges[] = {{&_swigt__p_p_ECImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECImportContentsChanges[] = {{&_swigt__p_p_IECImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECExportChanges[] = {{&_swigt__p_p_IECExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ExchangeExportChanges[] = {{&_swigt__p_p_ExchangeExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ExchangeImportHierarchyChanges[] = {{&_swigt__p_p_ExchangeImportHierarchyChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ExchangeImportContentsChanges[] = {{&_swigt__p_p_ExchangeImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECServiceAdmin[] = {{&_swigt__p_p_IECServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeModifyTable[] = {{&_swigt__p_p_IExchangeModifyTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECChangeAdvisor[] = {{&_swigt__p_p_IECChangeAdvisor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IDistList[] = {{&_swigt__p_p_IDistList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECMultiStoreTable[] = {{&_swigt__p_p_IECMultiStoreTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIContainer[] = {{&_swigt__p_p_IMAPIContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IABContainer[] = {{&_swigt__p_p_IABContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ISequentialStream[] = {{&_swigt__p_p_ISequentialStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECTestProtocol[] = {{&_swigt__p_p_IECTestProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProxyStoreObject[] = {{&_swigt__p_p_IProxyStoreObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MAPINotifSink[] = {{&_swigt__p_p_MAPINotifSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECLicense[] = {{&_swigt__p_p_IECLicense, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIProp[] = {{&_swigt__p_p_IMAPIProp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIAdviseSink[] = {{&_swigt__p_p_IMAPIAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MAPIAdviseSink[] = {{&_swigt__p_p_MAPIAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECChangeAdviseSink[] = {{&_swigt__p_p_IECChangeAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ECChangeAdviseSink[] = {{&_swigt__p_p_ECChangeAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIProgress[] = {{&_swigt__p_p_IMAPIProgress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IUnknown[] = {  {&_swigt__p_p_IMAPIStatus, _p_p_IMAPIStatusTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECSingleInstance, _p_p_IECSingleInstanceTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IAddrBook, _p_p_IAddrBookTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMessage, _p_p_IMessageTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeManageStore, _p_p_IExchangeManageStoreTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMailUser, _p_p_IMailUserTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMsgStore, _p_p_IMsgStoreTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeImportContentsChanges, _p_p_IExchangeImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeImportHierarchyChanges, _p_p_IExchangeImportHierarchyChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeExportChanges, _p_p_IExchangeExportChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ECImportContentsChanges, _p_p_ECImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECImportContentsChanges, _p_p_IECImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECExportChanges, _p_p_IECExportChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ExchangeExportChanges, _p_p_ExchangeExportChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ExchangeImportHierarchyChanges, _p_p_ExchangeImportHierarchyChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ExchangeImportContentsChanges, _p_p_ExchangeImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECServiceAdmin, _p_p_IECServiceAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMsgServiceAdmin, _p_p_IMsgServiceAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IUnknown, 0, 0, 0},  {&_swigt__p_p_IProviderAdmin, _p_p_IProviderAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IAttach, _p_p_IAttachTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeModifyTable, _p_p_IExchangeModifyTableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPITable, _p_p_IMAPITableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECChangeAdvisor, _p_p_IECChangeAdvisorTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IDistList, _p_p_IDistListTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECMultiStoreTable, _p_p_IECMultiStoreTableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIContainer, _p_p_IMAPIContainerTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IABContainer, _p_p_IABContainerTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPISession, _p_p_IMAPISessionTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ISequentialStream, _p_p_ISequentialStreamTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIFolder, _p_p_IMAPIFolderTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECTestProtocol, _p_p_IECTestProtocolTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProxyStoreObject, _p_p_IProxyStoreObjectTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_MAPINotifSink, _p_p_MAPINotifSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECLicense, _p_p_IECLicenseTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProfAdmin, _p_p_IProfAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIProp, _p_p_IMAPIPropTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIAdviseSink, _p_p_IMAPIAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_MAPIAdviseSink, _p_p_MAPIAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECChangeAdviseSink, _p_p_IECChangeAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ECChangeAdviseSink, _p_p_ECChangeAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIProgress, _p_p_IMAPIProgressTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_Stream, _p_p_StreamTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProfSect, _p_p_IProfSectTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IStream, _p_p_IStreamTo_p_p_IUnknown, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_LPMAPINAMEID[] = {  {&_swigt__p_p_LPMAPINAMEID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_LPTSTR[] = {  {&_swigt__p_p_LPTSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MAPIERROR[] = {  {&_swigt__p_p_MAPIERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagLOCKTYPE[] = {  {&_swigt__p_tagLOCKTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTATFLAG[] = {  {&_swigt__p_tagSTATFLAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTGTY[] = {  {&_swigt__p_tagSTGTY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTREAM_SEEK[] = {  {&_swigt__p_tagSTREAM_SEEK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BYTE,
  _swigc__p_ECChangeAdviseSink,
  _swigc__p_ECImportContentsChanges,
  _swigc__p_ECLogger,
  _swigc__p_ECSimpleLogger,
  _swigc__p_ECSyncLog,
  _swigc__p_ECSyncSettings,
  _swigc__p_ExchangeExportChanges,
  _swigc__p_ExchangeImportContentsChanges,
  _swigc__p_ExchangeImportHierarchyChanges,
  _swigc__p_GUID,
  _swigc__p_IABContainer,
  _swigc__p_IAddrBook,
  _swigc__p_IAttach,
  _swigc__p_IDistList,
  _swigc__p_IECChangeAdviseSink,
  _swigc__p_IECChangeAdvisor,
  _swigc__p_IECExportChanges,
  _swigc__p_IECImportContentsChanges,
  _swigc__p_IECLicense,
  _swigc__p_IECMultiStoreTable,
  _swigc__p_IECServiceAdmin,
  _swigc__p_IECSingleInstance,
  _swigc__p_IECSpooler,
  _swigc__p_IECTestProtocol,
  _swigc__p_IExchangeExportChanges,
  _swigc__p_IExchangeImportContentsChanges,
  _swigc__p_IExchangeImportHierarchyChanges,
  _swigc__p_IExchangeManageStore,
  _swigc__p_IExchangeModifyTable,
  _swigc__p_IID,
  _swigc__p_IMAPIAdviseSink,
  _swigc__p_IMAPIContainer,
  _swigc__p_IMAPIFolder,
  _swigc__p_IMAPIProgress,
  _swigc__p_IMAPIProp,
  _swigc__p_IMAPISession,
  _swigc__p_IMAPIStatus,
  _swigc__p_IMAPITable,
  _swigc__p_IMailUser,
  _swigc__p_IMessage,
  _swigc__p_IMsgServiceAdmin,
  _swigc__p_IMsgStore,
  _swigc__p_IProfAdmin,
  _swigc__p_IProfSect,
  _swigc__p_IProviderAdmin,
  _swigc__p_IProxyStoreObject,
  _swigc__p_ISequentialStream,
  _swigc__p_IStream,
  _swigc__p_IUnknown,
  _swigc__p_LARGE_INTEGER,
  _swigc__p_LONG,
  _swigc__p_LPADRENTRY,
  _swigc__p_LPADRLIST,
  _swigc__p_LPADRPARM,
  _swigc__p_LPBYTE,
  _swigc__p_LPCIID,
  _swigc__p_LPECCOMPANY,
  _swigc__p_LPECGROUP,
  _swigc__p_LPECQUOTA,
  _swigc__p_LPECQUOTASTATUS,
  _swigc__p_LPECSERVERLIST,
  _swigc__p_LPECSVRNAMELIST,
  _swigc__p_LPECUSER,
  _swigc__p_LPECUSERCLIENTUPDATESTATUS,
  _swigc__p_LPENTRYID,
  _swigc__p_LPENTRYLIST,
  _swigc__p_LPFNBUTTON,
  _swigc__p_LPFNDISMISS,
  _swigc__p_LPFlagList,
  _swigc__p_LPGUID,
  _swigc__p_LPMAPIADVISESINK,
  _swigc__p_LPMAPIERROR,
  _swigc__p_LPMAPIFOLDER,
  _swigc__p_LPMAPINAMEID,
  _swigc__p_LPMAPIPROP,
  _swigc__p_LPMAPITABLE,
  _swigc__p_LPMAPIUID,
  _swigc__p_LPMDB,
  _swigc__p_LPMESSAGE,
  _swigc__p_LPNOTIFICATION,
  _swigc__p_LPREADSTATE,
  _swigc__p_LPROWLIST,
  _swigc__p_LPSPropProblemArray,
  _swigc__p_LPSPropTagArray,
  _swigc__p_LPSPropValue,
  _swigc__p_LPSRestriction,
  _swigc__p_LPSRowSet,
  _swigc__p_LPSSortOrderSet,
  _swigc__p_LPSTR,
  _swigc__p_LPTSTR,
  _swigc__p_LPUNKNOWN,
  _swigc__p_LPVOID,
  _swigc__p_MAPIAdviseSink,
  _swigc__p_MAPIINIT_0,
  _swigc__p_MAPINotifSink,
  _swigc__p_STATSTG,
  _swigc__p_Stream,
  _swigc__p_ULARGE_INTEGER,
  _swigc__p_ULONG,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_p_ECChangeAdviseSink,
  _swigc__p_p_ECImportContentsChanges,
  _swigc__p_p_ECLogger,
  _swigc__p_p_ExchangeExportChanges,
  _swigc__p_p_ExchangeImportContentsChanges,
  _swigc__p_p_ExchangeImportHierarchyChanges,
  _swigc__p_p_IABContainer,
  _swigc__p_p_IAddrBook,
  _swigc__p_p_IAttach,
  _swigc__p_p_IDistList,
  _swigc__p_p_IECChangeAdviseSink,
  _swigc__p_p_IECChangeAdvisor,
  _swigc__p_p_IECExportChanges,
  _swigc__p_p_IECImportContentsChanges,
  _swigc__p_p_IECLicense,
  _swigc__p_p_IECMultiStoreTable,
  _swigc__p_p_IECServiceAdmin,
  _swigc__p_p_IECSingleInstance,
  _swigc__p_p_IECTestProtocol,
  _swigc__p_p_IExchangeExportChanges,
  _swigc__p_p_IExchangeImportContentsChanges,
  _swigc__p_p_IExchangeImportHierarchyChanges,
  _swigc__p_p_IExchangeManageStore,
  _swigc__p_p_IExchangeModifyTable,
  _swigc__p_p_IMAPIAdviseSink,
  _swigc__p_p_IMAPIContainer,
  _swigc__p_p_IMAPIFolder,
  _swigc__p_p_IMAPIProgress,
  _swigc__p_p_IMAPIProp,
  _swigc__p_p_IMAPISession,
  _swigc__p_p_IMAPIStatus,
  _swigc__p_p_IMAPITable,
  _swigc__p_p_IMailUser,
  _swigc__p_p_IMessage,
  _swigc__p_p_IMsgServiceAdmin,
  _swigc__p_p_IMsgStore,
  _swigc__p_p_IProfAdmin,
  _swigc__p_p_IProfSect,
  _swigc__p_p_IProviderAdmin,
  _swigc__p_p_IProxyStoreObject,
  _swigc__p_p_ISequentialStream,
  _swigc__p_p_IStream,
  _swigc__p_p_IUnknown,
  _swigc__p_p_LPMAPINAMEID,
  _swigc__p_p_LPTSTR,
  _swigc__p_p_MAPIAdviseSink,
  _swigc__p_p_MAPIERROR,
  _swigc__p_p_MAPINotifSink,
  _swigc__p_p_Stream,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_void,
  _swigc__p_tagLOCKTYPE,
  _swigc__p_tagSTATFLAG,
  _swigc__p_tagSTGTY,
  _swigc__p_tagSTREAM_SEEK,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
  Init();
  
  SWIG_Python_SetConstant(d, "STGM_DIRECT",SWIG_From_long(static_cast< long >(0x00000000L)));
  SWIG_Python_SetConstant(d, "STGM_TRANSACTED",SWIG_From_long(static_cast< long >(0x00010000L)));
  SWIG_Python_SetConstant(d, "STGM_SIMPLE",SWIG_From_long(static_cast< long >(0x08000000L)));
  SWIG_Python_SetConstant(d, "STGM_READ",SWIG_From_long(static_cast< long >(0x00000000L)));
  SWIG_Python_SetConstant(d, "STGM_WRITE",SWIG_From_long(static_cast< long >(0x00000001L)));
  SWIG_Python_SetConstant(d, "STGM_READWRITE",SWIG_From_long(static_cast< long >(0x00000002L)));
  SWIG_Python_SetConstant(d, "STGM_SHARE_DENY_NONE",SWIG_From_long(static_cast< long >(0x00000040L)));
  SWIG_Python_SetConstant(d, "STGM_SHARE_DENY_READ",SWIG_From_long(static_cast< long >(0x00000030L)));
  SWIG_Python_SetConstant(d, "STGM_SHARE_DENY_WRITE",SWIG_From_long(static_cast< long >(0x00000020L)));
  SWIG_Python_SetConstant(d, "STGM_SHARE_EXCLUSIVE",SWIG_From_long(static_cast< long >(0x00000010L)));
  SWIG_Python_SetConstant(d, "STGM_PRIORITY",SWIG_From_long(static_cast< long >(0x00040000L)));
  SWIG_Python_SetConstant(d, "STGM_DELETEONRELEASE",SWIG_From_long(static_cast< long >(0x04000000L)));
  SWIG_Python_SetConstant(d, "STGM_NOSCRATCH",SWIG_From_long(static_cast< long >(0x00100000L)));
  SWIG_Python_SetConstant(d, "STGM_CREATE",SWIG_From_long(static_cast< long >(0x00001000L)));
  SWIG_Python_SetConstant(d, "STGM_CONVERT",SWIG_From_long(static_cast< long >(0x00020000L)));
  SWIG_Python_SetConstant(d, "STGM_FAILIFTHERE",SWIG_From_long(static_cast< long >(0x00000000L)));
  SWIG_Python_SetConstant(d, "STGM_NOSNAPSHOT",SWIG_From_long(static_cast< long >(0x00200000L)));
  SWIG_Python_SetConstant(d, "STGM_DIRECT_SWMR",SWIG_From_long(static_cast< long >(0x00400000L)));
  SWIG_Python_SetConstant(d, "STGTY_STORAGE",SWIG_From_int(static_cast< int >(STGTY_STORAGE)));
  SWIG_Python_SetConstant(d, "STGTY_STREAM",SWIG_From_int(static_cast< int >(STGTY_STREAM)));
  SWIG_Python_SetConstant(d, "STGTY_LOCKBYTES",SWIG_From_int(static_cast< int >(STGTY_LOCKBYTES)));
  SWIG_Python_SetConstant(d, "STGTY_PROPERTY",SWIG_From_int(static_cast< int >(STGTY_PROPERTY)));
  SWIG_Python_SetConstant(d, "STREAM_SEEK_SET",SWIG_From_int(static_cast< int >(STREAM_SEEK_SET)));
  SWIG_Python_SetConstant(d, "STREAM_SEEK_CUR",SWIG_From_int(static_cast< int >(STREAM_SEEK_CUR)));
  SWIG_Python_SetConstant(d, "STREAM_SEEK_END",SWIG_From_int(static_cast< int >(STREAM_SEEK_END)));
  SWIG_Python_SetConstant(d, "LOCK_WRITE",SWIG_From_int(static_cast< int >(LOCK_WRITE)));
  SWIG_Python_SetConstant(d, "LOCK_EXCLUSIVE",SWIG_From_int(static_cast< int >(LOCK_EXCLUSIVE)));
  SWIG_Python_SetConstant(d, "LOCK_ONLYONCE",SWIG_From_int(static_cast< int >(LOCK_ONLYONCE)));
  SWIG_Python_SetConstant(d, "STATFLAG_DEFAULT",SWIG_From_int(static_cast< int >(STATFLAG_DEFAULT)));
  SWIG_Python_SetConstant(d, "STATFLAG_NONAME",SWIG_From_int(static_cast< int >(STATFLAG_NONAME)));
  SWIG_Python_SetConstant(d, "STATFLAG_NOOPEN",SWIG_From_int(static_cast< int >(STATFLAG_NOOPEN)));
  SWIG_Python_SetConstant(d, "MAPI_MODIFY",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_MODIFY",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_READ",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_DELETE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_CREATE_HIERARCHY",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_CREATE_CONTENTS",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "MAPI_ACCESS_CREATE_ASSOCIATED",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "MAPI_UNICODE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80000000)));
  SWIG_Python_SetConstant(d, "hrSuccess",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MAPI_SHORTTERM",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "MAPI_NOTRECIP",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "MAPI_THISSESSION",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "MAPI_NOW",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "MAPI_NOTRESERVED",SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Python_SetConstant(d, "MAPI_COMPOUND",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "MAPI_ONE_OFF_UNICODE",SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Python_SetConstant(d, "MAPI_ONE_OFF_NO_RICH_INFO",SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Python_SetConstant(d, "MAPI_STORE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_ADDRBOOK",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MAPI_FOLDER",SWIG_From_int(static_cast< int >((0x00000003))));
  SWIG_Python_SetConstant(d, "MAPI_ABCONT",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_MESSAGE",SWIG_From_int(static_cast< int >((0x00000005))));
  SWIG_Python_SetConstant(d, "MAPI_MAILUSER",SWIG_From_int(static_cast< int >((0x00000006))));
  SWIG_Python_SetConstant(d, "MAPI_ATTACH",SWIG_From_int(static_cast< int >((0x00000007))));
  SWIG_Python_SetConstant(d, "MAPI_DISTLIST",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "MAPI_PROFSECT",SWIG_From_int(static_cast< int >((0x00000009))));
  SWIG_Python_SetConstant(d, "MAPI_STATUS",SWIG_From_int(static_cast< int >((0x0000000A))));
  SWIG_Python_SetConstant(d, "MAPI_SESSION",SWIG_From_int(static_cast< int >((0x0000000B))));
  SWIG_Python_SetConstant(d, "MAPI_FORMINFO",SWIG_From_int(static_cast< int >((0x0000000C))));
  SWIG_Python_SetConstant(d, "MV_FLAG",SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Python_SetConstant(d, "PT_UNSPECIFIED",SWIG_From_int(static_cast< int >((0x0000))));
  SWIG_Python_SetConstant(d, "PT_NULL",SWIG_From_int(static_cast< int >((0x0001))));
  SWIG_Python_SetConstant(d, "PT_SHORT",SWIG_From_int(static_cast< int >((0x0002))));
  SWIG_Python_SetConstant(d, "PT_LONG",SWIG_From_int(static_cast< int >((0x0003))));
  SWIG_Python_SetConstant(d, "PT_FLOAT",SWIG_From_int(static_cast< int >((0x0004))));
  SWIG_Python_SetConstant(d, "PT_DOUBLE",SWIG_From_int(static_cast< int >((0x0005))));
  SWIG_Python_SetConstant(d, "PT_CURRENCY",SWIG_From_int(static_cast< int >((0x0006))));
  SWIG_Python_SetConstant(d, "PT_APPTIME",SWIG_From_int(static_cast< int >((0x0007))));
  SWIG_Python_SetConstant(d, "PT_ERROR",SWIG_From_int(static_cast< int >((0x000A))));
  SWIG_Python_SetConstant(d, "PT_BOOLEAN",SWIG_From_int(static_cast< int >((0x000B))));
  SWIG_Python_SetConstant(d, "PT_OBJECT",SWIG_From_int(static_cast< int >((0x000D))));
  SWIG_Python_SetConstant(d, "PT_LONGLONG",SWIG_From_int(static_cast< int >((0x0014))));
  SWIG_Python_SetConstant(d, "PT_STRING8",SWIG_From_int(static_cast< int >((0x001E))));
  SWIG_Python_SetConstant(d, "PT_UNICODE",SWIG_From_int(static_cast< int >((0x001F))));
  SWIG_Python_SetConstant(d, "PT_SYSTIME",SWIG_From_int(static_cast< int >((0x0040))));
  SWIG_Python_SetConstant(d, "PT_CLSID",SWIG_From_int(static_cast< int >((0x0048))));
  SWIG_Python_SetConstant(d, "PT_BINARY",SWIG_From_int(static_cast< int >((0x0102))));
  SWIG_Python_SetConstant(d, "PT_I2",SWIG_From_int(static_cast< int >((0x0002))));
  SWIG_Python_SetConstant(d, "PT_I4",SWIG_From_int(static_cast< int >((0x0003))));
  SWIG_Python_SetConstant(d, "PT_R4",SWIG_From_int(static_cast< int >((0x0004))));
  SWIG_Python_SetConstant(d, "PT_R8",SWIG_From_int(static_cast< int >((0x0005))));
  SWIG_Python_SetConstant(d, "PT_I8",SWIG_From_int(static_cast< int >((0x0014))));
  SWIG_Python_SetConstant(d, "PT_MV_SHORT",SWIG_From_int(static_cast< int >((0x1000|(0x0002)))));
  SWIG_Python_SetConstant(d, "PT_MV_LONG",SWIG_From_int(static_cast< int >((0x1000|(0x0003)))));
  SWIG_Python_SetConstant(d, "PT_MV_FLOAT",SWIG_From_int(static_cast< int >((0x1000|(0x0004)))));
  SWIG_Python_SetConstant(d, "PT_MV_DOUBLE",SWIG_From_int(static_cast< int >((0x1000|(0x0005)))));
  SWIG_Python_SetConstant(d, "PT_MV_CURRENCY",SWIG_From_int(static_cast< int >((0x1000|(0x0006)))));
  SWIG_Python_SetConstant(d, "PT_MV_APPTIME",SWIG_From_int(static_cast< int >((0x1000|(0x0007)))));
  SWIG_Python_SetConstant(d, "PT_MV_SYSTIME",SWIG_From_int(static_cast< int >((0x1000|(0x0040)))));
  SWIG_Python_SetConstant(d, "PT_MV_STRING8",SWIG_From_int(static_cast< int >((0x1000|(0x001E)))));
  SWIG_Python_SetConstant(d, "PT_MV_BINARY",SWIG_From_int(static_cast< int >((0x1000|(0x0102)))));
  SWIG_Python_SetConstant(d, "PT_MV_UNICODE",SWIG_From_int(static_cast< int >((0x1000|(0x001F)))));
  SWIG_Python_SetConstant(d, "PT_MV_CLSID",SWIG_From_int(static_cast< int >((0x1000|(0x0048)))));
  SWIG_Python_SetConstant(d, "PT_MV_LONGLONG",SWIG_From_int(static_cast< int >((0x1000|(0x0014)))));
  SWIG_Python_SetConstant(d, "PT_MV_I2",SWIG_From_int(static_cast< int >((0x1000|(0x0002)))));
  SWIG_Python_SetConstant(d, "PT_MV_I4",SWIG_From_int(static_cast< int >((0x1000|(0x0003)))));
  SWIG_Python_SetConstant(d, "PT_MV_R4",SWIG_From_int(static_cast< int >((0x1000|(0x0004)))));
  SWIG_Python_SetConstant(d, "PT_MV_R8",SWIG_From_int(static_cast< int >((0x1000|(0x0005)))));
  SWIG_Python_SetConstant(d, "PT_MV_I8",SWIG_From_int(static_cast< int >((0x1000|(0x0014)))));
  SWIG_Python_SetConstant(d, "MV_INSTANCE",SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Python_SetConstant(d, "MVI_FLAG",SWIG_From_int(static_cast< int >((0x1000|0x2000))));
  SWIG_Python_SetConstant(d, "MAPI_ERROR_VERSION",SWIG_From_long(static_cast< long >(0x00000000L)));
  SWIG_Python_SetConstant(d, "KEEP_OPEN_READONLY",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "KEEP_OPEN_READWRITE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FORCE_SAVE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_CREATE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "STREAM_APPEND",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_MOVE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_NOREPLACE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MAPI_DECLINE_OK",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_NO_STRINGS",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_NO_IDS",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MNID_ID",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MNID_STRING",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MAPI_BEST_ACCESS",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "CONVENIENT_DEPTH",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SEARCH_RUNNING",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SEARCH_REBUILD",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "SEARCH_RECURSIVE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "SEARCH_FOREGROUND",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "STOP_SEARCH",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "RESTART_SEARCH",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "RECURSIVE_SEARCH",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "SHALLOW_SEARCH",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "FOREGROUND_SEARCH",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "BACKGROUND_SEARCH",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "fnevCriticalError",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "fnevNewMail",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "fnevObjectCreated",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "fnevObjectDeleted",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "fnevObjectModified",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "fnevObjectMoved",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "fnevObjectCopied",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "fnevSearchComplete",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "fnevTableModified",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, "fnevStatusObjectModified",SWIG_From_int(static_cast< int >((0x00000200))));
  SWIG_Python_SetConstant(d, "fnevReservedForMapi",SWIG_From_int(static_cast< int >((0x40000000))));
  SWIG_Python_SetConstant(d, "fnevExtended",SWIG_From_int(static_cast< int >((0x80000000))));
  SWIG_Python_SetConstant(d, "TABLE_CHANGED",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TABLE_ERROR",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "TABLE_ROW_ADDED",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "TABLE_ROW_DELETED",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TABLE_ROW_MODIFIED",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_DONE",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "TABLE_RESTRICT_DONE",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "TABLE_SETCOL_DONE",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "TABLE_RELOAD",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "STORE_ENTRYID_UNIQUE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "STORE_READONLY",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "STORE_SEARCH_OK",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "STORE_MODIFY_OK",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "STORE_CREATE_OK",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "STORE_ATTACH_OK",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "STORE_OLE_OK",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "STORE_SUBMIT_OK",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "STORE_NOTIFY_OK",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, "STORE_MV_PROPS_OK",SWIG_From_int(static_cast< int >((0x00000200))));
  SWIG_Python_SetConstant(d, "STORE_CATEGORIZE_OK",SWIG_From_int(static_cast< int >((0x00000400))));
  SWIG_Python_SetConstant(d, "STORE_RTF_OK",SWIG_From_int(static_cast< int >((0x00000800))));
  SWIG_Python_SetConstant(d, "STORE_RESTRICTION_OK",SWIG_From_int(static_cast< int >((0x00001000))));
  SWIG_Python_SetConstant(d, "STORE_SORT_OK",SWIG_From_int(static_cast< int >((0x00002000))));
  SWIG_Python_SetConstant(d, "STORE_PUBLIC_FOLDERS",SWIG_From_int(static_cast< int >((0x00004000))));
  SWIG_Python_SetConstant(d, "STORE_UNCOMPRESSED_RTF",SWIG_From_int(static_cast< int >((0x00008000))));
  SWIG_Python_SetConstant(d, "STORE_HAS_SEARCHES",SWIG_From_int(static_cast< int >((0x01000000))));
  SWIG_Python_SetConstant(d, "LOGOFF_NO_WAIT",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "LOGOFF_ORDERLY",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "LOGOFF_PURGE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "LOGOFF_ABORT",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "LOGOFF_QUIET",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "LOGOFF_COMPLETE",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, "LOGOFF_INBOUND",SWIG_From_int(static_cast< int >((0x00020000))));
  SWIG_Python_SetConstant(d, "LOGOFF_OUTBOUND",SWIG_From_int(static_cast< int >((0x00040000))));
  SWIG_Python_SetConstant(d, "LOGOFF_OUTBOUND_QUEUE",SWIG_From_int(static_cast< int >((0x00080000))));
  SWIG_Python_SetConstant(d, "MSG_LOCKED",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MSG_UNLOCKED",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "FOLDER_IPM_SUBTREE_VALID",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "FOLDER_IPM_INBOX_VALID",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FOLDER_IPM_OUTBOX_VALID",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "FOLDER_IPM_WASTEBASKET_VALID",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "FOLDER_IPM_SENTMAIL_VALID",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "FOLDER_VIEWS_VALID",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "FOLDER_COMMON_VIEWS_VALID",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "FOLDER_FINDER_VALID",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "FOLDER_ROOT",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "FOLDER_GENERIC",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "FOLDER_SEARCH",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MESSAGE_MOVE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MESSAGE_DIALOG",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "OPEN_IF_EXISTS",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "DEL_MESSAGES",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "FOLDER_DIALOG",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "DEL_FOLDERS",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "DEL_ASSOCIATED",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "FOLDER_MOVE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "COPY_SUBFOLDERS",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_HIGHLIGHTED",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_TAGGED",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_HIDDEN",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_DELMARKED",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_REMOTE_DOWNLOAD",SWIG_From_int(static_cast< int >((0x00001000))));
  SWIG_Python_SetConstant(d, "MSGSTATUS_REMOTE_DELETE",SWIG_From_int(static_cast< int >((0x00002000))));
  SWIG_Python_SetConstant(d, "RECURSIVE_SORT",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FLDSTATUS_HIGHLIGHTED",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "FLDSTATUS_TAGGED",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FLDSTATUS_HIDDEN",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "FLDSTATUS_DELMARKED",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "FORCE_SUBMIT",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MSGFLAG_READ",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MSGFLAG_UNMODIFIED",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MSGFLAG_SUBMIT",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MSGFLAG_UNSENT",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "MSGFLAG_HASATTACH",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "MSGFLAG_FROMME",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "MSGFLAG_ASSOCIATED",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "MSGFLAG_RESEND",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "MSGFLAG_RN_PENDING",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, "MSGFLAG_NRN_PENDING",SWIG_From_int(static_cast< int >((0x00000200))));
  SWIG_Python_SetConstant(d, "SUBMITFLAG_LOCKED",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SUBMITFLAG_PREPROCESS",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MODRECIP_ADD",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MODRECIP_MODIFY",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MODRECIP_REMOVE",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "SUPPRESS_RECEIPT",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "CLEAR_READ_FLAG",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "GENERATE_RECEIPT_ONLY",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "CLEAR_RN_PENDING",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "CLEAR_NRN_PENDING",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "ATTACH_DIALOG",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SECURITY_SIGNED",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SECURITY_ENCRYPTED",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "PRIO_URGENT",SWIG_From_int(static_cast< int >((1))));
  SWIG_Python_SetConstant(d, "PRIO_NORMAL",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, "PRIO_NONURGENT",SWIG_From_int(static_cast< int >((-1))));
  SWIG_Python_SetConstant(d, "SENSITIVITY_NONE",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "SENSITIVITY_PERSONAL",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "SENSITIVITY_PRIVATE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "SENSITIVITY_COMPANY_CONFIDENTIAL",SWIG_From_int(static_cast< int >((0x00000003))));
  SWIG_Python_SetConstant(d, "IMPORTANCE_LOW",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, "IMPORTANCE_NORMAL",SWIG_From_int(static_cast< int >((1))));
  SWIG_Python_SetConstant(d, "IMPORTANCE_HIGH",SWIG_From_int(static_cast< int >((2))));
  SWIG_Python_SetConstant(d, "NO_ATTACHMENT",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "ATTACH_BY_VALUE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "ATTACH_BY_REFERENCE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "ATTACH_BY_REF_RESOLVE",SWIG_From_int(static_cast< int >((0x00000003))));
  SWIG_Python_SetConstant(d, "ATTACH_BY_REF_ONLY",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "ATTACH_EMBEDDED_MSG",SWIG_From_int(static_cast< int >((0x00000005))));
  SWIG_Python_SetConstant(d, "ATTACH_OLE",SWIG_From_int(static_cast< int >((0x00000006))));
  SWIG_Python_SetConstant(d, "AB_RECIPIENTS",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "AB_SUBCONTAINERS",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "AB_MODIFIABLE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "AB_UNMODIFIABLE",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "AB_FIND_ON_OPEN",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "AB_NOT_DEFAULT",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "CREATE_CHECK_DUP_STRICT",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "CREATE_CHECK_DUP_LOOSE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "CREATE_REPLACE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MAPI_UNRESOLVED",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "MAPI_AMBIGUOUS",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_RESOLVED",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "MAPI_SEND_NO_RICH_INFO",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_PUBLIC_UA",SWIG_From_int(static_cast< int >((0))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_PRIVATE_UA",SWIG_From_int(static_cast< int >((1))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_MS",SWIG_From_int(static_cast< int >((2))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_ML",SWIG_From_int(static_cast< int >((3))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_PDAU",SWIG_From_int(static_cast< int >((4))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_PDS_PATRON",SWIG_From_int(static_cast< int >((5))));
  SWIG_Python_SetConstant(d, "MAPI_MH_DP_OTHER_AU",SWIG_From_int(static_cast< int >((6))));
  SWIG_Python_SetConstant(d, "TBLSTAT_COMPLETE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TBLSTAT_QCHANGED",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "TBLSTAT_SORTING",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "TBLSTAT_SORT_ERROR",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "TBLSTAT_SETTING_COLS",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "TBLSTAT_SETCOL_ERROR",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "TBLSTAT_RESTRICTING",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "TBLSTAT_RESTRICT_ERROR",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "TBLTYPE_SNAPSHOT",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "TBLTYPE_KEYSET",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TBLTYPE_DYNAMIC",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_ASCEND",SWIG_From_int(static_cast< int >(0x00000000)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_DESCEND",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_COMBINE",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_CATEG_MAX",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "TABLE_SORT_CATEG_MIN",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, "BOOKMARK_BEGINNING",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "BOOKMARK_CURRENT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "BOOKMARK_END",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "FL_FULLSTRING",SWIG_From_int(static_cast< int >(0x00000000)));
  SWIG_Python_SetConstant(d, "FL_SUBSTRING",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "FL_PREFIX",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "FL_IGNORECASE",SWIG_From_int(static_cast< int >(0x00010000)));
  SWIG_Python_SetConstant(d, "FL_IGNORENONSPACE",SWIG_From_int(static_cast< int >(0x00020000)));
  SWIG_Python_SetConstant(d, "FL_LOOSE",SWIG_From_int(static_cast< int >(0x00040000)));
  SWIG_Python_SetConstant(d, "RES_AND",SWIG_From_int(static_cast< int >(0x00000000)));
  SWIG_Python_SetConstant(d, "RES_OR",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "RES_NOT",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "RES_CONTENT",SWIG_From_int(static_cast< int >(0x00000003)));
  SWIG_Python_SetConstant(d, "RES_PROPERTY",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "RES_COMPAREPROPS",SWIG_From_int(static_cast< int >(0x00000005)));
  SWIG_Python_SetConstant(d, "RES_BITMASK",SWIG_From_int(static_cast< int >(0x00000006)));
  SWIG_Python_SetConstant(d, "RES_SIZE",SWIG_From_int(static_cast< int >(0x00000007)));
  SWIG_Python_SetConstant(d, "RES_EXIST",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, "RES_SUBRESTRICTION",SWIG_From_int(static_cast< int >(0x00000009)));
  SWIG_Python_SetConstant(d, "RES_COMMENT",SWIG_From_int(static_cast< int >(0x0000000A)));
  SWIG_Python_SetConstant(d, "RELOP_LT",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "RELOP_LE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "RELOP_GT",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "RELOP_GE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "RELOP_EQ",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "RELOP_NE",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "RELOP_RE",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "BMR_EQZ",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "BMR_NEZ",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TBL_ALL_COLUMNS",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "TBL_LEAF_ROW",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "TBL_EMPTY_CATEGORY",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "TBL_EXPANDED_CATEGORY",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "TBL_COLLAPSED_CATEGORY",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TBL_NOWAIT",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "TBL_ASYNC",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "TBL_BATCH",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "DIR_BACKWARD",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "TBL_NOADVANCE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_STORE_PROVIDER",SWIG_From_int(static_cast< int >((33))));
  SWIG_Python_SetConstant(d, "MAPI_AB",SWIG_From_int(static_cast< int >((34))));
  SWIG_Python_SetConstant(d, "MAPI_AB_PROVIDER",SWIG_From_int(static_cast< int >((35))));
  SWIG_Python_SetConstant(d, "MAPI_TRANSPORT_PROVIDER",SWIG_From_int(static_cast< int >((36))));
  SWIG_Python_SetConstant(d, "MAPI_SPOOLER",SWIG_From_int(static_cast< int >((37))));
  SWIG_Python_SetConstant(d, "MAPI_PROFILE_PROVIDER",SWIG_From_int(static_cast< int >((38))));
  SWIG_Python_SetConstant(d, "MAPI_SUBSYSTEM",SWIG_From_int(static_cast< int >((39))));
  SWIG_Python_SetConstant(d, "MAPI_HOOK_PROVIDER",SWIG_From_int(static_cast< int >((40))));
  SWIG_Python_SetConstant(d, "STATUS_VALIDATE_STATE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "STATUS_SETTINGS_DIALOG",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "STATUS_CHANGE_PASSWORD",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "STATUS_FLUSH_QUEUES",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "STATUS_DEFAULT_OUTBOUND",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "STATUS_DEFAULT_STORE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "STATUS_PRIMARY_IDENTITY",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "STATUS_SIMPLE_STORE",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "STATUS_XP_PREFER_LAST",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "STATUS_NO_PRIMARY_IDENTITY",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "STATUS_NO_DEFAULT_STORE",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "STATUS_TEMP_SECTION",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "STATUS_OWN_STORE",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, "STATUS_NEED_IPM_TREE",SWIG_From_int(static_cast< int >((0x00000800))));
  SWIG_Python_SetConstant(d, "STATUS_PRIMARY_STORE",SWIG_From_int(static_cast< int >((0x00001000))));
  SWIG_Python_SetConstant(d, "STATUS_SECONDARY_STORE",SWIG_From_int(static_cast< int >((0x00002000))));
  SWIG_Python_SetConstant(d, "STATUS_AVAILABLE",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "STATUS_OFFLINE",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "STATUS_FAILURE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "STATUS_INBOUND_ENABLED",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, "STATUS_INBOUND_ACTIVE",SWIG_From_int(static_cast< int >((0x00020000))));
  SWIG_Python_SetConstant(d, "STATUS_INBOUND_FLUSH",SWIG_From_int(static_cast< int >((0x00040000))));
  SWIG_Python_SetConstant(d, "STATUS_OUTBOUND_ENABLED",SWIG_From_int(static_cast< int >((0x00100000))));
  SWIG_Python_SetConstant(d, "STATUS_OUTBOUND_ACTIVE",SWIG_From_int(static_cast< int >((0x00200000))));
  SWIG_Python_SetConstant(d, "STATUS_OUTBOUND_FLUSH",SWIG_From_int(static_cast< int >((0x00400000))));
  SWIG_Python_SetConstant(d, "STATUS_REMOTE_ACCESS",SWIG_From_int(static_cast< int >((0x00800000))));
  SWIG_Python_SetConstant(d, "SUPPRESS_UI",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "REFRESH_XP_HEADER_CACHE",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, "PROCESS_XP_HEADER_CACHE",SWIG_From_int(static_cast< int >((0x00020000))));
  SWIG_Python_SetConstant(d, "FORCE_XP_CONNECT",SWIG_From_int(static_cast< int >((0x00040000))));
  SWIG_Python_SetConstant(d, "FORCE_XP_DISCONNECT",SWIG_From_int(static_cast< int >((0x00080000))));
  SWIG_Python_SetConstant(d, "CONFIG_CHANGED",SWIG_From_int(static_cast< int >((0x00100000))));
  SWIG_Python_SetConstant(d, "ABORT_XP_HEADER_OPERATION",SWIG_From_int(static_cast< int >((0x00200000))));
  SWIG_Python_SetConstant(d, "SHOW_XP_SESSION_UI",SWIG_From_int(static_cast< int >((0x00400000))));
  SWIG_Python_SetConstant(d, "UI_READONLY",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "FLUSH_UPLOAD",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FLUSH_DOWNLOAD",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "FLUSH_FORCE",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "FLUSH_NO_UI",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "FLUSH_ASYNC_OK",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "MAPI_TOP_LEVEL",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "UI_SERVICE",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "SERVICE_UI_ALWAYS",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "SERVICE_UI_ALLOWED",SWIG_From_int(static_cast< int >(0x00000010)));
  SWIG_Python_SetConstant(d, "UI_CURRENT_PROVIDER_FIRST",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "ADRPARM_HELP_CTX",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "DIALOG_MODAL",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "DIALOG_SDI",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "DIALOG_OPTIONS",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "ADDRESS_ONE",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "AB_SELECTONLY",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "AB_RESOLVE",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "DT_MAILUSER",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "DT_DISTLIST",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "DT_FORUM",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "DT_AGENT",SWIG_From_int(static_cast< int >((0x00000003))));
  SWIG_Python_SetConstant(d, "DT_ORGANIZATION",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "DT_PRIVATE_DISTLIST",SWIG_From_int(static_cast< int >((0x00000005))));
  SWIG_Python_SetConstant(d, "DT_REMOTE_MAILUSER",SWIG_From_int(static_cast< int >((0x00000006))));
  SWIG_Python_SetConstant(d, "DT_MODIFIABLE",SWIG_From_int(static_cast< int >((0x00010000))));
  SWIG_Python_SetConstant(d, "DT_GLOBAL",SWIG_From_int(static_cast< int >((0x00020000))));
  SWIG_Python_SetConstant(d, "DT_LOCAL",SWIG_From_int(static_cast< int >((0x00030000))));
  SWIG_Python_SetConstant(d, "DT_WAN",SWIG_From_int(static_cast< int >((0x00040000))));
  SWIG_Python_SetConstant(d, "DT_NOT_SPECIFIC",SWIG_From_int(static_cast< int >((0x00050000))));
  SWIG_Python_SetConstant(d, "DT_FOLDER",SWIG_From_int(static_cast< int >((0x01000000))));
  SWIG_Python_SetConstant(d, "DT_FOLDER_LINK",SWIG_From_int(static_cast< int >((0x02000000))));
  SWIG_Python_SetConstant(d, "DT_FOLDER_SPECIAL",SWIG_From_int(static_cast< int >((0x04000000))));
  SWIG_Python_SetConstant(d, "MAPI_DEFERRED_ERRORS",SWIG_From_int(static_cast< int >((0x00000008))));
  SWIG_Python_SetConstant(d, "MAPI_ASSOCIATED",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "MDB_NO_DIALOG",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MDB_WRITE",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "MDB_TEMPORARY",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "MDB_NO_MAIL",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "AB_NO_DIALOG",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "EC_OVERRIDE_HOMESERVER",SWIG_From_int(static_cast< int >((0x00000001))));
  SWIG_Python_SetConstant(d, "MAPI_ALLOW_OTHERS",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, "MAPI_EXPLICIT_PROFILE",SWIG_From_int(static_cast< int >(0x00000010)));
  SWIG_Python_SetConstant(d, "MAPI_SERVICE_UI_ALWAYS",SWIG_From_int(static_cast< int >(0x00002000)));
  SWIG_Python_SetConstant(d, "MAPI_NO_MAIL",SWIG_From_int(static_cast< int >(0x00008000)));
  SWIG_Python_SetConstant(d, "MAPI_NT_SERVICE",SWIG_From_int(static_cast< int >(0x00010000)));
  SWIG_Python_SetConstant(d, "MAPI_TIMEOUT_SHORT",SWIG_From_int(static_cast< int >(0x00100000)));
  SWIG_Python_SetConstant(d, "MAPI_INIT_VERSION",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MAPI_MULTITHREAD_NOTIFICATIONS",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_LOGOFF_SHARED",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_LOGOFF_UI",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_DEFAULT_STORE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_SIMPLE_STORE_TEMPORARY",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_SIMPLE_STORE_PERMANENT",SWIG_From_int(static_cast< int >(0x00000003)));
  SWIG_Python_SetConstant(d, "MAPI_PRIMARY_STORE",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "MAPI_SECONDARY_STORE",SWIG_From_int(static_cast< int >(0x00000005)));
  SWIG_Python_SetConstant(d, "MAPI_POST_MESSAGE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_NEW_MESSAGE",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_DEFAULT_SERVICES",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "SERVICE_DEFAULT_STORE",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "SERVICE_SINGLE_COPY",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "SERVICE_CREATE_WITH_STORE",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "SERVICE_PRIMARY_IDENTITY",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, "SERVICE_NO_PRIMARY_IDENTITY",SWIG_From_int(static_cast< int >(0x00000020)));
  SWIG_Python_SetConstant(d, "MAPI_E_CALL_FAILED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80004005)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_ENOUGH_MEMORY",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8007000E)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_PARAMETER",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80070057)));
  SWIG_Python_SetConstant(d, "MAPI_E_INTERFACE_NOT_SUPPORTED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80004002)));
  SWIG_Python_SetConstant(d, "MAPI_E_NO_ACCESS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80070005)));
  SWIG_Python_SetConstant(d, "MAPI_E_NO_SUPPORT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040102)));
  SWIG_Python_SetConstant(d, "MAPI_E_BAD_CHARWIDTH",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040103)));
  SWIG_Python_SetConstant(d, "MAPI_E_STRING_TOO_LONG",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040105)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNKNOWN_FLAGS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040106)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_ENTRYID",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040107)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_OBJECT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040108)));
  SWIG_Python_SetConstant(d, "MAPI_E_OBJECT_CHANGED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040109)));
  SWIG_Python_SetConstant(d, "MAPI_E_OBJECT_DELETED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004010A)));
  SWIG_Python_SetConstant(d, "MAPI_E_BUSY",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004010B)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_ENOUGH_DISK",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004010D)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_ENOUGH_RESOURCES",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004010E)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_FOUND",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004010F)));
  SWIG_Python_SetConstant(d, "MAPI_E_VERSION",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040110)));
  SWIG_Python_SetConstant(d, "MAPI_E_LOGON_FAILED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040111)));
  SWIG_Python_SetConstant(d, "MAPI_E_SESSION_LIMIT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040112)));
  SWIG_Python_SetConstant(d, "MAPI_E_USER_CANCEL",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040113)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNABLE_TO_ABORT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040114)));
  SWIG_Python_SetConstant(d, "MAPI_E_NETWORK_ERROR",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040115)));
  SWIG_Python_SetConstant(d, "MAPI_E_DISK_ERROR",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040116)));
  SWIG_Python_SetConstant(d, "MAPI_E_TOO_COMPLEX",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040117)));
  SWIG_Python_SetConstant(d, "MAPI_E_BAD_COLUMN",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040118)));
  SWIG_Python_SetConstant(d, "MAPI_E_EXTENDED_ERROR",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040119)));
  SWIG_Python_SetConstant(d, "MAPI_E_COMPUTED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011A)));
  SWIG_Python_SetConstant(d, "MAPI_E_CORRUPT_DATA",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011B)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNCONFIGURED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011C)));
  SWIG_Python_SetConstant(d, "MAPI_E_FAILONEPROVIDER",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011D)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNKNOWN_CPID",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011E)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNKNOWN_LCID",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004011F)));
  SWIG_Python_SetConstant(d, "MAPI_E_PASSWORD_CHANGE_REQUIRED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040120)));
  SWIG_Python_SetConstant(d, "MAPI_E_PASSWORD_EXPIRED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040121)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_WORKSTATION_ACCOUNT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040122)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_ACCESS_TIME",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040123)));
  SWIG_Python_SetConstant(d, "MAPI_E_ACCOUNT_DISABLED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040124)));
  SWIG_Python_SetConstant(d, "MAPI_E_END_OF_SESSION",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040200)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNKNOWN_ENTRYID",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040201)));
  SWIG_Python_SetConstant(d, "MAPI_E_MISSING_REQUIRED_COLUMN",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040202)));
  SWIG_Python_SetConstant(d, "MAPI_W_NO_SERVICE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040203)));
  SWIG_Python_SetConstant(d, "MAPI_E_BAD_VALUE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040301)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_TYPE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040302)));
  SWIG_Python_SetConstant(d, "MAPI_E_TYPE_NO_SUPPORT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040303)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNEXPECTED_TYPE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040304)));
  SWIG_Python_SetConstant(d, "MAPI_E_TOO_BIG",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040305)));
  SWIG_Python_SetConstant(d, "MAPI_E_DECLINE_COPY",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040306)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNEXPECTED_ID",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040307)));
  SWIG_Python_SetConstant(d, "MAPI_W_ERRORS_RETURNED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040380)));
  SWIG_Python_SetConstant(d, "MAPI_E_UNABLE_TO_COMPLETE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040400)));
  SWIG_Python_SetConstant(d, "MAPI_E_TIMEOUT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040401)));
  SWIG_Python_SetConstant(d, "MAPI_E_TABLE_EMPTY",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040402)));
  SWIG_Python_SetConstant(d, "MAPI_E_TABLE_TOO_BIG",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040403)));
  SWIG_Python_SetConstant(d, "MAPI_E_INVALID_BOOKMARK",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040405)));
  SWIG_Python_SetConstant(d, "MAPI_W_POSITION_CHANGED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040481)));
  SWIG_Python_SetConstant(d, "MAPI_W_APPROX_COUNT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040482)));
  SWIG_Python_SetConstant(d, "MAPI_E_WAIT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040500)));
  SWIG_Python_SetConstant(d, "MAPI_E_CANCEL",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040501)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_ME",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040502)));
  SWIG_Python_SetConstant(d, "MAPI_W_CANCEL_MESSAGE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040580)));
  SWIG_Python_SetConstant(d, "MAPI_E_CORRUPT_STORE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040600)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_IN_QUEUE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040601)));
  SWIG_Python_SetConstant(d, "MAPI_E_NO_SUPPRESS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040602)));
  SWIG_Python_SetConstant(d, "MAPI_E_COLLISION",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040604)));
  SWIG_Python_SetConstant(d, "MAPI_E_NOT_INITIALIZED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040605)));
  SWIG_Python_SetConstant(d, "MAPI_E_NON_STANDARD",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040606)));
  SWIG_Python_SetConstant(d, "MAPI_E_NO_RECIPIENTS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040607)));
  SWIG_Python_SetConstant(d, "MAPI_E_SUBMITTED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040608)));
  SWIG_Python_SetConstant(d, "MAPI_E_HAS_FOLDERS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040609)));
  SWIG_Python_SetConstant(d, "MAPI_E_HAS_MESSAGES",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004060A)));
  SWIG_Python_SetConstant(d, "MAPI_E_FOLDER_CYCLE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004060B)));
  SWIG_Python_SetConstant(d, "MAPI_W_PARTIAL_COMPLETION",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040680)));
  SWIG_Python_SetConstant(d, "MAPI_E_AMBIGUOUS_RECIP",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040700)));
  SWIG_Python_SetConstant(d, "MAPI_E_STORE_FULL",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x8004060c)));
  SWIG_Python_SetConstant(d, "SYNC_UNICODE",SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Python_SetConstant(d, "SYNC_NO_DELETIONS",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, "SYNC_NO_SOFT_DELETIONS",SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Python_SetConstant(d, "SYNC_READ_STATE",SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Python_SetConstant(d, "SYNC_ASSOCIATED",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "SYNC_NORMAL",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "SYNC_NO_CONFLICTS",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "SYNC_ONLY_SPECIFIED_PROPS",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "SYNC_NO_FOREIGN_KEYS",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "SYNC_LIMITED_IMESSAGE",SWIG_From_int(static_cast< int >(0x200)));
  SWIG_Python_SetConstant(d, "SYNC_CATCHUP",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "SYNC_NEW_MESSAGE",SWIG_From_int(static_cast< int >(0x800)));
  SWIG_Python_SetConstant(d, "SYNC_MSG_SELECTIVE",SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Python_SetConstant(d, "SYNC_BEST_BODY",SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Python_SetConstant(d, "SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED",SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Python_SetConstant(d, "SYNC_PROGRESS_MODE",SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Python_SetConstant(d, "SYNC_FXRECOVERMODE",SWIG_From_int(static_cast< int >(0x10000)));
  SWIG_Python_SetConstant(d, "SYNC_DEFER_CONFIG",SWIG_From_int(static_cast< int >(0x20000)));
  SWIG_Python_SetConstant(d, "SYNC_FORCE_UNICODE",SWIG_From_int(static_cast< int >(0x40000)));
  SWIG_Python_SetConstant(d, "DELETE_HARD_DELETE",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "ROWLIST_REPLACE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ROW_ADD",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ROW_MODIFY",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "ROW_REMOVE",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "ROW_EMPTY",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "SYNC_E_UNKNOWN_FLAGS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040106)));
  SWIG_Python_SetConstant(d, "SYNC_E_INVALID_PARAMETER",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80070057)));
  SWIG_Python_SetConstant(d, "SYNC_E_ERROR",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80004005)));
  SWIG_Python_SetConstant(d, "SYNC_E_OBJECT_DELETED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040800)));
  SWIG_Python_SetConstant(d, "SYNC_E_IGNORE",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040801)));
  SWIG_Python_SetConstant(d, "SYNC_E_CONFLICT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040802)));
  SWIG_Python_SetConstant(d, "SYNC_E_NO_PARENT",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040803)));
  SWIG_Python_SetConstant(d, "SYNC_E_INCEST",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040804)));
  SWIG_Python_SetConstant(d, "SYNC_E_UNSYNCHRONIZED",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x80040805)));
  SWIG_Python_SetConstant(d, "SYNC_W_PROGRESS",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040820)));
  SWIG_Python_SetConstant(d, "SYNC_W_CLIENT_CHANGE_NEWER",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(0x00040821)));
  SWIG_Python_SetConstant(d, "ECSTORE_TYPE_PRIVATE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "ECSTORE_TYPE_PUBLIC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ECSTORE_TYPE_ARCHIVE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAPI_ORIG",SWIG_From_int(static_cast< int >(0x00000000)));
  SWIG_Python_SetConstant(d, "MAPI_TO",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_CC",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_BCC",SWIG_From_int(static_cast< int >(0x00000003)));
  SWIG_Python_SetConstant(d, "MAPI_P1",SWIG_From_int(static_cast< int >(0x10000000)));
  SWIG_Python_SetConstant(d, "MAPI_SUBMITTED",SWIG_From_int(static_cast< int >(0x80000000)));
  SWIG_Python_SetConstant(d, "MAPI_UNREAD",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_RECEIPT_REQUESTED",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_SENT",SWIG_From_int(static_cast< int >(0x00000004)));
  SWIG_Python_SetConstant(d, "MAPI_LOGON_UI",SWIG_From_int(static_cast< int >(0x00000001)));
  SWIG_Python_SetConstant(d, "MAPI_PASSWORD_UI",SWIG_From_int(static_cast< int >(0x00020000)));
  SWIG_Python_SetConstant(d, "MAPI_NEW_SESSION",SWIG_From_int(static_cast< int >(0x00000002)));
  SWIG_Python_SetConstant(d, "MAPI_FORCE_DOWNLOAD",SWIG_From_int(static_cast< int >(0x00001000)));
  SWIG_Python_SetConstant(d, "MAPI_EXTENDED",SWIG_From_int(static_cast< int >(0x00000020)));
  SWIG_Python_SetConstant(d, "MAPI_DIALOG",SWIG_From_int(static_cast< int >(0x00000008)));
  SWIG_Python_SetConstant(d, "MAPI_USE_DEFAULT",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, "MAPI_UNREAD_ONLY",SWIG_From_int(static_cast< int >(0x00000020)));
  SWIG_Python_SetConstant(d, "MAPI_GUARANTEE_FIFO",SWIG_From_int(static_cast< int >(0x00000100)));
  SWIG_Python_SetConstant(d, "MAPI_LONG_MSGID",SWIG_From_int(static_cast< int >(0x00004000)));
  SWIG_Python_SetConstant(d, "MAPI_PEEK",SWIG_From_int(static_cast< int >(0x00000080)));
  SWIG_Python_SetConstant(d, "MAPI_SUPPRESS_ATTACH",SWIG_From_int(static_cast< int >(0x00000800)));
  SWIG_Python_SetConstant(d, "MAPI_ENVELOPE_ONLY",SWIG_From_int(static_cast< int >(0x00000040)));
  SWIG_Python_SetConstant(d, "MAPI_BODY_AS_FILE",SWIG_From_int(static_cast< int >(0x00000200)));
  SWIG_Python_SetConstant(d, "MAPI_AB_NOMODIFY",SWIG_From_int(static_cast< int >(0x00000400)));
  SWIG_Python_SetConstant(d, "EC_SYNC_OPT_STREAM",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "EC_SYNC_OPT_CHANGENOTIF",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "EC_SYNC_OPT_STATECOLLECT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "EC_SYNC_OPT_CONTINUOUS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "EC_SYNC_OPT_ALL",SWIG_From_int(static_cast< int >((1|2|4))));
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
}


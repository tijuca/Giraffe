/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(GvSV(PL_errgv),"%s %s\n", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

/* Workaround for bug in perl 5.6.x croak and earlier */
#if (PERL_VERSION < 8)
#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err=ERRSV;
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (SvOK(err) && !SvROK(err)) croak("%_", err);
  croak(Nullch);
#  endif
}
#else
#  define SWIG_croak_null() croak(Nullch)
#endif


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(( (!iter->type->clientdata && (strcmp(iter->type->name, c) == 0)) 
			    || (iter->type->clientdata && (strcmp((char*)iter->type->clientdata, c) == 0))), ty);
}


/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;
  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      *(ptr) = (void *) 0;
      return SWIG_OK;
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**) hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
  #else
     SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BYTE swig_types[0]
#define SWIGTYPE_p_ECLogger swig_types[1]
#define SWIGTYPE_p_GUID swig_types[2]
#define SWIGTYPE_p_IABContainer swig_types[3]
#define SWIGTYPE_p_IAddrBook swig_types[4]
#define SWIGTYPE_p_IAttach swig_types[5]
#define SWIGTYPE_p_IDistList swig_types[6]
#define SWIGTYPE_p_IECChangeAdviseSink swig_types[7]
#define SWIGTYPE_p_IECChangeAdvisor swig_types[8]
#define SWIGTYPE_p_IECExportChanges swig_types[9]
#define SWIGTYPE_p_IECImportContentsChanges swig_types[10]
#define SWIGTYPE_p_IECLicense swig_types[11]
#define SWIGTYPE_p_IECMultiStoreTable swig_types[12]
#define SWIGTYPE_p_IECServiceAdmin swig_types[13]
#define SWIGTYPE_p_IECSingleInstance swig_types[14]
#define SWIGTYPE_p_IECSpooler swig_types[15]
#define SWIGTYPE_p_IECTestProtocol swig_types[16]
#define SWIGTYPE_p_IExchangeExportChanges swig_types[17]
#define SWIGTYPE_p_IExchangeImportContentsChanges swig_types[18]
#define SWIGTYPE_p_IExchangeImportHierarchyChanges swig_types[19]
#define SWIGTYPE_p_IExchangeManageStore swig_types[20]
#define SWIGTYPE_p_IExchangeModifyTable swig_types[21]
#define SWIGTYPE_p_IID swig_types[22]
#define SWIGTYPE_p_IMAPIAdviseSink swig_types[23]
#define SWIGTYPE_p_IMAPIContainer swig_types[24]
#define SWIGTYPE_p_IMAPIFolder swig_types[25]
#define SWIGTYPE_p_IMAPIProgress swig_types[26]
#define SWIGTYPE_p_IMAPIProp swig_types[27]
#define SWIGTYPE_p_IMAPISession swig_types[28]
#define SWIGTYPE_p_IMAPIStatus swig_types[29]
#define SWIGTYPE_p_IMAPITable swig_types[30]
#define SWIGTYPE_p_IMailUser swig_types[31]
#define SWIGTYPE_p_IMessage swig_types[32]
#define SWIGTYPE_p_IMsgServiceAdmin swig_types[33]
#define SWIGTYPE_p_IMsgStore swig_types[34]
#define SWIGTYPE_p_IProfAdmin swig_types[35]
#define SWIGTYPE_p_IProfSect swig_types[36]
#define SWIGTYPE_p_IProviderAdmin swig_types[37]
#define SWIGTYPE_p_IProxyStoreObject swig_types[38]
#define SWIGTYPE_p_ISequentialStream swig_types[39]
#define SWIGTYPE_p_IStream swig_types[40]
#define SWIGTYPE_p_IUnknown swig_types[41]
#define SWIGTYPE_p_LARGE_INTEGER swig_types[42]
#define SWIGTYPE_p_LONG swig_types[43]
#define SWIGTYPE_p_LPADRENTRY swig_types[44]
#define SWIGTYPE_p_LPADRLIST swig_types[45]
#define SWIGTYPE_p_LPADRPARM swig_types[46]
#define SWIGTYPE_p_LPBYTE swig_types[47]
#define SWIGTYPE_p_LPCIID swig_types[48]
#define SWIGTYPE_p_LPECCOMPANY swig_types[49]
#define SWIGTYPE_p_LPECGROUP swig_types[50]
#define SWIGTYPE_p_LPECQUOTA swig_types[51]
#define SWIGTYPE_p_LPECQUOTASTATUS swig_types[52]
#define SWIGTYPE_p_LPECSERVERLIST swig_types[53]
#define SWIGTYPE_p_LPECSVRNAMELIST swig_types[54]
#define SWIGTYPE_p_LPECUSER swig_types[55]
#define SWIGTYPE_p_LPECUSERCLIENTUPDATESTATUS swig_types[56]
#define SWIGTYPE_p_LPENTRYID swig_types[57]
#define SWIGTYPE_p_LPENTRYLIST swig_types[58]
#define SWIGTYPE_p_LPFNBUTTON swig_types[59]
#define SWIGTYPE_p_LPFNDISMISS swig_types[60]
#define SWIGTYPE_p_LPFlagList swig_types[61]
#define SWIGTYPE_p_LPGUID swig_types[62]
#define SWIGTYPE_p_LPMAPIADVISESINK swig_types[63]
#define SWIGTYPE_p_LPMAPIERROR swig_types[64]
#define SWIGTYPE_p_LPMAPIFOLDER swig_types[65]
#define SWIGTYPE_p_LPMAPINAMEID swig_types[66]
#define SWIGTYPE_p_LPMAPIPROP swig_types[67]
#define SWIGTYPE_p_LPMAPITABLE swig_types[68]
#define SWIGTYPE_p_LPMAPIUID swig_types[69]
#define SWIGTYPE_p_LPMDB swig_types[70]
#define SWIGTYPE_p_LPMESSAGE swig_types[71]
#define SWIGTYPE_p_LPNOTIFICATION swig_types[72]
#define SWIGTYPE_p_LPREADSTATE swig_types[73]
#define SWIGTYPE_p_LPROWLIST swig_types[74]
#define SWIGTYPE_p_LPSPropProblemArray swig_types[75]
#define SWIGTYPE_p_LPSPropTagArray swig_types[76]
#define SWIGTYPE_p_LPSPropValue swig_types[77]
#define SWIGTYPE_p_LPSRestriction swig_types[78]
#define SWIGTYPE_p_LPSRowSet swig_types[79]
#define SWIGTYPE_p_LPSSortOrderSet swig_types[80]
#define SWIGTYPE_p_LPSTR swig_types[81]
#define SWIGTYPE_p_LPTSTR swig_types[82]
#define SWIGTYPE_p_LPUNKNOWN swig_types[83]
#define SWIGTYPE_p_LPVOID swig_types[84]
#define SWIGTYPE_p_MAPIINIT_0 swig_types[85]
#define SWIGTYPE_p_MAPINotifSink swig_types[86]
#define SWIGTYPE_p_STATSTG swig_types[87]
#define SWIGTYPE_p_ULARGE_INTEGER swig_types[88]
#define SWIGTYPE_p_ULONG swig_types[89]
#define SWIGTYPE_p_bool swig_types[90]
#define SWIGTYPE_p_char swig_types[91]
#define SWIGTYPE_p_p_IABContainer swig_types[92]
#define SWIGTYPE_p_p_IAddrBook swig_types[93]
#define SWIGTYPE_p_p_IAttach swig_types[94]
#define SWIGTYPE_p_p_IDistList swig_types[95]
#define SWIGTYPE_p_p_IECChangeAdviseSink swig_types[96]
#define SWIGTYPE_p_p_IECChangeAdvisor swig_types[97]
#define SWIGTYPE_p_p_IECExportChanges swig_types[98]
#define SWIGTYPE_p_p_IECImportContentsChanges swig_types[99]
#define SWIGTYPE_p_p_IECLicense swig_types[100]
#define SWIGTYPE_p_p_IECMultiStoreTable swig_types[101]
#define SWIGTYPE_p_p_IECServiceAdmin swig_types[102]
#define SWIGTYPE_p_p_IECSingleInstance swig_types[103]
#define SWIGTYPE_p_p_IECTestProtocol swig_types[104]
#define SWIGTYPE_p_p_IExchangeExportChanges swig_types[105]
#define SWIGTYPE_p_p_IExchangeImportContentsChanges swig_types[106]
#define SWIGTYPE_p_p_IExchangeImportHierarchyChanges swig_types[107]
#define SWIGTYPE_p_p_IExchangeManageStore swig_types[108]
#define SWIGTYPE_p_p_IExchangeModifyTable swig_types[109]
#define SWIGTYPE_p_p_IMAPIAdviseSink swig_types[110]
#define SWIGTYPE_p_p_IMAPIContainer swig_types[111]
#define SWIGTYPE_p_p_IMAPIFolder swig_types[112]
#define SWIGTYPE_p_p_IMAPIProgress swig_types[113]
#define SWIGTYPE_p_p_IMAPIProp swig_types[114]
#define SWIGTYPE_p_p_IMAPISession swig_types[115]
#define SWIGTYPE_p_p_IMAPIStatus swig_types[116]
#define SWIGTYPE_p_p_IMAPITable swig_types[117]
#define SWIGTYPE_p_p_IMailUser swig_types[118]
#define SWIGTYPE_p_p_IMessage swig_types[119]
#define SWIGTYPE_p_p_IMsgServiceAdmin swig_types[120]
#define SWIGTYPE_p_p_IMsgStore swig_types[121]
#define SWIGTYPE_p_p_IProfAdmin swig_types[122]
#define SWIGTYPE_p_p_IProfSect swig_types[123]
#define SWIGTYPE_p_p_IProviderAdmin swig_types[124]
#define SWIGTYPE_p_p_IProxyStoreObject swig_types[125]
#define SWIGTYPE_p_p_ISequentialStream swig_types[126]
#define SWIGTYPE_p_p_IStream swig_types[127]
#define SWIGTYPE_p_p_IUnknown swig_types[128]
#define SWIGTYPE_p_p_LPMAPINAMEID swig_types[129]
#define SWIGTYPE_p_p_LPTSTR swig_types[130]
#define SWIGTYPE_p_p_MAPIERROR swig_types[131]
#define SWIGTYPE_p_p_MAPINotifSink swig_types[132]
#define SWIGTYPE_p_p_char swig_types[133]
#define SWIGTYPE_p_p_unsigned_char swig_types[134]
#define SWIGTYPE_p_p_void swig_types[135]
#define SWIGTYPE_p_tagLOCKTYPE swig_types[136]
#define SWIGTYPE_p_tagSTATFLAG swig_types[137]
#define SWIGTYPE_p_tagSTGTY swig_types[138]
#define SWIGTYPE_p_tagSTREAM_SEEK swig_types[139]
#define SWIGTYPE_p_unsigned_char swig_types[140]
#define SWIGTYPE_p_unsigned_int swig_types[141]
#define SWIGTYPE_p_wchar_t swig_types[142]
static swig_type_info *swig_types[144];
static swig_module_info swig_module = {swig_types, 143, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_MAPICore

#define SWIG_name   "MAPICorec::boot_MAPICore"
#define SWIG_prefix "MAPICorec::"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#undef LOCK_WRITE
#include <platform.h>
#include <mapi.h>
#include <mapidefs.h>
#include <mapicode.h>
#include <mapiutil.h>
#include "IECServiceAdmin.h"
#include "IECSpooler.h"
#include "IECTestProtocol.h"
#include "IECMultiStoreTable.h"
#include "IECExportChanges.h"
#include "IECLicense.h"

/*
 * perl: CORE/thread.h can define PTHREAD_CREATE_JOINABLE to a value. This clashes with
 * the windows pthread implementation, where it's used in an enum.
 */
#ifdef PTHREAD_CREATE_JOINABLE
	#undef PTHREAD_CREATE_JOINABLE
#endif

#include "MAPINotifSink.h"
#include "director_util.h"


#include "conversion.h"


#include "charset/convert.h"


void Do_Exception(HRESULT hr)
{
  int count;
  SV *exp;

  // GO WEIRD PERL STACK FIDDLING
  dSP;	

  ENTER;
  SAVETMPS;

  PUSHMARK(SP);
  XPUSHs(sv_2mortal(newSVpv("MAPI::Exception", 0)));
  XPUSHs(sv_2mortal(newSVuv(hr)));
  PUTBACK;
  count = perl_call_pv("MAPI::Exception::new", G_SCALAR);
  SPAGAIN;

  exp = POPs;

  PUSHMARK(SP);
  XPUSHs(exp);
  PUTBACK;
  perl_call_pv("Error::throw", G_DISCARD);

  FREETMPS;
  LEAVE;
}



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN void delete_IUnknown(IUnknown *self){ self->Release(); }

SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{    
  SV *obj = sv_newmortal();
  sv_setiv(obj, (IV) value);
  return obj;
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    long v = SvIV(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{    
  SV *obj = sv_newmortal();
  sv_setuv(obj, (UV) value);
  return obj;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}

SWIGINTERN HRESULT ISequentialStream_Read(ISequentialStream *self,ULONG cb,char **lpOutput,ULONG *ulRead){
			char *buffer;
			HRESULT hr = MAPIAllocateBuffer(cb, (void **)&buffer);

			if(hr != hrSuccess)
				goto exit;			

			self->Read(buffer, cb, ulRead);

			*lpOutput = buffer;
		exit:
			return hr;
		}

#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif



SWIGINTERN int
SWIG_AsVal_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, long long *val)
{
  if (SvIOK(obj)) {
    if (val) *val = SvIV(obj);
    return SWIG_OK;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long long v;
      errno = 0;
      v = strtoll(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      const double mant_min = -mant_max;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
	if (val) *val = (long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError; 
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE SV *
SWIG_From_long_SS_long  SWIG_PERL_DECL_ARGS_1(long long value)
{
  if (((long long) LONG_MIN <= value) && (value <= (long long) LONG_MAX)) {
    return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(value));
  } else {    
    char temp[256]; 
    SV *obj = sv_newmortal();
    sprintf(temp, "%lld", value);
    sv_setpv(obj, temp);
    return obj;
  }
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long long value)
{
  if (value < (unsigned long long) LONG_MAX) {
    return SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(value));
  } else {
    char temp[256]; 
    SV *obj = sv_newmortal();
    sprintf(temp, "%llu", value);
    sv_setpv(obj, temp);
    return obj;
  }
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long long *val)
{ 
  if (SvUOK(obj)) {
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    long v = SvIV(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long long v;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
	if (val) *val = (unsigned long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN IStream *new_IStream(){
			IStream *lpStream = NULL;
			HRESULT hr = CreateStreamOnHGlobal(NULL, TRUE, &lpStream);
			if(hr == hrSuccess)
				return lpStream;
			return NULL;
		}
SWIGINTERN void delete_IStream(IStream *self){
			self->Release();
		}

#undef LOCK_WRITE
#undef LOCK_EXCLUSIVE
#include <../include/mapidefs.h>

SWIGINTERN void delete_IMAPIProp(IMAPIProp *self){ self->Release(); }
SWIGINTERN void delete_IMAPIContainer(IMAPIContainer *self){ self->Release(); }
SWIGINTERN void delete_IMAPIAdviseSink(IMAPIAdviseSink *self){ self->Release(); }

SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE SV *
SWIG_FromWCharPtrAndSize(const WCHAR* wcarray, size_t size)
{
  SV *obj = sv_newmortal();
  if (wcarray) {
	convert_context converter;
	const char *carray = converter.convert_to<char*>("UTF-8", wcarray, size * sizeof(WCHAR), CHARSET_WCHAR);
    sv_setpvn(obj, carray, strlen(carray));
    SvUTF8_on(obj);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV * 
SWIG_FromWCharPtr(const wchar_t *cptr)
{ 
  return SWIG_FromWCharPtrAndSize(cptr, (cptr ? wcslen(cptr) : 0));
}

SWIGINTERN void delete_IMsgStore(IMsgStore *self){ self->Release(); }
SWIGINTERN void delete_IProxyStoreObject(IProxyStoreObject *self){ self->Release(); }
SWIGINTERN HRESULT IProxyStoreObject_UnwrapNoRef(IProxyStoreObject *self,IUnknown **OUTPUT){
            HRESULT hr = 0;
            hr = self->UnwrapNoRef((LPVOID*)OUTPUT);
            if(hr == 0)
                (*OUTPUT)->AddRef();

            return hr;          
        }
SWIGINTERN void delete_IMAPIFolder(IMAPIFolder *self){ self->Release(); }
SWIGINTERN void delete_IMessage(IMessage *self){ self->Release(); }
SWIGINTERN void delete_IAttach(IAttach *self){ self->Release(); }
SWIGINTERN void delete_IABContainer(IABContainer *self){ self->Release(); }
SWIGINTERN void delete_IMailUser(IMailUser *self){ self->Release(); }
SWIGINTERN void delete_IDistList(IDistList *self){ self->Release(); }
SWIGINTERN void delete_IMAPIStatus(IMAPIStatus *self){ self->Release(); }

SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvIOK(obj)) {
    if (val) *val = SvIV(obj);
    return SWIG_OK;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void delete_IMAPITable(IMAPITable *self){ self->Release(); }
SWIGINTERN void delete_IProfSect(IProfSect *self){ self->Release(); }
SWIGINTERN void delete_IMAPIProgress(IMAPIProgress *self){ self->Release(); }
SWIGINTERN void delete_IProviderAdmin(IProviderAdmin *self){ self->Release(); }

#include <../include/mapix.h>

SWIGINTERN void delete_IMAPISession(IMAPISession *self){ self->Release(); }
SWIGINTERN void delete_IAddrBook(IAddrBook *self){ self->Release(); }
SWIGINTERN void delete_IProfAdmin(IProfAdmin *self){ self->Release(); }
SWIGINTERN void delete_IMsgServiceAdmin(IMsgServiceAdmin *self){ self->Release(); }

SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true: false;
    return SWIG_AddCast(SWIG_OK);    
  }
  return SWIG_TypeError;
}

SWIGINTERN MAPINotifSink *new_MAPINotifSink(){ 
			MAPINotifSink *lpSink = NULL;
			MAPINotifSink::Create(&lpSink); 
			return lpSink; 
		}
SWIGINTERN void delete_MAPINotifSink(MAPINotifSink *self){ self->Release(); }

// Hack to get around OP_DELETE being an enum in perl\lib\core\opnames.h and EdkMdb.h
namespace EdkMdb {
	#include <edkmdb.h>
}
using namespace EdkMdb;

SWIGINTERN void delete_IExchangeImportContentsChanges(IExchangeImportContentsChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeImportHierarchyChanges(IExchangeImportHierarchyChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeExportChanges(IExchangeExportChanges *self){ self->Release(); }
SWIGINTERN void delete_IExchangeManageStore(IExchangeManageStore *self){ self->Release(); }
SWIGINTERN void delete_IExchangeModifyTable(IExchangeModifyTable *self){ self->Release(); }
SWIGINTERN void delete_IECServiceAdmin(IECServiceAdmin *self){ self->Release(); }
SWIGINTERN void delete_IECSpooler(IECSpooler *self){ self->Release(); }
SWIGINTERN void delete_IECTestProtocol(IECTestProtocol *self){ self->Release(); }
SWIGINTERN void delete_IECMultiStoreTable(IECMultiStoreTable *self){ self->Release(); }

SWIGINTERNINLINE SV *
SWIG_FromBytePtrAndSize(const unsigned char* carray, size_t size)
{
	return SWIG_FromCharPtrAndSize(reinterpret_cast<const char *>(carray), size);
}

SWIGINTERN void delete_IECLicense(IECLicense *self){ self->Release(); }

#include "IECExportChanges.h"

SWIGINTERN void delete_IECExportChanges(IECExportChanges *self){ self->Release(); }

#include "ECTags.h"
#include "IECUnknown.h"


const char *TypeFromObject(SV* sv) { return HvNAME(SvSTASH(SvRV(sv))); }


HRESULT UnwrapObject(IMAPIProp *lpWrapped, LPCIID USE_IID_FOR_OUTPUT, LPUNKNOWN* OUTPUT_USE_IID) {
	HRESULT hr = hrSuccess;
	IECUnknown* lpUnwrapped = NULL;
	LPSPropValue lpPropValue = NULL;

	if (lpWrapped == NULL || OUTPUT_USE_IID == NULL) {
		hr = MAPI_E_INVALID_PARAMETER;
		goto exit;
	}

	if (HrGetOneProp(lpWrapped, PR_EC_OBJECT, &lpPropValue) == hrSuccess) {

		lpUnwrapped = (IECUnknown *)lpPropValue->Value.lpszA;
		if (lpUnwrapped == NULL) {
			hr = MAPI_E_INVALID_PARAMETER;
			goto exit;
		}

		hr = lpUnwrapped->QueryInterface(*USE_IID_FOR_OUTPUT, (void**)OUTPUT_USE_IID);
	} else {
		// Possible object already wrapped, gives the orignale object back
		hr = lpWrapped->QueryInterface(*USE_IID_FOR_OUTPUT, (void**)OUTPUT_USE_IID);
	}

exit:
	if (lpPropValue)
		MAPIFreeBuffer(lpPropValue);

	return hr;
}


#include "IECChangeAdvisor.h"
#include "IECChangeAdviseSink.h"
#include "IECSingleInstance.h"
#include "IECImportContentsChanges.h"

SWIGINTERN void delete_IECChangeAdvisor(IECChangeAdvisor *self){ self->Release(); }
SWIGINTERN void delete_IECChangeAdviseSink(IECChangeAdviseSink *self){ self->Release(); }
SWIGINTERN void delete_IECImportContentsChanges(IECImportContentsChanges *self){ self->Release(); }
SWIGINTERN void delete_IECSingleInstance(IECSingleInstance *self){ self->Release(); }

#include <ECGuid.h>
#include <edkguid.h>

swig_type_info *TypeFromIID(REFIID iid)
{
#define TYPECASE(x) if(iid == IID_##x) return SWIGTYPE_p_##x;
  TYPECASE(IUnknown)
  TYPECASE(IStream)
  TYPECASE(IMAPIProp)
  TYPECASE(IMessage)
  TYPECASE(IMAPIContainer)
  TYPECASE(IMAPIFolder)
  TYPECASE(IMAPITable)
  TYPECASE(IABContainer)
  TYPECASE(IMailUser)
  TYPECASE(IDistList)
  TYPECASE(IMsgStore)
  if (iid == IID_ECMsgStoreOnline || iid == IID_ECMsgStoreOffline) return SWIGTYPE_p_IMsgStore;
  TYPECASE(IExchangeExportChanges)
  TYPECASE(IECExportChanges)
  TYPECASE(IExchangeImportContentsChanges)
  TYPECASE(IExchangeImportHierarchyChanges)
  TYPECASE(IExchangeManageStore)
  TYPECASE(IExchangeModifyTable)
  TYPECASE(IECServiceAdmin)
  TYPECASE(IECTestProtocol)
  TYPECASE(IECMultiStoreTable)
  TYPECASE(IECSpooler)
  TYPECASE(IECChangeAdvisor)
  TYPECASE(IECChangeAdviseSink)
  TYPECASE(IECSingleInstance)
  TYPECASE(IECLicense)
  TYPECASE(IProxyStoreObject)
  return NULL;
}

LPCIID IIDFromType(const char *type)
{
#define IIDCASE(x) if(strstr(type, #x) != NULL) return &IID_##x;
  IIDCASE(IUnknown)
  IIDCASE(IStream)
  IIDCASE(IMAPIProp)
  IIDCASE(IMessage)
  IIDCASE(IMAPIContainer)
  IIDCASE(IMAPIFolder)
  IIDCASE(IMAPITable)
  IIDCASE(IABContainer)
  IIDCASE(IMailUser)
  IIDCASE(IDistList)
  IIDCASE(IMsgStore)
  IIDCASE(IExchangeExportChanges)
  IIDCASE(IECExportChanges)
  IIDCASE(IExchangeImportContentsChanges)
  IIDCASE(IExchangeImportHierarchyChanges)
  IIDCASE(IExchangeManageStore)
  IIDCASE(IExchangeModifyTable)
  IIDCASE(IECServiceAdmin)
  IIDCASE(IECTestProtocol)
  IIDCASE(IECMultiStoreTable)
  IIDCASE(IECChangeAdvisor)
  IIDCASE(IECChangeAdviseSink)
  IIDCASE(IECSingleInstance)
  IIDCASE(IECLicense)
  IIDCASE(IProxyStoreObject)
  return &IID_IUnknown;
}

#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_MAPICore_var::
class _wrap_MAPICore_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_IUnknown_QueryInterface) {
  {
    IUnknown *arg1 = (IUnknown *) 0 ;
    IID *arg2 = 0 ;
    void **arg3 = (void **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    LPUNKNOWN temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    LPIID &__lpiid = arg2;
    {
      arg3 = (void **)&temp3;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IUnknown_QueryInterface(self,USE_IID_FOR_OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IUnknown_QueryInterface" "', argument " "1"" of type '" "IUnknown *""'"); 
    }
    arg1 = reinterpret_cast< IUnknown * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IUnknown_QueryInterface" "', argument " "2"" of type '" "IID const &""'");
      }
      arg2 = reinterpret_cast< IID * >(buf2);
    }
    result = (arg1)->QueryInterface((IID const &)*arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IUnknown) {
  {
    IUnknown *arg1 = (IUnknown *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IUnknown(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IUnknown, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IUnknown" "', argument " "1"" of type '" "IUnknown *""'"); 
    }
    arg1 = reinterpret_cast< IUnknown * >(argp1);
    delete_IUnknown(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ISequentialStream_Write) {
  {
    ISequentialStream *arg1 = (ISequentialStream *) 0 ;
    char *arg2 = (char *) 0 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 = 0 ;
    int alloc2 = 0 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ISequentialStream_Write(self,pv,cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_ISequentialStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISequentialStream_Write" "', argument " "1"" of type '" "ISequentialStream *""'"); 
    }
    arg1 = reinterpret_cast< ISequentialStream * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISequentialStream_Write" "', argument " "2"" of type '" "(const char *pv, ULONG cb)""'");
    }
    arg2 = (char *) buf2;					       
    arg3 = (ULONG) size2 - 1;
    result = (arg1)->Write((char const *)arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_ISequentialStream_Read) {
  {
    ISequentialStream *arg1 = (ISequentialStream *) 0 ;
    ULONG arg2 ;
    char **arg3 = (char **) 0 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    char *temp3 = 0 ;
    ULONG tempn3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg3 = &temp3; arg4 = &tempn3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ISequentialStream_Read(self,cb,ulRead);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_ISequentialStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISequentialStream_Read" "', argument " "1"" of type '" "ISequentialStream *""'"); 
    }
    arg1 = reinterpret_cast< ISequentialStream * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISequentialStream_Read" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = ISequentialStream_Read(arg1,arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (*arg3) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize(*arg3,*arg4); argvi++  ;
      MAPIFreeBuffer(*arg3);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ISequentialStream) {
  {
    ISequentialStream *arg1 = (ISequentialStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ISequentialStream(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_ISequentialStream, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISequentialStream" "', argument " "1"" of type '" "ISequentialStream *""'"); 
    }
    arg1 = reinterpret_cast< ISequentialStream * >(argp1);
    delete arg1;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_Seek) {
  {
    IStream *arg1 = (IStream *) 0 ;
    LARGE_INTEGER arg2 ;
    DWORD arg3 ;
    ULARGE_INTEGER *arg4 = (ULARGE_INTEGER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    ULARGE_INTEGER u4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg4 = &u4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IStream_Seek(self,dlibMove,dwOrigin);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Seek" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    {
      long long l = 0;
      SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &l);  
      
      (&arg2)->QuadPart = l;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IStream_Seek" "', argument " "3"" of type '" "DWORD""'");
    } 
    arg3 = static_cast< DWORD >(val3);
    result = (arg1)->Seek(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(arg4->QuadPart); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_SetSize) {
  {
    IStream *arg1 = (IStream *) 0 ;
    ULARGE_INTEGER arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IStream_SetSize(self,libNewSize);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_SetSize" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &l);  
      
      (&arg2)->QuadPart = l;
    }
    result = (arg1)->SetSize(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_CopyTo) {
  {
    IStream *arg1 = (IStream *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    ULARGE_INTEGER arg3 ;
    ULARGE_INTEGER *arg4 = (ULARGE_INTEGER *) 0 ;
    ULARGE_INTEGER *arg5 = (ULARGE_INTEGER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    ULARGE_INTEGER u4 ;
    ULARGE_INTEGER u5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg4 = &u4;
    }
    {
      arg5 = &u5;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IStream_CopyTo(self,pstm,cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_CopyTo" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IStream_CopyTo" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(2), &l);  
      
      (&arg3)->QuadPart = l;
    }
    result = (arg1)->CopyTo(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(arg4->QuadPart); argvi++  ;
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(arg5->QuadPart); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_Commit) {
  {
    IStream *arg1 = (IStream *) 0 ;
    DWORD arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IStream_Commit(self,grfCommitFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Commit" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IStream_Commit" "', argument " "2"" of type '" "DWORD""'");
    } 
    arg2 = static_cast< DWORD >(val2);
    result = (arg1)->Commit(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_Revert) {
  {
    IStream *arg1 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IStream_Revert(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Revert" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    result = (arg1)->Revert();
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_LockRegion) {
  {
    IStream *arg1 = (IStream *) 0 ;
    ULARGE_INTEGER arg2 ;
    ULARGE_INTEGER arg3 ;
    DWORD arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IStream_LockRegion(self,libOffset,cb,dwLockType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_LockRegion" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &l);  
      
      (&arg2)->QuadPart = l;
    }
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(2), &l);  
      
      (&arg3)->QuadPart = l;
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IStream_LockRegion" "', argument " "4"" of type '" "DWORD""'");
    } 
    arg4 = static_cast< DWORD >(val4);
    result = (arg1)->LockRegion(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_UnlockRegion) {
  {
    IStream *arg1 = (IStream *) 0 ;
    ULARGE_INTEGER arg2 ;
    ULARGE_INTEGER arg3 ;
    DWORD arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IStream_UnlockRegion(self,libOffset,cb,dwLockType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_UnlockRegion" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &l);  
      
      (&arg2)->QuadPart = l;
    }
    {
      unsigned long long l = 0;
      SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(2), &l);  
      
      (&arg3)->QuadPart = l;
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IStream_UnlockRegion" "', argument " "4"" of type '" "DWORD""'");
    } 
    arg4 = static_cast< DWORD >(val4);
    result = (arg1)->UnlockRegion(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_Stat) {
  {
    IStream *arg1 = (IStream *) 0 ;
    STATSTG *arg2 = (STATSTG *) 0 ;
    DWORD arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IStream_Stat(self,pstatstg,grfStatFlag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Stat" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_STATSTG, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IStream_Stat" "', argument " "2"" of type '" "STATSTG *""'"); 
    }
    arg2 = reinterpret_cast< STATSTG * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IStream_Stat" "', argument " "3"" of type '" "DWORD""'");
    } 
    arg3 = static_cast< DWORD >(val3);
    result = (arg1)->Stat(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IStream_Clone) {
  {
    IStream *arg1 = (IStream *) 0 ;
    IStream **arg2 = (IStream **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    IStream *temp2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    temp2 = NULL; arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IStream_Clone(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IStream_Clone" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    result = (arg1)->Clone(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IStream) {
  {
    int argvi = 0;
    IStream *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IStream();");
    }
    result = (IStream *)new_IStream();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IStream, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IStream) {
  {
    IStream *arg1 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IStream(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IStream" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    delete_IStream(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_GetLastError) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIProp_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetLastError" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_SaveChanges) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIProp_SaveChanges(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_SaveChanges" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_SaveChanges" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->SaveChanges(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_GetProps) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    LPSPropTagArray arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPSPropValue *arg5 = (LPSPropValue *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG c4 ;
    LPSPropValue lp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    lp4 = NULL; arg5 = &lp4; c4 = 0; arg4 = &c4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIProp_GetProps(self,lpPropTagArray,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_GetProps" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetProps(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropValue(*(arg5),*(arg4)))); argvi++  ;
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_GetPropList) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    LPSPropTagArray *arg3 = (LPSPropTagArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    LPSPropTagArray temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIProp_GetPropList(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetPropList" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_GetPropList" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetPropList(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropTagArray(*(arg3)))); argvi++  ;
    }
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_OpenProperty) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    LPUNKNOWN *arg6 = (LPUNKNOWN *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    LPUNKNOWN temp6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    LPCIID &__lpiid = arg3;
    ULONG ulFlags = 0;
    {
      arg6 = (LPUNKNOWN *)&temp6;
    }
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPIProp_OpenProperty(self,ulPropTag,USE_IID_FOR_OUTPUT,ulInterfaceOptions,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_OpenProperty" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProp_OpenProperty" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIProp_OpenProperty" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_OpenProperty" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIProp_OpenProperty" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->OpenProperty(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg6), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_SetProps) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    LPSPropValue arg3 ;
    LPSPropProblemArray *arg4 = (LPSPropProblemArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    LPSPropProblemArray temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    temp4 = NULL; arg4 = &temp4;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIProp_SetProps(self,cValues,lpProps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_SetProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_LPSPropValue((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    result = (arg1)->SetProps(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropProblemArray(*(arg4)))); argvi++  ;
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_DeleteProps) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    LPSPropTagArray arg2 ;
    LPSPropProblemArray *arg3 = (LPSPropProblemArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    LPSPropProblemArray temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIProp_DeleteProps(self,lpPropTagArray);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_DeleteProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    result = (arg1)->DeleteProps(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropProblemArray(*(arg3)))); argvi++  ;
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_CopyTo) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    LPCIID arg3 ;
    LPSPropTagArray arg4 ;
    ULONG arg5 ;
    IMAPIProgress *arg6 = (IMAPIProgress *) 0 ;
    LPCIID arg7 ;
    IUnknown *arg8 = (IUnknown *) 0 ;
    ULONG arg9 ;
    LPSPropProblemArray *arg10 = (LPSPropProblemArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int res7 ;
    char *buf7 ;
    size_t size7 ;
    int alloc7 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    unsigned int fl9 ;
    int ecode9 ;
    LPSPropProblemArray temp10 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    arg4 = NULL;
    ULONG ulFlags = 0;
    temp10 = NULL; arg10 = &temp10;
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: IMAPIProp_CopyTo(self,cInterfaces,lpInterfaces,lpExcludeProps,ulUIParam,lpProgress,lpInterface,lpDestObj,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_CopyTo" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_LPCIID((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    {
      if(!SvOK(ST(2))) {
        arg4 = NULL;
      } else {
        arg4 = AV_to_LPSPropTagArray((AV *)SvRV(ST(2)));
      }
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIProp_CopyTo" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    res6 = SWIG_ConvertPtr(ST(4), &argp6,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIProp_CopyTo" "', argument " "6"" of type '" "IMAPIProgress *""'"); 
    }
    arg6 = reinterpret_cast< IMAPIProgress * >(argp6);
    {
      alloc7 = SWIG_OLDOBJ;
      res7 = SWIG_AsCharPtrAndSize(ST(5), &buf7, &size7, &alloc7);
      if (!SWIG_IsOK(res7) || (size7 != 0 && (size7-1) != sizeof(MAPIUID))) {
        // size7-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IMAPIProp_CopyTo" "', argument " "7"" of type '" "LPCIID""'");
      }
      arg7 = reinterpret_cast< LPCIID >(buf7);
    }
    res8 = SWIG_ConvertPtr(ST(6), &argp8,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IMAPIProp_CopyTo" "', argument " "8"" of type '" "IUnknown *""'"); 
    }
    arg8 = reinterpret_cast< IUnknown * >(argp8);
    {
      ecode9 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &fl9);
      if (!SWIG_IsOK(ecode9)) {
        SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPIProp_CopyTo" "', argument " "9"" of type '" "ULONG""'");
      } 
      arg9 = fl9;
      ulFlags = fl9;
    }
    result = (arg1)->CopyTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropProblemArray(*(arg10)))); argvi++  ;
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    {
      if(arg4)
      MAPIFreeBuffer(arg4);
    }
    
    
    if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
    
    
    {
      if(*arg10)
      MAPIFreeBuffer(*arg10);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    {
      if(arg4)
      MAPIFreeBuffer(arg4);
    }
    
    
    if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
    
    
    {
      if(*arg10)
      MAPIFreeBuffer(*arg10);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_CopyProps) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    LPSPropTagArray arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    LPCIID arg5 ;
    IUnknown *arg6 = (IUnknown *) 0 ;
    ULONG arg7 ;
    LPSPropProblemArray *arg8 = (LPSPropProblemArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    unsigned int fl7 ;
    int ecode7 ;
    LPSPropProblemArray temp8 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    temp8 = NULL; arg8 = &temp8;
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: IMAPIProp_CopyProps(self,lpIncludeProps,ulUIParam,lpProgress,lpInterface,lpDestObj,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_CopyProps" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProp_CopyProps" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIProp_CopyProps" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIProp_CopyProps" "', argument " "5"" of type '" "LPCIID""'");
      }
      arg5 = reinterpret_cast< LPCIID >(buf5);
    }
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIProp_CopyProps" "', argument " "6"" of type '" "IUnknown *""'"); 
    }
    arg6 = reinterpret_cast< IUnknown * >(argp6);
    {
      ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), &fl7);
      if (!SWIG_IsOK(ecode7)) {
        SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIProp_CopyProps" "', argument " "7"" of type '" "ULONG""'");
      } 
      arg7 = fl7;
      ulFlags = fl7;
    }
    result = (arg1)->CopyProps(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropProblemArray(*(arg8)))); argvi++  ;
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    {
      if(*arg8)
      MAPIFreeBuffer(*arg8);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    {
      if(*arg8)
      MAPIFreeBuffer(*arg8);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_GetNamesFromIDs) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    LPSPropTagArray *arg2 = (LPSPropTagArray *) 0 ;
    LPGUID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPMAPINAMEID **arg6 = (LPMAPINAMEID **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPMAPINAMEID *lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIProp_GetNamesFromIDs(self,lppPropTags,lpPropSetGuid,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_LPSPropTagArray, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "2"" of type '" "LPSPropTagArray *""'"); 
    }
    arg2 = reinterpret_cast< LPSPropTagArray * >(argp2);
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "3"" of type '" "LPGUID""'");
      }
      arg3 = reinterpret_cast< LPGUID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_GetNamesFromIDs" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetNamesFromIDs(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_p_LPMAPINAMEID(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if(*arg2)
      MAPIFreeBuffer(*arg2);
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg2)
      MAPIFreeBuffer(*arg2);
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProp_GetIDsFromNames) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    ULONG arg2 ;
    LPMAPINAMEID *arg3 = (LPMAPINAMEID *) 0 ;
    ULONG arg4 ;
    LPSPropTagArray *arg5 = (LPSPropTagArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    LPSPropTagArray temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIProp_GetIDsFromNames(self,cPropNames,lppPropNames,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProp_GetIDsFromNames" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_p_LPMAPINAMEID((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProp_GetIDsFromNames" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetIDsFromNames(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropTagArray(*(arg5)))); argvi++  ;
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIProp) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIProp(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProp, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIProp" "', argument " "1"" of type '" "IMAPIProp *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProp * >(argp1);
    delete_IMAPIProp(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIContainer_GetContentsTable) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIContainer_GetContentsTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetContentsTable" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetContentsTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetContentsTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIContainer_GetHierarchyTable) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIContainer_GetHierarchyTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetHierarchyTable" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetHierarchyTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetHierarchyTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIContainer_OpenEntry) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPCIID arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    IUnknown **arg7 = (IUnknown **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    unsigned int fl5 ;
    int ecode5 ;
    ULONG ulType6 ;
    IUnknown *lpUnk6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      ulType6 = NULL;
      lpUnk6 = NULL;
      
      arg6 = &ulType6;
      arg7 = &lpUnk6;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIContainer_OpenEntry(self,cbEntryID,lpEntryID,lpInterface,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_OpenEntry" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIContainer_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIContainer_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIContainer_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      switch(*(arg6)) {
      case MAPI_FOLDER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MESSAGE:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MAILUSER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_DISTLIST:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_ABCONT:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      default:
        break;
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIContainer_SetSearchCriteria) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    LPSRestriction arg2 ;
    LPENTRYLIST arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    arg3 = NULL;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIContainer_SetSearchCriteria(self,lpRestriction,lpContainerList,ulSearchFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_SetSearchCriteria" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPSRestriction((HV *)SvRV(ST(1)));
      }
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPENTRYLIST((AV *)SvRV(ST(2)));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIContainer_SetSearchCriteria" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    result = (arg1)->SetSearchCriteria(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIContainer_GetSearchCriteria) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    ULONG arg2 ;
    LPSRestriction *arg3 = (LPSRestriction *) 0 ;
    LPENTRYLIST *arg4 = (LPENTRYLIST *) 0 ;
    ULONG *arg5 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    LPSRestriction temp3 ;
    LPENTRYLIST temp4 ;
    ULONG temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    temp4 = NULL; arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPIContainer_GetSearchCriteria(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIContainer_GetSearchCriteria" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIContainer_GetSearchCriteria" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetSearchCriteria(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPSRestriction(*(arg3)))); argvi++  ;
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPENTRYLIST(*(arg4)))); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIContainer) {
  {
    IMAPIContainer *arg1 = (IMAPIContainer *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIContainer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIContainer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIContainer" "', argument " "1"" of type '" "IMAPIContainer *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIContainer * >(argp1);
    delete_IMAPIContainer(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIAdviseSink_OnNotify) {
  {
    IMAPIAdviseSink *arg1 = (IMAPIAdviseSink *) 0 ;
    ULONG arg2 ;
    LPNOTIFICATION arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ULONG result;
    dXSARGS;
    
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIAdviseSink_OnNotify(self,cNotif,lpNotifications);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIAdviseSink_OnNotify" "', argument " "1"" of type '" "IMAPIAdviseSink *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIAdviseSink * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIAdviseSink_OnNotify" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = HV_to_LPNOTIFICATION((HV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->OnNotify(arg2,arg3);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIAdviseSink) {
  {
    IMAPIAdviseSink *arg1 = (IMAPIAdviseSink *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIAdviseSink(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIAdviseSink, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIAdviseSink" "', argument " "1"" of type '" "IMAPIAdviseSink *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIAdviseSink * >(argp1);
    delete_IMAPIAdviseSink(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_Advise) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    IMAPIAdviseSink *arg5 = (IMAPIAdviseSink *) 0 ;
    ULONG *arg6 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    ULONG temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg6 = &temp6;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgStore_Advise(self,cbEntryID,lpEntryID,ulEventMask,lpAdviseSink);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_Advise" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_Advise" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgStore_Advise" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMsgStore_Advise" "', argument " "5"" of type '" "IMAPIAdviseSink *""'"); 
    }
    arg5 = reinterpret_cast< IMAPIAdviseSink * >(argp5);
    result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_Unadvise) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgStore_Unadvise(self,ulConnection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_Unadvise" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_Unadvise" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->Unadvise(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_CompareEntryIDs) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    ULONG *arg7 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    ULONG temp7 ;
    int res7 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg7 = &temp7;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgStore_CompareEntryIDs(self,cbEntryID1,lpEntryID1,cbEntryID2,lpEntryID2,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMsgStore_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res7)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg7)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_OpenEntry) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPCIID arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    IUnknown **arg7 = (IUnknown **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    unsigned int fl5 ;
    int ecode5 ;
    ULONG ulType6 ;
    IUnknown *lpUnk6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      ulType6 = NULL;
      lpUnk6 = NULL;
      
      arg6 = &ulType6;
      arg7 = &lpUnk6;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgStore_OpenEntry(self,cbEntryID,lpEntryID,lpInterface,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_OpenEntry" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMsgStore_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      switch(*(arg6)) {
      case MAPI_FOLDER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MESSAGE:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MAILUSER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_DISTLIST:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_ABCONT:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      default:
        break;
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_SetReceiveFolder) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgStore_SetReceiveFolder(self,lpszMessageClass,ulFlags,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgStore_SetReceiveFolder" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->SetReceiveFolder(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_GetReceiveFolder) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    LPTSTR *arg6 = (LPTSTR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    LPTSTR lpStr6 = NULL ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    {
      arg6 = &lpStr6;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgStore_GetReceiveFolder(self,lpszMessageClass,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetReceiveFolder" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_GetReceiveFolder" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->GetReceiveFolder(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    {
      if (ulFlags & MAPI_UNICODE) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromWCharPtr(*arg6); argvi++  ;
      } else {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtr((char*)*arg6); argvi++  ;
      }
    }
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_GetReceiveFolderTable) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgStore_GetReceiveFolderTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetReceiveFolderTable" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_GetReceiveFolderTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetReceiveFolderTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_StoreLogoff) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgStore_StoreLogoff(self,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_StoreLogoff" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    if (!(SWIG_IsOK((res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2),SWIGTYPE_p_ULONG,0))))) {
      unsigned int val; 
      int ecode = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMsgStore_StoreLogoff" "', argument " "2"" of type '" "ULONG""'");
      }
      temp2 = static_cast< ULONG >(val);
      arg2 = &temp2;
      res2 = SWIG_AddTmpMask(ecode);
    }
    _saved[0] = ST(1);
    result = (arg1)->StoreLogoff(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_AbortSubmit) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgStore_AbortSubmit(self,cbEntryID,lpEntryID,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_AbortSubmit" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_AbortSubmit" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgStore_AbortSubmit" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->AbortSubmit(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_GetOutgoingQueue) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgStore_GetOutgoingQueue(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_GetOutgoingQueue" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_GetOutgoingQueue" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetOutgoingQueue(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_SetLockState) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    IMessage *arg2 = (IMessage *) 0 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgStore_SetLockState(self,lpMessage,ulLockState);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_SetLockState" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgStore_SetLockState" "', argument " "2"" of type '" "IMessage *""'"); 
    }
    arg2 = reinterpret_cast< IMessage * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgStore_SetLockState" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    result = (arg1)->SetLockState(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_FinishedMsg) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgStore_FinishedMsg(self,ulFlags,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_FinishedMsg" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgStore_FinishedMsg" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgStore_FinishedMsg" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    result = (arg1)->FinishedMsg(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgStore_NotifyNewMail) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    LPNOTIFICATION arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgStore_NotifyNewMail(self,lpNotification);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgStore_NotifyNewMail" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPNOTIFICATION((HV *)SvRV(ST(1)));
      }
    }
    result = (arg1)->NotifyNewMail(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMsgStore) {
  {
    IMsgStore *arg1 = (IMsgStore *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMsgStore(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgStore, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMsgStore" "', argument " "1"" of type '" "IMsgStore *""'"); 
    }
    arg1 = reinterpret_cast< IMsgStore * >(argp1);
    delete_IMsgStore(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProxyStoreObject_PlaceHolder1) {
  {
    IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IProxyStoreObject_PlaceHolder1(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_PlaceHolder1" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
    }
    arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
    result = (arg1)->PlaceHolder1();
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProxyStoreObject_PlaceHolder2) {
  {
    IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IProxyStoreObject_PlaceHolder2(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_PlaceHolder2" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
    }
    arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
    result = (arg1)->PlaceHolder2();
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IProxyStoreObject) {
  {
    IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IProxyStoreObject(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProxyStoreObject, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProxyStoreObject" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
    }
    arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
    delete_IProxyStoreObject(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProxyStoreObject_UnwrapNoRef) {
  {
    IProxyStoreObject *arg1 = (IProxyStoreObject *) 0 ;
    IUnknown **arg2 = (IUnknown **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    IUnknown *temp2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    temp2 = NULL; arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IProxyStoreObject_UnwrapNoRef(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProxyStoreObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProxyStoreObject_UnwrapNoRef" "', argument " "1"" of type '" "IProxyStoreObject *""'"); 
    }
    arg1 = reinterpret_cast< IProxyStoreObject * >(argp1);
    result = IProxyStoreObject_UnwrapNoRef(arg1,arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IUnknown, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_CreateMessage) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    LPCIID arg2 ;
    ULONG arg3 ;
    IMessage **arg4 = (IMessage **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int fl3 ;
    int ecode3 ;
    IMessage *temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIFolder_CreateMessage(self,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CreateMessage" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_CreateMessage" "', argument " "2"" of type '" "LPCIID""'");
      }
      arg2 = reinterpret_cast< LPCIID >(buf2);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_CreateMessage" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->CreateMessage(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_CopyMessages) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    LPENTRYLIST arg2 ;
    LPCIID arg3 ;
    IUnknown *arg4 = (IUnknown *) 0 ;
    ULONG arg5 ;
    IMAPIProgress *arg6 = (IMAPIProgress *) 0 ;
    ULONG arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    unsigned int fl7 ;
    int ecode7 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: IMAPIFolder_CopyMessages(self,lpMsgList,lpInterface,lpDestFolder,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CopyMessages" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIFolder_CopyMessages" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_CopyMessages" "', argument " "4"" of type '" "IUnknown *""'"); 
    }
    arg4 = reinterpret_cast< IUnknown * >(argp4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_CopyMessages" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPIFolder_CopyMessages" "', argument " "6"" of type '" "IMAPIProgress *""'"); 
    }
    arg6 = reinterpret_cast< IMAPIProgress * >(argp6);
    {
      ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), &fl7);
      if (!SWIG_IsOK(ecode7)) {
        SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIFolder_CopyMessages" "', argument " "7"" of type '" "ULONG""'");
      } 
      arg7 = fl7;
      ulFlags = fl7;
    }
    result = (arg1)->CopyMessages(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_DeleteMessages) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPIFolder_DeleteMessages(self,lpMsgList,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_DeleteMessages" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->DeleteMessages(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_CreateFolder) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    LPTSTR arg3 ;
    LPTSTR arg4 ;
    LPCIID arg5 ;
    ULONG arg6 ;
    IMAPIFolder **arg7 = (IMAPIFolder **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    unsigned int fl6 ;
    int ecode6 ;
    IMAPIFolder *temp7 ;
    std::string strInput3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp7 = NULL; arg7 = &temp7;
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: IMAPIFolder_CreateFolder(self,ulFolderType,lpszFolderName,lpszFolderComment,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CreateFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIFolder_CreateFolder" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_CreateFolder" "', argument " "5"" of type '" "LPCIID""'");
      }
      arg5 = reinterpret_cast< LPCIID >(buf5);
    }
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPIFolder_CreateFolder" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->CreateFolder(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    {
      
    }
    {
      
    }
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    XSRETURN(argvi);
  fail:
    
    
    {
      
    }
    {
      
    }
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_CopyFolder) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPCIID arg4 ;
    IUnknown *arg5 = (IUnknown *) 0 ;
    LPTSTR arg6 ;
    ULONG arg7 ;
    IMAPIProgress *arg8 = (IMAPIProgress *) 0 ;
    ULONG arg9 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    unsigned int val7 ;
    int ecode7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    unsigned int fl9 ;
    int ecode9 ;
    std::string strInput6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: IMAPIFolder_CopyFolder(self,cbEntryID,lpEntryID,lpInterface,lpDestFolder,lpszNewFolderName,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_CopyFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_CopyFolder" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_CopyFolder" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_CopyFolder" "', argument " "5"" of type '" "IUnknown *""'"); 
    }
    arg5 = reinterpret_cast< IUnknown * >(argp5);
    {
      arg6 = (LPTSTR)ST(4);
    }
    ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMAPIFolder_CopyFolder" "', argument " "7"" of type '" "ULONG""'");
    } 
    arg7 = static_cast< ULONG >(val7);
    res8 = SWIG_ConvertPtr(ST(6), &argp8,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IMAPIFolder_CopyFolder" "', argument " "8"" of type '" "IMAPIProgress *""'"); 
    }
    arg8 = reinterpret_cast< IMAPIProgress * >(argp8);
    {
      ecode9 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &fl9);
      if (!SWIG_IsOK(ecode9)) {
        SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPIFolder_CopyFolder" "', argument " "9"" of type '" "ULONG""'");
      } 
      arg9 = fl9;
      ulFlags = fl9;
    }
    {
      SV *entry = (SV*)arg6;
      if (!SvOK(entry))
      arg6 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg6 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput6.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg6 = (LPTSTR)strInput6.c_str();
        }
      }
    }
    result = (arg1)->CopyFolder(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    {
      
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    {
      
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_DeleteFolder) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    IMAPIProgress *arg5 = (IMAPIProgress *) 0 ;
    ULONG arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPIFolder_DeleteFolder(self,cbEntryID,lpEntryID,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "5"" of type '" "IMAPIProgress *""'"); 
    }
    arg5 = reinterpret_cast< IMAPIProgress * >(argp5);
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPIFolder_DeleteFolder" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    result = (arg1)->DeleteFolder(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_SetReadFlags) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPIFolder_SetReadFlags(self,lpMsgList,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_SetReadFlags" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->SetReadFlags(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_GetMessageStatus) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIFolder_GetMessageStatus(self,cbEntryID,lpEntryID,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_GetMessageStatus" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetMessageStatus(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_SetMessageStatus) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    ULONG temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg6 = &temp6;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIFolder_SetMessageStatus(self,cbEntryID,lpEntryID,ulNewStatus,ulNewStatusMask);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIFolder_SetMessageStatus" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    result = (arg1)->SetMessageStatus(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_SaveContentsSort) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    LPSSortOrderSet arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIFolder_SaveContentsSort(self,lpSortCriteria,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_SaveContentsSort" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPSSortOrderSet((HV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIFolder_SaveContentsSort" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SaveContentsSort(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIFolder_EmptyFolder) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    ULONG arg2 ;
    IMAPIProgress *arg3 = (IMAPIProgress *) 0 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIFolder_EmptyFolder(self,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "3"" of type '" "IMAPIProgress *""'"); 
    }
    arg3 = reinterpret_cast< IMAPIProgress * >(argp3);
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIFolder_EmptyFolder" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->EmptyFolder(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIFolder) {
  {
    IMAPIFolder *arg1 = (IMAPIFolder *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIFolder(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIFolder, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIFolder" "', argument " "1"" of type '" "IMAPIFolder *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIFolder * >(argp1);
    delete_IMAPIFolder(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_GetAttachmentTable) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMessage_GetAttachmentTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_GetAttachmentTable" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_GetAttachmentTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetAttachmentTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_OpenAttach) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    IAttach **arg5 = (IAttach **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    IAttach *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMessage_OpenAttach(self,ulAttachmentNum,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_OpenAttach" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_OpenAttach" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMessage_OpenAttach" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMessage_OpenAttach" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->OpenAttach(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAttach, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_CreateAttach) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    LPCIID arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    IAttach **arg5 = (IAttach **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    IAttach *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg4 = &temp4;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMessage_CreateAttach(self,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_CreateAttach" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMessage_CreateAttach" "', argument " "2"" of type '" "LPCIID""'");
      }
      arg2 = reinterpret_cast< LPCIID >(buf2);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMessage_CreateAttach" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->CreateAttach(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAttach, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_DeleteAttach) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMessage_DeleteAttach(self,ulAttachmentNum,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_DeleteAttach" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_DeleteAttach" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMessage_DeleteAttach" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMessage_DeleteAttach" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMessage_DeleteAttach" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->DeleteAttach(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_GetRecipientTable) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMessage_GetRecipientTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_GetRecipientTable" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_GetRecipientTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetRecipientTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_ModifyRecipients) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    LPADRLIST arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMessage_ModifyRecipients(self,ulFlags,INPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_ModifyRecipients" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_ModifyRecipients" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPADRLIST((AV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->ModifyRecipients(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      FreeProws((LPSRowSet)arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      FreeProws((LPSRowSet)arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_SubmitMessage) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMessage_SubmitMessage(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_SubmitMessage" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_SubmitMessage" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->SubmitMessage(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMessage_SetReadFlag) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMessage_SetReadFlag(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMessage_SetReadFlag" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMessage_SetReadFlag" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->SetReadFlag(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMessage) {
  {
    IMessage *arg1 = (IMessage *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMessage(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMessage, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMessage" "', argument " "1"" of type '" "IMessage *""'"); 
    }
    arg1 = reinterpret_cast< IMessage * >(argp1);
    delete_IMessage(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IAttach) {
  {
    IAttach *arg1 = (IAttach *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IAttach(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAttach, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IAttach" "', argument " "1"" of type '" "IAttach *""'"); 
    }
    arg1 = reinterpret_cast< IAttach * >(argp1);
    delete_IAttach(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IABContainer_CreateEntry) {
  {
    IABContainer *arg1 = (IABContainer *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPMAPIPROP *arg5 = (LPMAPIPROP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IABContainer_CreateEntry(self,cbEntryID,lpEntryID,ulCreateFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_CreateEntry" "', argument " "1"" of type '" "IABContainer *""'"); 
    }
    arg1 = reinterpret_cast< IABContainer * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IABContainer_CreateEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IABContainer_CreateEntry" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_LPMAPIPROP, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IABContainer_CreateEntry" "', argument " "5"" of type '" "LPMAPIPROP *""'"); 
    }
    arg5 = reinterpret_cast< LPMAPIPROP * >(argp5);
    result = (arg1)->CreateEntry(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IABContainer_CopyEntries) {
  {
    IABContainer *arg1 = (IABContainer *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IABContainer_CopyEntries(self,lpEntries,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_CopyEntries" "', argument " "1"" of type '" "IABContainer *""'"); 
    }
    arg1 = reinterpret_cast< IABContainer * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_CopyEntries" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IABContainer_CopyEntries" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IABContainer_CopyEntries" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->CopyEntries(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IABContainer_DeleteEntries) {
  {
    IABContainer *arg1 = (IABContainer *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IABContainer_DeleteEntries(self,lpEntries,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_DeleteEntries" "', argument " "1"" of type '" "IABContainer *""'"); 
    }
    arg1 = reinterpret_cast< IABContainer * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_DeleteEntries" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->DeleteEntries(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IABContainer_ResolveNames) {
  {
    IABContainer *arg1 = (IABContainer *) 0 ;
    LPSPropTagArray arg2 ;
    ULONG arg3 ;
    LPADRLIST arg4 ;
    LPFlagList arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    arg4 = NULL;
    arg5 = NULL;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IABContainer_ResolveNames(self,lpPropTagArray,ulFlags,INOUT,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IABContainer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IABContainer_ResolveNames" "', argument " "1"" of type '" "IABContainer *""'"); 
    }
    arg1 = reinterpret_cast< IABContainer * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IABContainer_ResolveNames" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      if(!SvOK(ST(3))) {
        arg4 = NULL;
      } else {
        arg4 = AV_to_LPADRLIST((AV *)SvRV(ST(3)));
      }
    }
    {
      if(!SvOK(ST(4))) {
        arg5 = NULL;
      } else {
        arg5 = AV_to_LPFlagList((AV *)SvRV(ST(4)));
      }
    }
    result = (arg1)->ResolveNames(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      FreeProws((LPSRowSet)arg4);
    }
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      FreeProws((LPSRowSet)arg4);
    }
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IABContainer) {
  {
    IABContainer *arg1 = (IABContainer *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IABContainer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IABContainer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IABContainer" "', argument " "1"" of type '" "IABContainer *""'"); 
    }
    arg1 = reinterpret_cast< IABContainer * >(argp1);
    delete_IABContainer(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMailUser) {
  {
    IMailUser *arg1 = (IMailUser *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMailUser(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMailUser, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMailUser" "', argument " "1"" of type '" "IMailUser *""'"); 
    }
    arg1 = reinterpret_cast< IMailUser * >(argp1);
    delete_IMailUser(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IDistList_CreateEntry) {
  {
    IDistList *arg1 = (IDistList *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPMAPIPROP *arg5 = (LPMAPIPROP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IDistList_CreateEntry(self,cbEntryID,lpEntryID,ulCreateFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_CreateEntry" "', argument " "1"" of type '" "IDistList *""'"); 
    }
    arg1 = reinterpret_cast< IDistList * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDistList_CreateEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDistList_CreateEntry" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_LPMAPIPROP, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IDistList_CreateEntry" "', argument " "5"" of type '" "LPMAPIPROP *""'"); 
    }
    arg5 = reinterpret_cast< LPMAPIPROP * >(argp5);
    result = (arg1)->CreateEntry(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IDistList_CopyEntries) {
  {
    IDistList *arg1 = (IDistList *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    IMAPIProgress *arg4 = (IMAPIProgress *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IDistList_CopyEntries(self,lpEntries,ulUIParam,lpProgress,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_CopyEntries" "', argument " "1"" of type '" "IDistList *""'"); 
    }
    arg1 = reinterpret_cast< IDistList * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_CopyEntries" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDistList_CopyEntries" "', argument " "4"" of type '" "IMAPIProgress *""'"); 
    }
    arg4 = reinterpret_cast< IMAPIProgress * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IDistList_CopyEntries" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->CopyEntries(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IDistList_DeleteEntries) {
  {
    IDistList *arg1 = (IDistList *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IDistList_DeleteEntries(self,lpEntries,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_DeleteEntries" "', argument " "1"" of type '" "IDistList *""'"); 
    }
    arg1 = reinterpret_cast< IDistList * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_DeleteEntries" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->DeleteEntries(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IDistList_ResolveNames) {
  {
    IDistList *arg1 = (IDistList *) 0 ;
    LPSPropTagArray arg2 ;
    ULONG arg3 ;
    LPADRLIST arg4 ;
    LPFlagList arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    arg4 = NULL;
    arg5 = NULL;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IDistList_ResolveNames(self,lpPropTagArray,ulFlags,INOUT,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IDistList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDistList_ResolveNames" "', argument " "1"" of type '" "IDistList *""'"); 
    }
    arg1 = reinterpret_cast< IDistList * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDistList_ResolveNames" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      if(!SvOK(ST(3))) {
        arg4 = NULL;
      } else {
        arg4 = AV_to_LPADRLIST((AV *)SvRV(ST(3)));
      }
    }
    {
      if(!SvOK(ST(4))) {
        arg5 = NULL;
      } else {
        arg5 = AV_to_LPFlagList((AV *)SvRV(ST(4)));
      }
    }
    result = (arg1)->ResolveNames(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      FreeProws((LPSRowSet)arg4);
    }
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      FreeProws((LPSRowSet)arg4);
    }
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IDistList) {
  {
    IDistList *arg1 = (IDistList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IDistList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IDistList, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDistList" "', argument " "1"" of type '" "IDistList *""'"); 
    }
    arg1 = reinterpret_cast< IDistList * >(argp1);
    delete_IDistList(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIStatus_ValidateState) {
  {
    IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIStatus_ValidateState(self,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_ValidateState" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_ValidateState" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_ValidateState" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->ValidateState(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIStatus_SettingsDialog) {
  {
    IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPIStatus_SettingsDialog(self,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_SettingsDialog" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SettingsDialog(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIStatus_ChangePassword) {
  {
    IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIStatus_ChangePassword(self,lpOldPass,lpNewPass,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_ChangePassword" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIStatus_ChangePassword" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->ChangePassword(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIStatus_FlushQueues) {
  {
    IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPIStatus_FlushQueues(self,ulUIParam,cbTargetTransport,lpTargetTransport,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIStatus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIStatus_FlushQueues" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIStatus_FlushQueues" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIStatus_FlushQueues" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    {
      res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_LPENTRYID,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPIStatus_FlushQueues" "', argument " "4"" of type '" "LPENTRYID""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPIStatus_FlushQueues" "', argument " "4"" of type '" "LPENTRYID""'");
      } else {
        arg4 = *(reinterpret_cast< LPENTRYID * >(argp4));
      }
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPIStatus_FlushQueues" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->FlushQueues(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIStatus) {
  {
    IMAPIStatus *arg1 = (IMAPIStatus *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIStatus(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIStatus, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIStatus" "', argument " "1"" of type '" "IMAPIStatus *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIStatus * >(argp1);
    delete_IMAPIStatus(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_GetLastError) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetLastError" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_Advise) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    IMAPIAdviseSink *arg3 = (IMAPIAdviseSink *) 0 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_Advise(self,ulEventMask,lpAdviseSink);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Advise" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_Advise" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_IMAPIAdviseSink, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPITable_Advise" "', argument " "3"" of type '" "IMAPIAdviseSink *""'"); 
    }
    arg3 = reinterpret_cast< IMAPIAdviseSink * >(argp3);
    result = (arg1)->Advise(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_Unadvise) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPITable_Unadvise(self,ulConnection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Unadvise" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_Unadvise" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->Unadvise(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_GetStatus) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    ULONG *arg3 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPITable_GetStatus(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetStatus" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    result = (arg1)->GetStatus(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_SetColumns) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LPSPropTagArray arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_SetColumns(self,lpPropTagArray,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SetColumns" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPSPropTagArray((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SetColumns" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SetColumns(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_QueryColumns) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    LPSPropTagArray *arg3 = (LPSPropTagArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    LPSPropTagArray temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPITable_QueryColumns(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryColumns" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_QueryColumns" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->QueryColumns(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropTagArray(*(arg3)))); argvi++  ;
    }
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_GetRowCount) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    ULONG *arg3 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPITable_GetRowCount(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetRowCount" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetRowCount" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetRowCount(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_SeekRow) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    BOOKMARK arg2 ;
    LONG arg3 ;
    LONG *arg4 = (LONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    LONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_SeekRow(self,bkOrigin,lRowCount);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SeekRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SeekRow" "', argument " "2"" of type '" "BOOKMARK""'");
    } 
    arg2 = static_cast< BOOKMARK >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SeekRow" "', argument " "3"" of type '" "LONG""'");
    } 
    arg3 = static_cast< LONG >(val3);
    result = (arg1)->SeekRow(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_LONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_SeekRowApprox) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_SeekRowApprox(self,ulNumerator,ulDenominator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SeekRowApprox" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SeekRowApprox" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SeekRowApprox" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    result = (arg1)->SeekRowApprox(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_QueryPosition) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    ULONG *arg3 = (ULONG *) 0 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPITable_QueryPosition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryPosition" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    result = (arg1)->QueryPosition(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_FindRow) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LPSRestriction arg2 ;
    BOOKMARK arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPITable_FindRow(self,lpRestriction,bkOrigin,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_FindRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPSRestriction((HV *)SvRV(ST(1)));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_FindRow" "', argument " "3"" of type '" "BOOKMARK""'");
    } 
    arg3 = static_cast< BOOKMARK >(val3);
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_FindRow" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->FindRow(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_Restrict) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LPSRestriction arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_Restrict(self,lpRestriction,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Restrict" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPSRestriction((HV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_Restrict" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->Restrict(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_CreateBookmark) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    BOOKMARK *arg2 = (BOOKMARK *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    BOOKMARK temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPITable_CreateBookmark(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_CreateBookmark" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    result = (arg1)->CreateBookmark(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_FreeBookmark) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    BOOKMARK arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPITable_FreeBookmark(self,bkPosition);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_FreeBookmark" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_FreeBookmark" "', argument " "2"" of type '" "BOOKMARK""'");
    } 
    arg2 = static_cast< BOOKMARK >(val2);
    result = (arg1)->FreeBookmark(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_SortTable) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LPSSortOrderSet arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_SortTable(self,lpSortCriteria,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SortTable" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = HV_to_LPSSortOrderSet((HV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SortTable" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SortTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_QuerySortOrder) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LPSSortOrderSet *arg2 = (LPSSortOrderSet *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    LPSSortOrderSet temp2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    temp2 = NULL; arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPITable_QuerySortOrder(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QuerySortOrder" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    result = (arg1)->QuerySortOrder(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPSSortOrderSet(*(arg2)))); argvi++  ;
    }
    
    {
      if(*arg2)
      MAPIFreeBuffer(*arg2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg2)
      MAPIFreeBuffer(*arg2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_QueryRows) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    LONG arg2 ;
    ULONG arg3 ;
    LPSRowSet *arg4 = (LPSRowSet *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPSRowSet temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_QueryRows(self,lRowCount,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_QueryRows" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_QueryRows" "', argument " "2"" of type '" "LONG""'");
    } 
    arg2 = static_cast< LONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_QueryRows" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->QueryRows(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSRowSet(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      FreeProws((LPSRowSet)*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      FreeProws((LPSRowSet)*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_Abort) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPITable_Abort(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_Abort" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    result = (arg1)->Abort();
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_ExpandRow) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    BYTE *arg3 = (BYTE *) 0 ;
    ULONG arg4 ;
    ULONG arg5 ;
    LPSRowSet *arg6 = (LPSRowSet *) 0 ;
    ULONG *arg7 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    LPSRowSet temp6 ;
    ULONG temp7 ;
    int res7 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp6 = NULL; arg6 = &temp6;
    arg7 = &temp7;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPITable_ExpandRow(self,cbInstanceKey,pbInstanceKey,ulRowCount,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_ExpandRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPITable_ExpandRow" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< BYTE * >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_ExpandRow" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPITable_ExpandRow" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->ExpandRow(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSRowSet(*(arg6)))); argvi++  ;
    }
    if (SWIG_IsTmpObj(res7)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg7)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    {
      FreeProws((LPSRowSet)*arg6);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    {
      FreeProws((LPSRowSet)*arg6);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_CollapseRow) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    BYTE *arg3 = (BYTE *) 0 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_CollapseRow(self,cbInstanceKey,pbInstanceKey,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_CollapseRow" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPITable_CollapseRow" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< BYTE * >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPITable_CollapseRow" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->CollapseRow(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_WaitForCompletion) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPITable_WaitForCompletion(self,ulFlags,ulTimeout);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_WaitForCompletion" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_WaitForCompletion" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_WaitForCompletion" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    result = (arg1)->WaitForCompletion(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_GetCollapseState) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPBYTE arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPBYTE *arg6 = (LPBYTE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 ;
    int res4 = 0 ;
    ULONG temp5 ;
    int res5 = SWIG_TMPOBJ ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = &temp5;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPITable_GetCollapseState(self,ulFlags,cbInstanceKey,lpbInstanceKey,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_GetCollapseState" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_GetCollapseState" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_GetCollapseState" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    {
      res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_LPBYTE,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPITable_GetCollapseState" "', argument " "4"" of type '" "LPBYTE""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPITable_GetCollapseState" "', argument " "4"" of type '" "LPBYTE""'");
      } else {
        arg4 = *(reinterpret_cast< LPBYTE * >(argp4));
      }
    }
    res6 = SWIG_ConvertPtr(ST(4), &argp6,SWIGTYPE_p_LPBYTE, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMAPITable_GetCollapseState" "', argument " "6"" of type '" "LPBYTE *""'"); 
    }
    arg6 = reinterpret_cast< LPBYTE * >(argp6);
    result = (arg1)->GetCollapseState(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPITable_SetCollapseState) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPBYTE arg4 ;
    BOOKMARK *arg5 = (BOOKMARK *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 ;
    int res4 = 0 ;
    BOOKMARK temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPITable_SetCollapseState(self,ulFlags,cbCollapseState,pbCollapseState);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPITable_SetCollapseState" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPITable_SetCollapseState" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPITable_SetCollapseState" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    {
      res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_LPBYTE,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPITable_SetCollapseState" "', argument " "4"" of type '" "LPBYTE""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPITable_SetCollapseState" "', argument " "4"" of type '" "LPBYTE""'");
      } else {
        arg4 = *(reinterpret_cast< LPBYTE * >(argp4));
      }
    }
    result = (arg1)->SetCollapseState(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPITable) {
  {
    IMAPITable *arg1 = (IMAPITable *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPITable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPITable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPITable" "', argument " "1"" of type '" "IMAPITable *""'"); 
    }
    arg1 = reinterpret_cast< IMAPITable * >(argp1);
    delete_IMAPITable(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IProfSect) {
  {
    IProfSect *arg1 = (IProfSect *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IProfSect(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfSect, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProfSect" "', argument " "1"" of type '" "IProfSect *""'"); 
    }
    arg1 = reinterpret_cast< IProfSect * >(argp1);
    delete_IProfSect(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProgress_Progress) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPIProgress_Progress(self,ulValue,ulCount,ulTotal);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_Progress" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPIProgress_Progress" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPIProgress_Progress" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPIProgress_Progress" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    result = (arg1)->Progress(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProgress_GetFlags) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPIProgress_GetFlags(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetFlags" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    result = (arg1)->GetFlags(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProgress_GetMax) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPIProgress_GetMax(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetMax" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    result = (arg1)->GetMax(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProgress_GetMin) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPIProgress_GetMin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_GetMin" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    result = (arg1)->GetMin(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPIProgress_SetLimits) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    ULONG *arg3 = (ULONG *) 0 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPIProgress_SetLimits(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPIProgress_SetLimits" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    result = (arg1)->SetLimits(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPIProgress) {
  {
    IMAPIProgress *arg1 = (IMAPIProgress *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPIProgress(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPIProgress, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPIProgress" "', argument " "1"" of type '" "IMAPIProgress *""'"); 
    }
    arg1 = reinterpret_cast< IMAPIProgress * >(argp1);
    delete_IMAPIProgress(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProviderAdmin_GetLastError) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IProviderAdmin_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_GetLastError" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProviderAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProviderAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IProviderAdmin_GetProviderTable) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    ULONG arg2 ;
    LPMAPITABLE *arg3 = (LPMAPITABLE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IProviderAdmin_GetProviderTable(self,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_LPMAPITABLE, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IProviderAdmin_GetProviderTable" "', argument " "3"" of type '" "LPMAPITABLE *""'"); 
    }
    arg3 = reinterpret_cast< LPMAPITABLE * >(argp3);
    result = (arg1)->GetProviderTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProviderAdmin_CreateProvider) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    LPSPropValue arg4 ;
    ULONG arg5 ;
    ULONG arg6 ;
    LPMAPIUID arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    MAPIUID tmpUid7 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg3 = 0;
      arg4 = NULL;
    }
    ULONG ulFlags = 0;
    {
      arg7 = &tmpUid7;
    }
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IProviderAdmin_CreateProvider(self,lpszProvider,cValues,lpProps,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_CreateProvider" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      STRLEN len;
      if(!SvOK(ST(2))) {
        arg4 = NULL;
        arg3 = 0;
      } else {
        arg4 = AV_to_LPSPropValue((AV *)SvRV(ST(2)), &len);
        arg3 = len;
      }
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProviderAdmin_CreateProvider" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProviderAdmin_CreateProvider" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->CreateProvider(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)arg7,sizeof(MAPIUID)); argvi++  ;
    }
    
    {
      
    }
    {
      if(arg4)
      MAPIFreeBuffer((void *)arg4);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      if(arg4)
      MAPIFreeBuffer((void *)arg4);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProviderAdmin_DeleteProvider) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    LPMAPIUID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IProviderAdmin_DeleteProvider(self,lpUID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_DeleteProvider" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProviderAdmin_DeleteProvider" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    result = (arg1)->DeleteProvider(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_IProviderAdmin_OpenProfileSection) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    LPMAPIUID arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    IProfSect **arg5 = (IProfSect **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    IProfSect *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IProviderAdmin_OpenProfileSection(self,lpUID,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProviderAdmin_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IProviderAdmin) {
  {
    IProviderAdmin *arg1 = (IProviderAdmin *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IProviderAdmin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProviderAdmin, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProviderAdmin" "', argument " "1"" of type '" "IProviderAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProviderAdmin * >(argp1);
    delete_IProviderAdmin(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIINIT_0_ulVersion_set) {
  {
    MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MAPIINIT_0_ulVersion_set(self,ulVersion);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulVersion_set" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAPIINIT_0_ulVersion_set" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    if (arg1) (arg1)->ulVersion = arg2;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIINIT_0_ulVersion_get) {
  {
    MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ULONG result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MAPIINIT_0_ulVersion_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulVersion_get" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
    result =  ((arg1)->ulVersion);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIINIT_0_ulFlags_set) {
  {
    MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MAPIINIT_0_ulFlags_set(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulFlags_set" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAPIINIT_0_ulFlags_set" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    if (arg1) (arg1)->ulFlags = arg2;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIINIT_0_ulFlags_get) {
  {
    MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ULONG result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MAPIINIT_0_ulFlags_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIINIT_0_ulFlags_get" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
    result =  ((arg1)->ulFlags);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MAPIINIT_0) {
  {
    int argvi = 0;
    MAPIINIT_0 *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_MAPIINIT_0();");
    }
    result = (MAPIINIT_0 *)new MAPIINIT_0();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MAPIINIT_0, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_MAPIINIT_0) {
  {
    MAPIINIT_0 *arg1 = (MAPIINIT_0 *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_MAPIINIT_0(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAPIINIT_0" "', argument " "1"" of type '" "MAPIINIT_0 *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT_0 * >(argp1);
    delete arg1;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIInitialize) {
  {
    MAPIINIT *arg1 = (MAPIINIT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MAPIInitialize(lpMapiInit);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPIINIT_0, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPIInitialize" "', argument " "1"" of type '" "MAPIINIT *""'"); 
    }
    arg1 = reinterpret_cast< MAPIINIT * >(argp1);
    result = MAPIInitialize(arg1);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIUninitialize) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: MAPIUninitialize();");
    }
    MAPIUninitialize();
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_MAPILogonEx) {
  {
    ULONG arg1 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    IMAPISession **arg5 = (IMAPISession **) 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    IMAPISession *temp5 ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: MAPILogonEx(ulUIParam,lpszProfileName,lpszPassword,ulFlags);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAPILogonEx" "', argument " "1"" of type '" "ULONG""'");
    } 
    arg1 = static_cast< ULONG >(val1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MAPILogonEx" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = MAPILogonEx(arg1,arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IMAPISession, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      
    }
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPIAdminProfiles) {
  {
    ULONG arg1 ;
    IProfAdmin **arg2 = (IProfAdmin **) 0 ;
    unsigned int fl1 ;
    int ecode1 ;
    IProfAdmin *temp2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp2 = NULL; arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MAPIAdminProfiles(ulFlags);");
    }
    {
      ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &fl1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAPIAdminProfiles" "', argument " "1"" of type '" "ULONG""'");
      } 
      arg1 = fl1;
      ulFlags = fl1;
    }
    result = MAPIAdminProfiles(arg1,arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg2), SWIGTYPE_p_IProfAdmin, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_GetLastError) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    MAPIERROR **arg4 = (MAPIERROR **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_GetLastError(self,hResult,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetLastError" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_p_MAPIERROR, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_GetLastError" "', argument " "4"" of type '" "MAPIERROR **""'"); 
    }
    arg4 = reinterpret_cast< MAPIERROR ** >(argp4);
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_GetMsgStoresTable) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPISession_GetMsgStoresTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetMsgStoresTable" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetMsgStoresTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetMsgStoresTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_OpenMsgStore) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    LPCIID arg5 ;
    ULONG arg6 ;
    IMsgStore **arg7 = (IMsgStore **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    unsigned int fl6 ;
    int ecode6 ;
    IMsgStore *temp7 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp7 = NULL; arg7 = &temp7;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPISession_OpenMsgStore(self,ulUIParam,cbEntryID,lpEntryID,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenMsgStore" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_OpenMsgStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenMsgStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(3), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_OpenMsgStore" "', argument " "5"" of type '" "LPCIID""'");
      }
      arg5 = reinterpret_cast< LPCIID >(buf5);
    }
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_OpenMsgStore" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    result = (arg1)->OpenMsgStore(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMsgStore, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_OpenAddressBook) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    IAddrBook **arg5 = (IAddrBook **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    IAddrBook *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_OpenAddressBook(self,ulUIParam,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenAddressBook" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_OpenAddressBook" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenAddressBook" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_OpenAddressBook" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->OpenAddressBook(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IAddrBook, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_OpenProfileSection) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    LPMAPIUID arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    IProfSect **arg5 = (IProfSect **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    IProfSect *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_OpenProfileSection(self,lpUID,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenProfileSection" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_GetStatusTable) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPISession_GetStatusTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_GetStatusTable" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_GetStatusTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetStatusTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_OpenEntry) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPCIID arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    IUnknown **arg7 = (IUnknown **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    unsigned int fl5 ;
    int ecode5 ;
    ULONG ulType6 ;
    IUnknown *lpUnk6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      ulType6 = NULL;
      lpUnk6 = NULL;
      
      arg6 = &ulType6;
      arg7 = &lpUnk6;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_OpenEntry(self,cbEntryID,lpEntryID,lpInterface,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_OpenEntry" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMAPISession_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      switch(*(arg6)) {
      case MAPI_FOLDER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MESSAGE:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MAILUSER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_DISTLIST:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_ABCONT:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      default:
        break;
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_CompareEntryIDs) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    ULONG *arg7 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    ULONG temp7 ;
    int res7 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg7 = &temp7;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_CompareEntryIDs(self,cbEntryID1,lpEntryID1,cbEntryID2,lpEntryID2,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res7)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg7)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_Advise) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPMAPIADVISESINK arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 ;
    int res5 = 0 ;
    ULONG temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg6 = &temp6;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_Advise(self,cbEntryID,lpEntryID,ulEventMask,lpAdviseSink);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Advise" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_Advise" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_Advise" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      res5 = SWIG_ConvertPtr(ST(3), &argp5, SWIGTYPE_p_LPMAPIADVISESINK,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'");
      } else {
        arg5 = *(reinterpret_cast< LPMAPIADVISESINK * >(argp5));
      }
    }
    result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_Unadvise) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPISession_Unadvise(self,ulConnection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Unadvise" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_Unadvise" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->Unadvise(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_MessageOptions) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPTSTR arg4 ;
    LPMESSAGE arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    void *argp5 ;
    int res5 = 0 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMAPISession_MessageOptions(self,ulUIParam,ulFlags,lpszAdrType,lpMessage);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_MessageOptions" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_MessageOptions" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_MessageOptions" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      res5 = SWIG_ConvertPtr(ST(4), &argp5, SWIGTYPE_p_LPMESSAGE,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_MessageOptions" "', argument " "5"" of type '" "LPMESSAGE""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_MessageOptions" "', argument " "5"" of type '" "LPMESSAGE""'");
      } else {
        arg5 = *(reinterpret_cast< LPMESSAGE * >(argp5));
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->MessageOptions(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    {
      
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_QueryDefaultMessageOpt) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPSPropValue *arg5 = (LPSPropValue *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg4 = &temp4;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_QueryDefaultMessageOpt(self,lpszAdrType,ulFlags,lppOptions);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_LPSPropValue, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_QueryDefaultMessageOpt" "', argument " "5"" of type '" "LPSPropValue *""'"); 
    }
    arg5 = reinterpret_cast< LPSPropValue * >(argp5);
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->QueryDefaultMessageOpt(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_EnumAdrTypes) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    ULONG *arg3 = (ULONG *) 0 ;
    LPTSTR **arg4 = (LPTSTR **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = &temp3;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPISession_EnumAdrTypes(self,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_p_LPTSTR, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_EnumAdrTypes" "', argument " "4"" of type '" "LPTSTR **""'"); 
    }
    arg4 = reinterpret_cast< LPTSTR ** >(argp4);
    result = (arg1)->EnumAdrTypes(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_QueryIdentity) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPENTRYID *arg3 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG cbEntryID2 = 0 ;
    LPENTRYID lpEntryID2 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = &cbEntryID2; arg3 = &lpEntryID2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IMAPISession_QueryIdentity(self,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_QueryIdentity" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    result = (arg1)->QueryIdentity(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg3) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2); argvi++  ;
      }
    }
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_Logoff) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMAPISession_Logoff(self,ulUIParam,ulFlags,ulReserved);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_Logoff" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_Logoff" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMAPISession_Logoff" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMAPISession_Logoff" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    result = (arg1)->Logoff(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_SetDefaultStore) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPISession_SetDefaultStore(self,ulFlags,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_SetDefaultStore" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_SetDefaultStore" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_SetDefaultStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    result = (arg1)->SetDefaultStore(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_AdminServices) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    IMsgServiceAdmin **arg3 = (IMsgServiceAdmin **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMsgServiceAdmin *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMAPISession_AdminServices(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_AdminServices" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_AdminServices" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->AdminServices(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMsgServiceAdmin, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_ShowForm) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    ULONG arg2 ;
    LPMDB arg3 ;
    LPMAPIFOLDER arg4 ;
    LPCIID arg5 ;
    ULONG arg6 ;
    LPMESSAGE arg7 ;
    ULONG arg8 ;
    ULONG arg9 ;
    ULONG arg10 ;
    ULONG arg11 ;
    LPSTR arg12 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    void *argp4 ;
    int res4 = 0 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    void *argp7 ;
    int res7 = 0 ;
    unsigned int fl8 ;
    int ecode8 ;
    unsigned int val9 ;
    int ecode9 = 0 ;
    unsigned int val10 ;
    int ecode10 = 0 ;
    unsigned int val11 ;
    int ecode11 = 0 ;
    void *argp12 ;
    int res12 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 12) || (items > 12)) {
      SWIG_croak("Usage: IMAPISession_ShowForm(self,ulUIParam,lpMsgStore,lpParentFolder,lpInterface,ulMessageToken,lpMessageSent,ulFlags,ulMessageStatus,ulMessageFlags,ulAccess,lpszMessageClass);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_ShowForm" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMAPISession_ShowForm" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_LPMDB,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_ShowForm" "', argument " "3"" of type '" "LPMDB""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "3"" of type '" "LPMDB""'");
      } else {
        arg3 = *(reinterpret_cast< LPMDB * >(argp3));
      }
    }
    {
      res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_LPMAPIFOLDER,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMAPISession_ShowForm" "', argument " "4"" of type '" "LPMAPIFOLDER""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "4"" of type '" "LPMAPIFOLDER""'");
      } else {
        arg4 = *(reinterpret_cast< LPMAPIFOLDER * >(argp4));
      }
    }
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMAPISession_ShowForm" "', argument " "5"" of type '" "LPCIID""'");
      }
      arg5 = reinterpret_cast< LPCIID >(buf5);
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IMAPISession_ShowForm" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = static_cast< ULONG >(val6);
    {
      res7 = SWIG_ConvertPtr(ST(6), &argp7, SWIGTYPE_p_LPMESSAGE,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IMAPISession_ShowForm" "', argument " "7"" of type '" "LPMESSAGE""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "7"" of type '" "LPMESSAGE""'");
      } else {
        arg7 = *(reinterpret_cast< LPMESSAGE * >(argp7));
      }
    }
    {
      ecode8 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &fl8);
      if (!SWIG_IsOK(ecode8)) {
        SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IMAPISession_ShowForm" "', argument " "8"" of type '" "ULONG""'");
      } 
      arg8 = fl8;
      ulFlags = fl8;
    }
    ecode9 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IMAPISession_ShowForm" "', argument " "9"" of type '" "ULONG""'");
    } 
    arg9 = static_cast< ULONG >(val9);
    ecode10 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IMAPISession_ShowForm" "', argument " "10"" of type '" "ULONG""'");
    } 
    arg10 = static_cast< ULONG >(val10);
    ecode11 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "IMAPISession_ShowForm" "', argument " "11"" of type '" "ULONG""'");
    } 
    arg11 = static_cast< ULONG >(val11);
    {
      res12 = SWIG_ConvertPtr(ST(11), &argp12, SWIGTYPE_p_LPSTR,  0 );
      if (!SWIG_IsOK(res12)) {
        SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "IMAPISession_ShowForm" "', argument " "12"" of type '" "LPSTR""'"); 
      }  
      if (!argp12) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_ShowForm" "', argument " "12"" of type '" "LPSTR""'");
      } else {
        arg12 = *(reinterpret_cast< LPSTR * >(argp12));
      }
    }
    result = (arg1)->ShowForm(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMAPISession_PrepareForm) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    LPCIID arg2 ;
    LPMESSAGE arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    void *argp3 ;
    int res3 = 0 ;
    ULONG temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMAPISession_PrepareForm(self,lpInterface,lpMessage);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMAPISession_PrepareForm" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMAPISession_PrepareForm" "', argument " "2"" of type '" "LPCIID""'");
      }
      arg2 = reinterpret_cast< LPCIID >(buf2);
    }
    {
      res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_LPMESSAGE,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMAPISession_PrepareForm" "', argument " "3"" of type '" "LPMESSAGE""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMAPISession_PrepareForm" "', argument " "3"" of type '" "LPMESSAGE""'");
      } else {
        arg3 = *(reinterpret_cast< LPMESSAGE * >(argp3));
      }
    }
    result = (arg1)->PrepareForm(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMAPISession) {
  {
    IMAPISession *arg1 = (IMAPISession *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMAPISession(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMAPISession, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMAPISession" "', argument " "1"" of type '" "IMAPISession *""'"); 
    }
    arg1 = reinterpret_cast< IMAPISession * >(argp1);
    delete_IMAPISession(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_OpenEntry) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPCIID arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    IUnknown **arg7 = (IUnknown **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    unsigned int fl5 ;
    int ecode5 ;
    ULONG ulType6 ;
    IUnknown *lpUnk6 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      ulType6 = NULL;
      lpUnk6 = NULL;
      
      arg6 = &ulType6;
      arg7 = &lpUnk6;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IAddrBook_OpenEntry(self,cbEntryID,lpEntryID,lpInterface,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_OpenEntry" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_OpenEntry" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_OpenEntry" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IAddrBook_OpenEntry" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->OpenEntry(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      switch(*(arg6)) {
      case MAPI_FOLDER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMAPIFolder, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MESSAGE:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_MAILUSER:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IMailUser, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_DISTLIST:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IDistList, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      case MAPI_ABCONT:
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg7), SWIGTYPE_p_IABContainer, SWIG_SHADOW | SWIG_OWNER); argvi++  ; break;
      default:
        break;
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_CompareEntryIDs) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    ULONG *arg7 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    ULONG temp7 ;
    int res7 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg7 = &temp7;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IAddrBook_CompareEntryIDs(self,cbEntryID1,lpEntryID1,cbEntryID2,lpEntryID2,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IAddrBook_CompareEntryIDs" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    result = (arg1)->CompareEntryIDs(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res7)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg7)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_Advise) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPMAPIADVISESINK arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 ;
    int res5 = 0 ;
    ULONG temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg6 = &temp6;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IAddrBook_Advise(self,cbEntryID,lpEntryID,ulEventMask,lpAdviseSink);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Advise" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_Advise" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IAddrBook_Advise" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      res5 = SWIG_ConvertPtr(ST(3), &argp5, SWIGTYPE_p_LPMAPIADVISESINK,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IAddrBook_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Advise" "', argument " "5"" of type '" "LPMAPIADVISESINK""'");
      } else {
        arg5 = *(reinterpret_cast< LPMAPIADVISESINK * >(argp5));
      }
    }
    result = (arg1)->Advise(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_Unadvise) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IAddrBook_Unadvise(self,ulConnection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Unadvise" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_Unadvise" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->Unadvise(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_CreateOneOff) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    LPTSTR arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    LPENTRYID *arg7 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    ULONG cbEntryID6 = 0 ;
    LPENTRYID lpEntryID6 = NULL ;
    std::string strInput2 ;
    std::string strInput3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg6 = &cbEntryID6; arg7 = &lpEntryID6;
    }
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IAddrBook_CreateOneOff(self,lpszName,lpszAdrType,lpszAddress,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_CreateOneOff" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IAddrBook_CreateOneOff" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->CreateOneOff(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg7) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6); argvi++  ;
      }
    }
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    {
      if(*arg7)
      MAPIFreeBuffer(*arg7);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    {
      if(*arg7)
      MAPIFreeBuffer(*arg7);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_NewEntry) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    LPENTRYID arg7 ;
    ULONG *arg8 = (ULONG *) 0 ;
    LPENTRYID *arg9 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int res6 ;
    char *buf6 = 0 ;
    size_t size6 ;
    int alloc6 = 0 ;
    ULONG cbEntryID8 = 0 ;
    LPENTRYID lpEntryID8 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg8 = &cbEntryID8; arg9 = &lpEntryID8;
    }
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IAddrBook_NewEntry(self,ulUIParam,ulFlags,cbEIDContainer,lpEIDContainer,cbEIDNewEntryTpl,lpEIDNewEntryTpl,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_NewEntry" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_NewEntry" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_NewEntry" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_NewEntry" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    {
      res6 = SWIG_AsCharPtrAndSize(ST(4), &buf6, &size6, &alloc6);
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IAddrBook_NewEntry" "', argument " "6"" of type '" "ULONG""'");
      }
      if(buf6 == NULL) {
        arg6 = 0;
        arg7 = NULL;
      } else {
        arg6 = static_cast< ULONG >(size6 - 1);
        arg7 = reinterpret_cast< LPENTRYID >(buf6);
      }
    }
    result = (arg1)->NewEntry(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg9) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg9,*arg8); argvi++  ;
      }
    }
    
    
    
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    {
      if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
    }
    {
      if(*arg9)
      MAPIFreeBuffer(*arg9);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    {
      if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
    }
    {
      if(*arg9)
      MAPIFreeBuffer(*arg9);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_ResolveName) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPTSTR arg4 ;
    LPADRLIST arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = NULL;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IAddrBook_ResolveName(self,ulUIParam,ulFlags,lpszNewEntryTitle,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_ResolveName" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_ResolveName" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_ResolveName" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      if(!SvOK(ST(4))) {
        arg5 = NULL;
      } else {
        arg5 = AV_to_LPADRLIST((AV *)SvRV(ST(4)));
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->ResolveName(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    {
      
    }
    {
      FreeProws((LPSRowSet)arg5);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      
    }
    {
      FreeProws((LPSRowSet)arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_Address) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPADRPARM arg3 ;
    LPADRLIST *arg4 = (LPADRLIST *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    void *argp3 ;
    int res3 = 0 ;
    LPADRLIST temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IAddrBook_Address(self,lpAdrParms);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Address" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res3 = SWIG_ConvertPtr(ST(1), &argp3, SWIGTYPE_p_LPADRPARM,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_Address" "', argument " "3"" of type '" "LPADRPARM""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Address" "', argument " "3"" of type '" "LPADRPARM""'");
      } else {
        arg3 = *(reinterpret_cast< LPADRPARM * >(argp3));
      }
    }
    result = (arg1)->Address(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPADRLIST(*(arg4)))); argvi++  ;
    }
    
    
    {
      FreeProws((LPSRowSet)*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      FreeProws((LPSRowSet)*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_Details) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPFNDISMISS arg3 ;
    LPVOID arg4 ;
    ULONG arg5 ;
    LPENTRYID arg6 ;
    LPFNBUTTON arg7 ;
    LPVOID arg8 ;
    LPTSTR arg9 ;
    ULONG arg10 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    void *argp3 ;
    int res3 = 0 ;
    void *argp4 ;
    int res4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    size_t size5 ;
    int alloc5 = 0 ;
    void *argp7 ;
    int res7 = 0 ;
    void *argp8 ;
    int res8 = 0 ;
    unsigned int fl10 ;
    int ecode10 ;
    std::string strInput9 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg2 = &temp2;
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: IAddrBook_Details(self,lpfnDismiss,lpvDismissContext,cbEntryID,lpEntryID,lpfButtonCallback,lpvButtonContext,lpszButtonText,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_Details" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res3 = SWIG_ConvertPtr(ST(1), &argp3, SWIGTYPE_p_LPFNDISMISS,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_Details" "', argument " "3"" of type '" "LPFNDISMISS""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "3"" of type '" "LPFNDISMISS""'");
      } else {
        arg3 = *(reinterpret_cast< LPFNDISMISS * >(argp3));
      }
    }
    {
      res4 = SWIG_ConvertPtr(ST(2), &argp4, SWIGTYPE_p_LPVOID,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_Details" "', argument " "4"" of type '" "LPVOID""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "4"" of type '" "LPVOID""'");
      } else {
        arg4 = *(reinterpret_cast< LPVOID * >(argp4));
      }
    }
    {
      res5 = SWIG_AsCharPtrAndSize(ST(3), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IAddrBook_Details" "', argument " "5"" of type '" "ULONG""'");
      }
      if(buf5 == NULL) {
        arg5 = 0;
        arg6 = NULL;
      } else {
        arg5 = static_cast< ULONG >(size5 - 1);
        arg6 = reinterpret_cast< LPENTRYID >(buf5);
      }
    }
    {
      res7 = SWIG_ConvertPtr(ST(4), &argp7, SWIGTYPE_p_LPFNBUTTON,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IAddrBook_Details" "', argument " "7"" of type '" "LPFNBUTTON""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "7"" of type '" "LPFNBUTTON""'");
      } else {
        arg7 = *(reinterpret_cast< LPFNBUTTON * >(argp7));
      }
    }
    {
      res8 = SWIG_ConvertPtr(ST(5), &argp8, SWIGTYPE_p_LPVOID,  0 );
      if (!SWIG_IsOK(res8)) {
        SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IAddrBook_Details" "', argument " "8"" of type '" "LPVOID""'"); 
      }  
      if (!argp8) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_Details" "', argument " "8"" of type '" "LPVOID""'");
      } else {
        arg8 = *(reinterpret_cast< LPVOID * >(argp8));
      }
    }
    {
      arg9 = (LPTSTR)ST(6);
    }
    {
      ecode10 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &fl10);
      if (!SWIG_IsOK(ecode10)) {
        SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IAddrBook_Details" "', argument " "10"" of type '" "ULONG""'");
      } 
      arg10 = fl10;
      ulFlags = fl10;
    }
    {
      SV *entry = (SV*)arg9;
      if (!SvOK(entry))
      arg9 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg9 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput9.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg9 = (LPTSTR)strInput9.c_str();
        }
      }
    }
    result = (arg1)->Details(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    {
      if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    }
    {
      
    }
    
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    }
    {
      
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_RecipOptions) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPADRENTRY arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    void *argp4 ;
    int res4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IAddrBook_RecipOptions(self,ulUIParam,ulFlags,lpRecip);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_RecipOptions" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_RecipOptions" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_RecipOptions" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_LPADRENTRY,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAddrBook_RecipOptions" "', argument " "4"" of type '" "LPADRENTRY""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_RecipOptions" "', argument " "4"" of type '" "LPADRENTRY""'");
      } else {
        arg4 = *(reinterpret_cast< LPADRENTRY * >(argp4));
      }
    }
    result = (arg1)->RecipOptions(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_QueryDefaultRecipOpt) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPSPropValue *arg5 = (LPSPropValue *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG c4 ;
    LPSPropValue lp4 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp4 = NULL; arg5 = &lp4; c4 = 0; arg4 = &c4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IAddrBook_QueryDefaultRecipOpt(self,lpszAdrType,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_QueryDefaultRecipOpt" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAddrBook_QueryDefaultRecipOpt" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->QueryDefaultRecipOpt(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSPropValue(*(arg5),*(arg4)))); argvi++  ;
    }
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_GetPAB) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPENTRYID *arg3 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG cbEntryID2 = 0 ;
    LPENTRYID lpEntryID2 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = &cbEntryID2; arg3 = &lpEntryID2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IAddrBook_GetPAB(self,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetPAB" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    result = (arg1)->GetPAB(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg3) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2); argvi++  ;
      }
    }
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_SetPAB) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IAddrBook_SetPAB(self,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetPAB" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_SetPAB" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->SetPAB(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_GetDefaultDir) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPENTRYID *arg3 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG cbEntryID2 = 0 ;
    LPENTRYID lpEntryID2 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = &cbEntryID2; arg3 = &lpEntryID2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IAddrBook_GetDefaultDir(self,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetDefaultDir" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    result = (arg1)->GetDefaultDir(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg3) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2); argvi++  ;
      }
    }
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_SetDefaultDir) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IAddrBook_SetDefaultDir(self,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetDefaultDir" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAddrBook_SetDefaultDir" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->SetDefaultDir(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_GetSearchPath) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPSRowSet *arg3 = (LPSRowSet *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    LPSRowSet temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IAddrBook_GetSearchPath(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_GetSearchPath" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_GetSearchPath" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetSearchPath(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPSRowSet(*(arg3)))); argvi++  ;
    }
    
    
    {
      FreeProws((LPSRowSet)*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      FreeProws((LPSRowSet)*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_SetSearchPath) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPSRowSet arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IAddrBook_SetSearchPath(self,ulFlags,INPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_SetSearchPath" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_SetSearchPath" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_LPSRowSet,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAddrBook_SetSearchPath" "', argument " "3"" of type '" "LPSRowSet""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAddrBook_SetSearchPath" "', argument " "3"" of type '" "LPSRowSet""'");
      } else {
        arg3 = *(reinterpret_cast< LPSRowSet * >(argp3));
      }
    }
    result = (arg1)->SetSearchPath(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      FreeProws((LPSRowSet)arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      FreeProws((LPSRowSet)arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IAddrBook_PrepareRecips) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    ULONG arg2 ;
    LPSPropTagArray arg3 ;
    LPADRLIST arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    arg4 = NULL;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IAddrBook_PrepareRecips(self,ulFlags,lpPropTagArray,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAddrBook_PrepareRecips" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAddrBook_PrepareRecips" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPSPropTagArray((AV *)SvRV(ST(2)));
      }
    }
    {
      if(!SvOK(ST(3))) {
        arg4 = NULL;
      } else {
        arg4 = AV_to_LPADRLIST((AV *)SvRV(ST(3)));
      }
    }
    result = (arg1)->PrepareRecips(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    {
      FreeProws((LPSRowSet)arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    {
      FreeProws((LPSRowSet)arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IAddrBook) {
  {
    IAddrBook *arg1 = (IAddrBook *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IAddrBook(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IAddrBook, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IAddrBook" "', argument " "1"" of type '" "IAddrBook *""'"); 
    }
    arg1 = reinterpret_cast< IAddrBook * >(argp1);
    delete_IAddrBook(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_GetLastError) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IProfAdmin_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_GetLastError" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProfAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_GetProfileTable) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IProfAdmin_GetProfileTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_GetProfileTable" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProfAdmin_GetProfileTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetProfileTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_CreateProfile) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IProfAdmin_CreateProfile(self,lpszProfileName,lpszPassword,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_CreateProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProfAdmin_CreateProfile" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_CreateProfile" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->CreateProfile(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_DeleteProfile) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IProfAdmin_DeleteProfile(self,lpszProfileName,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_DeleteProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_DeleteProfile" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->DeleteProfile(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_ChangeProfilePassword) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    LPTSTR arg4 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    std::string strInput2 ;
    std::string strInput3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IProfAdmin_ChangeProfilePassword(self,lpszProfileName,lpszOldPassword,lpszNewPassword,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_ChangeProfilePassword" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->ChangeProfilePassword(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_CopyProfile) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    LPTSTR arg4 ;
    ULONG arg5 ;
    ULONG arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    std::string strInput2 ;
    std::string strInput3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: IProfAdmin_CopyProfile(self,lpszOldProfileName,lpszOldPassword,lpszNewProfileName,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_CopyProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_CopyProfile" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProfAdmin_CopyProfile" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->CopyProfile(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_RenameProfile) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    LPTSTR arg4 ;
    ULONG arg5 ;
    ULONG arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int fl6 ;
    int ecode6 ;
    std::string strInput2 ;
    std::string strInput3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: IProfAdmin_RenameProfile(self,lpszOldProfileName,lpszOldPassword,lpszNewProfileName,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_RenameProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_RenameProfile" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    {
      ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &fl6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IProfAdmin_RenameProfile" "', argument " "6"" of type '" "ULONG""'");
      } 
      arg6 = fl6;
      ulFlags = fl6;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->RenameProfile(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_SetDefaultProfile) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IProfAdmin_SetDefaultProfile(self,lpszProfileName,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_SetDefaultProfile" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IProfAdmin_SetDefaultProfile" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->SetDefaultProfile(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IProfAdmin_AdminServices) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    IMsgServiceAdmin **arg6 = (IMsgServiceAdmin **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    IMsgServiceAdmin *temp6 ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp6 = NULL; arg6 = &temp6;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IProfAdmin_AdminServices(self,lpszProfileName,lpszPassword,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProfAdmin_AdminServices" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IProfAdmin_AdminServices" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IProfAdmin_AdminServices" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->AdminServices(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg6), SWIGTYPE_p_IMsgServiceAdmin, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      
    }
    {
      
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IProfAdmin) {
  {
    IProfAdmin *arg1 = (IProfAdmin *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IProfAdmin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IProfAdmin, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProfAdmin" "', argument " "1"" of type '" "IProfAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IProfAdmin * >(argp1);
    delete_IProfAdmin(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_GetLastError) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgServiceAdmin_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_GetMsgServiceTable) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgServiceAdmin_GetMsgServiceTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetMsgServiceTable" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetMsgServiceTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetMsgServiceTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_CreateMsgService) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMsgServiceAdmin_CreateMsgService(self,lpszService,lpszDisplayName,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IMsgServiceAdmin_CreateMsgService" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->CreateMsgService(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      
    }
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_DeleteMsgService) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgServiceAdmin_DeleteMsgService(self,lpUID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_DeleteMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_DeleteMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    result = (arg1)->DeleteMsgService(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_CopyMsgService) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    LPTSTR arg3 ;
    LPCIID arg4 ;
    LPCIID arg5 ;
    LPVOID arg6 ;
    ULONG arg7 ;
    ULONG arg8 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int res4 ;
    char *buf4 ;
    size_t size4 ;
    int alloc4 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    void *argp6 ;
    int res6 = 0 ;
    unsigned int val7 ;
    int ecode7 = 0 ;
    unsigned int fl8 ;
    int ecode8 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: IMsgServiceAdmin_CopyMsgService(self,lpUID,lpszDisplayName,lpInterfaceToCopy,lpInterfaceDst,lpObjectDst,ulUIParam,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      alloc4 = SWIG_OLDOBJ;
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4) || (size4 != 0 && (size4-1) != sizeof(MAPIUID))) {
        // size4-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "4"" of type '" "LPCIID""'");
      }
      arg4 = reinterpret_cast< LPCIID >(buf4);
    }
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "5"" of type '" "LPCIID""'");
      }
      arg5 = reinterpret_cast< LPCIID >(buf5);
    }
    {
      res6 = SWIG_ConvertPtr(ST(5), &argp6, SWIGTYPE_p_LPVOID,  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "6"" of type '" "LPVOID""'"); 
      }  
      if (!argp6) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "6"" of type '" "LPVOID""'");
      } else {
        arg6 = *(reinterpret_cast< LPVOID * >(argp6));
      }
    }
    ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "7"" of type '" "ULONG""'");
    } 
    arg7 = static_cast< ULONG >(val7);
    {
      ecode8 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &fl8);
      if (!SWIG_IsOK(ecode8)) {
        SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IMsgServiceAdmin_CopyMsgService" "', argument " "8"" of type '" "ULONG""'");
      } 
      arg8 = fl8;
      ulFlags = fl8;
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->CopyMsgService(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_RenameMsgService) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    ULONG arg3 ;
    LPTSTR arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int fl3 ;
    int ecode3 ;
    std::string strInput4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgServiceAdmin_RenameMsgService(self,lpUID,ulFlags,lpszDisplayName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_RenameMsgService" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      arg4 = (LPTSTR)ST(3);
    }
    {
      SV *entry = (SV*)arg4;
      if (!SvOK(entry))
      arg4 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg4 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput4.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg4 = (LPTSTR)strInput4.c_str();
        }
      }
    }
    result = (arg1)->RenameMsgService(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    {
      
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    {
      
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_ConfigureMsgService) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    ULONG arg3 ;
    ULONG arg4 ;
    ULONG arg5 ;
    LPSPropValue arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg5 = 0;
      arg6 = NULL;
    }
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IMsgServiceAdmin_ConfigureMsgService(self,lpUID,ulUIParam,ulFlags,cValues,lpProps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_ConfigureMsgService" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      STRLEN len;
      if(!SvOK(ST(4))) {
        arg6 = NULL;
        arg5 = 0;
      } else {
        arg6 = AV_to_LPSPropValue((AV *)SvRV(ST(4)), &len);
        arg5 = len;
      }
    }
    result = (arg1)->ConfigureMsgService(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    {
      if(arg6)
      MAPIFreeBuffer((void *)arg6);
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    {
      if(arg6)
      MAPIFreeBuffer((void *)arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_OpenProfileSection) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    LPCIID arg3 ;
    ULONG arg4 ;
    IProfSect **arg5 = (IProfSect **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    IProfSect *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgServiceAdmin_OpenProfileSection(self,lpUID,lpInterface,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "3"" of type '" "LPCIID""'");
      }
      arg3 = reinterpret_cast< LPCIID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_OpenProfileSection" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->OpenProfileSection(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IProfSect, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_MsgServiceTransportOrder) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPMAPIUID arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 ;
    size_t size3 ;
    int alloc3 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IMsgServiceAdmin_MsgServiceTransportOrder(self,cUID,lpUIDList,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      alloc3 = SWIG_OLDOBJ;
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3) || (size3 != 0 && (size3-1) != sizeof(MAPIUID))) {
        // size3-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "3"" of type '" "LPMAPIUID""'");
      }
      arg3 = reinterpret_cast< LPMAPIUID >(buf3);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMsgServiceAdmin_MsgServiceTransportOrder" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->MsgServiceTransportOrder(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_AdminProviders) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    ULONG arg3 ;
    IProviderAdmin **arg4 = (IProviderAdmin **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int fl3 ;
    int ecode3 ;
    IProviderAdmin *temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgServiceAdmin_AdminProviders(self,lpUID,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_AdminProviders" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->AdminProviders(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IProviderAdmin, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_SetPrimaryIdentity) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    LPMAPIUID arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IMsgServiceAdmin_SetPrimaryIdentity(self,lpUID,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "2"" of type '" "LPMAPIUID""'");
      }
      arg2 = reinterpret_cast< LPMAPIUID >(buf2);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMsgServiceAdmin_SetPrimaryIdentity" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SetPrimaryIdentity(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_IMsgServiceAdmin_GetProviderTable) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IMsgServiceAdmin_GetProviderTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMsgServiceAdmin_GetProviderTable" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMsgServiceAdmin_GetProviderTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetProviderTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IMsgServiceAdmin) {
  {
    IMsgServiceAdmin *arg1 = (IMsgServiceAdmin *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IMsgServiceAdmin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IMsgServiceAdmin, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMsgServiceAdmin" "', argument " "1"" of type '" "IMsgServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IMsgServiceAdmin * >(argp1);
    delete_IMsgServiceAdmin(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MAPINotifSink_GetNotifications) {
  {
    MAPINotifSink *arg1 = (MAPINotifSink *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPNOTIFICATION *arg3 = (LPNOTIFICATION *) 0 ;
    BOOL arg4 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG c2 ;
    LPNOTIFICATION lp2 ;
    bool val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    lp2 = NULL; arg3 = &lp2; c2 = 0; arg2 = &c2;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: MAPINotifSink_GetNotifications(self,OUTPUT,fNonBlock,timeout_msec);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPINotifSink, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAPINotifSink_GetNotifications" "', argument " "1"" of type '" "MAPINotifSink *""'"); 
    }
    arg1 = reinterpret_cast< MAPINotifSink * >(argp1);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MAPINotifSink_GetNotifications" "', argument " "4"" of type '" "BOOL""'");
    } 
    arg4 = static_cast< BOOL >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MAPINotifSink_GetNotifications" "', argument " "5"" of type '" "ULONG""'");
    } 
    arg5 = static_cast< ULONG >(val5);
    result = (arg1)->GetNotifications(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPNOTIFICATION(*(arg3),*(arg2)))); argvi++  ;
    }
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MAPINotifSink) {
  {
    int argvi = 0;
    MAPINotifSink *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_MAPINotifSink();");
    }
    result = (MAPINotifSink *)new_MAPINotifSink();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MAPINotifSink, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_MAPINotifSink) {
  {
    MAPINotifSink *arg1 = (MAPINotifSink *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_MAPINotifSink(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_MAPINotifSink, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAPINotifSink" "', argument " "1"" of type '" "MAPINotifSink *""'"); 
    }
    arg1 = reinterpret_cast< MAPINotifSink * >(argp1);
    delete_MAPINotifSink(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_WrapStoreEntryID) {
  {
    ULONG arg1 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPENTRYID *arg6 = (LPENTRYID *) 0 ;
    unsigned int fl1 ;
    int ecode1 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    ULONG cbEntryID5 = 0 ;
    LPENTRYID lpEntryID5 = NULL ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg5 = &cbEntryID5; arg6 = &lpEntryID5;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: WrapStoreEntryID(ulFlags,lpszDLLName,cbOrigEntry,lpOrigEntry,OUTPUT);");
    }
    {
      ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &fl1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WrapStoreEntryID" "', argument " "1"" of type '" "ULONG""'");
      } 
      arg1 = fl1;
      ulFlags = fl1;
    }
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WrapStoreEntryID" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = WrapStoreEntryID(arg1,arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg6) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5); argvi++  ;
      }
    }
    
    {
      
    }
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_WrapCompressedRTFStream) {
  {
    IStream *arg1 = (IStream *) 0 ;
    ULONG arg2 ;
    IStream **arg3 = (IStream **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IStream *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: WrapCompressedRTFStream(lpCompressedRTFStream,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WrapCompressedRTFStream" "', argument " "1"" of type '" "IStream *""'"); 
    }
    arg1 = reinterpret_cast< IStream * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WrapCompressedRTFStream" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = WrapCompressedRTFStream(arg1,arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_GetLastError) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportContentsChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_Config) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_Config(self,lpStream,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportContentsChanges_Config" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->Config(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_UpdateState) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_UpdateState(self,lpStream);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_UpdateState" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportContentsChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    result = (arg1)->UpdateState(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_ImportMessageChange) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    ULONG arg2 ;
    LPSPropValue arg3 ;
    ULONG arg4 ;
    IMessage **arg5 = (IMessage **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    IMessage *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_ImportMessageChange(self,cValues,lpProps,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageChange" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_LPSPropValue((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeImportContentsChanges_ImportMessageChange" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->ImportMessageChange(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IMessage, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_ImportMessageDeletion) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    ULONG arg2 ;
    LPENTRYLIST arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_ImportMessageDeletion(self,ulFlags,lpSourceEntryList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageDeletion" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_ImportMessageDeletion" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPENTRYLIST((AV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->ImportMessageDeletion(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_ImportPerUserReadStateChange) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    ULONG arg2 ;
    LPREADSTATE arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_ImportPerUserReadStateChange(self,cElements,lpReadState);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportPerUserReadStateChange" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_ImportPerUserReadStateChange" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_LPREADSTATE,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IExchangeImportContentsChanges_ImportPerUserReadStateChange" "', argument " "3"" of type '" "LPREADSTATE""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IExchangeImportContentsChanges_ImportPerUserReadStateChange" "', argument " "3"" of type '" "LPREADSTATE""'");
      } else {
        arg3 = *(reinterpret_cast< LPREADSTATE * >(argp3));
      }
    }
    result = (arg1)->ImportPerUserReadStateChange(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportContentsChanges_ImportMessageMove) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    ULONG arg2 ;
    BYTE *arg3 = (BYTE *) 0 ;
    ULONG arg4 ;
    BYTE *arg5 = (BYTE *) 0 ;
    ULONG arg6 ;
    BYTE *arg7 = (BYTE *) 0 ;
    ULONG arg8 ;
    BYTE *arg9 = (BYTE *) 0 ;
    ULONG arg10 ;
    BYTE *arg11 = (BYTE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    unsigned int val8 ;
    int ecode8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    unsigned int val10 ;
    int ecode10 = 0 ;
    void *argp11 = 0 ;
    int res11 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 11) || (items > 11)) {
      SWIG_croak("Usage: IExchangeImportContentsChanges_ImportMessageMove(self,cbSourceKeySrcFolder,pbSourceKeySrcFolder,cbSourceKeySrcMessage,pbSourceKeySrcMessage,cbPCLMessage,pbPCLMessage,cbSourceKeyDestMessage,pbSourceKeyDestMessage,cbChangeNumDestMessage,pbChangeNumDestMessage);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_BYTE, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "3"" of type '" "BYTE *""'"); 
    }
    arg3 = reinterpret_cast< BYTE * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "4"" of type '" "ULONG""'");
    } 
    arg4 = static_cast< ULONG >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_BYTE, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "5"" of type '" "BYTE *""'"); 
    }
    arg5 = reinterpret_cast< BYTE * >(argp5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = static_cast< ULONG >(val6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_BYTE, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "7"" of type '" "BYTE *""'"); 
    }
    arg7 = reinterpret_cast< BYTE * >(argp7);
    ecode8 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "8"" of type '" "ULONG""'");
    } 
    arg8 = static_cast< ULONG >(val8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_BYTE, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "9"" of type '" "BYTE *""'"); 
    }
    arg9 = reinterpret_cast< BYTE * >(argp9);
    ecode10 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "10"" of type '" "ULONG""'");
    } 
    arg10 = static_cast< ULONG >(val10);
    res11 = SWIG_ConvertPtr(ST(10), &argp11,SWIGTYPE_p_BYTE, 0 |  0 );
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "IExchangeImportContentsChanges_ImportMessageMove" "', argument " "11"" of type '" "BYTE *""'"); 
    }
    arg11 = reinterpret_cast< BYTE * >(argp11);
    result = (arg1)->ImportMessageMove(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IExchangeImportContentsChanges) {
  {
    IExchangeImportContentsChanges *arg1 = (IExchangeImportContentsChanges *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IExchangeImportContentsChanges(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeImportContentsChanges" "', argument " "1"" of type '" "IExchangeImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportContentsChanges * >(argp1);
    delete_IExchangeImportContentsChanges(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportHierarchyChanges_GetLastError) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportHierarchyChanges_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportHierarchyChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportHierarchyChanges_Config) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportHierarchyChanges_Config(self,lpStream,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeImportHierarchyChanges_Config" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->Config(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportHierarchyChanges_UpdateState) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeImportHierarchyChanges_UpdateState(self,lpStream);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_UpdateState" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeImportHierarchyChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    result = (arg1)->UpdateState(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportHierarchyChanges_ImportFolderChange) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    ULONG arg2 ;
    LPSPropValue arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeImportHierarchyChanges_ImportFolderChange(self,cValues,lpProps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_ImportFolderChange" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_LPSPropValue((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    result = (arg1)->ImportFolderChange(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeImportHierarchyChanges_ImportFolderDeletion) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    ULONG arg2 ;
    LPENTRYLIST arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeImportHierarchyChanges_ImportFolderDeletion(self,ulFlags,lpSrcEntryList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeImportHierarchyChanges_ImportFolderDeletion" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeImportHierarchyChanges_ImportFolderDeletion" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPENTRYLIST((AV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->ImportFolderDeletion(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IExchangeImportHierarchyChanges) {
  {
    IExchangeImportHierarchyChanges *arg1 = (IExchangeImportHierarchyChanges *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IExchangeImportHierarchyChanges(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeImportHierarchyChanges, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeImportHierarchyChanges" "', argument " "1"" of type '" "IExchangeImportHierarchyChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeImportHierarchyChanges * >(argp1);
    delete_IExchangeImportHierarchyChanges(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeExportChanges_GetLastError) {
  {
    IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeExportChanges_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeExportChanges_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeExportChanges_Config) {
  {
    IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    ULONG arg3 ;
    IUnknown *arg4 = (IUnknown *) 0 ;
    LPSRestriction arg5 ;
    LPSPropTagArray arg6 ;
    LPSPropTagArray arg7 ;
    ULONG arg8 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg5 = NULL;
    arg6 = NULL;
    arg7 = NULL;
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: IExchangeExportChanges_Config(self,lpStream,ulFlags,lpUnk,lpRestriction,lpIncludeProps,lpExcludeProps,ulBufferSize);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_Config" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeExportChanges_Config" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeExportChanges_Config" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IUnknown, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeExportChanges_Config" "', argument " "4"" of type '" "IUnknown *""'"); 
    }
    arg4 = reinterpret_cast< IUnknown * >(argp4);
    {
      if(!SvOK(ST(4))) {
        arg5 = NULL;
      } else {
        arg5 = HV_to_LPSRestriction((HV *)SvRV(ST(4)));
      }
    }
    {
      if(!SvOK(ST(5))) {
        arg6 = NULL;
      } else {
        arg6 = AV_to_LPSPropTagArray((AV *)SvRV(ST(5)));
      }
    }
    {
      if(!SvOK(ST(6))) {
        arg7 = NULL;
      } else {
        arg7 = AV_to_LPSPropTagArray((AV *)SvRV(ST(6)));
      }
    }
    ecode8 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IExchangeExportChanges_Config" "', argument " "8"" of type '" "ULONG""'");
    } 
    arg8 = static_cast< ULONG >(val8);
    result = (arg1)->Config(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    {
      if(arg6)
      MAPIFreeBuffer(arg6);
    }
    {
      if(arg7)
      MAPIFreeBuffer(arg7);
    }
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    {
      if(arg5)
      MAPIFreeBuffer(arg5);
    }
    {
      if(arg6)
      MAPIFreeBuffer(arg6);
    }
    {
      if(arg7)
      MAPIFreeBuffer(arg7);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeExportChanges_Synchronize) {
  {
    IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    ULONG *arg3 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    ULONG temp3 ;
    int res3 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeExportChanges_Synchronize(self,INOUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_Synchronize" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_ULONG,0))))) {
      unsigned int val; 
      int ecode = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IExchangeExportChanges_Synchronize" "', argument " "3"" of type '" "ULONG""'");
      }
      temp3 = static_cast< ULONG >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
    _saved[0] = ST(1);
    result = (arg1)->Synchronize(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeExportChanges_UpdateState) {
  {
    IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeExportChanges_UpdateState(self,lpStream);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeExportChanges_UpdateState" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeExportChanges_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    result = (arg1)->UpdateState(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IExchangeExportChanges) {
  {
    IExchangeExportChanges *arg1 = (IExchangeExportChanges *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IExchangeExportChanges(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeExportChanges, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeExportChanges" "', argument " "1"" of type '" "IExchangeExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeExportChanges * >(argp1);
    delete_IExchangeExportChanges(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeManageStore_CreateStoreEntryID) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPENTRYID *arg6 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG cbEntryID5 = 0 ;
    LPENTRYID lpEntryID5 = NULL ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg5 = &cbEntryID5; arg6 = &lpEntryID5;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IExchangeManageStore_CreateStoreEntryID(self,lpszMsgStoreDN,lpszMailboxDN,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_CreateStoreEntryID" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->CreateStoreEntryID(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg6) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5); argvi++  ;
      }
    }
    
    {
      
    }
    {
      
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeManageStore_EntryIDFromSourceKey) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    ULONG arg2 ;
    BYTE *arg3 = (BYTE *) 0 ;
    ULONG arg4 ;
    BYTE *arg5 = (BYTE *) 0 ;
    ULONG *arg6 = (ULONG *) 0 ;
    LPENTRYID *arg7 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    ULONG cbEntryID6 = 0 ;
    LPENTRYID lpEntryID6 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg6 = &cbEntryID6; arg7 = &lpEntryID6;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeManageStore_EntryIDFromSourceKey(self,cFolderKeySize,lpFolderSourceKey,cMessageKeySize,lpMessageSourceKey,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< BYTE * >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeManageStore_EntryIDFromSourceKey" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< BYTE * >(buf4);
      }
    }
    result = (arg1)->EntryIDFromSourceKey(arg2,arg3,arg4,arg5,arg6,arg7);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg7) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6); argvi++  ;
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    {
      if(*arg7)
      MAPIFreeBuffer(*arg7);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    {
      if(*arg7)
      MAPIFreeBuffer(*arg7);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeManageStore_GetRights) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    ULONG temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg6 = &temp6;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeManageStore_GetRights(self,cbUserEntryID,lpUserEntryID,cbEntryID,lpEntryID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetRights" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IExchangeManageStore_GetRights" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IExchangeManageStore_GetRights" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->GetRights(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeManageStore_GetMailboxTable) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    LPTSTR arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    IMAPITable *temp3 ;
    unsigned int fl4 ;
    int ecode4 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeManageStore_GetMailboxTable(self,lpszServerName,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetMailboxTable" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_GetMailboxTable" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->GetMailboxTable(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeManageStore_GetPublicFolderTable) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    LPTSTR arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    IMAPITable *temp3 ;
    unsigned int fl4 ;
    int ecode4 ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeManageStore_GetPublicFolderTable(self,lpszServerName,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeManageStore_GetPublicFolderTable" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IExchangeManageStore_GetPublicFolderTable" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->GetPublicFolderTable(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IExchangeManageStore) {
  {
    IExchangeManageStore *arg1 = (IExchangeManageStore *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IExchangeManageStore(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeManageStore, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeManageStore" "', argument " "1"" of type '" "IExchangeManageStore *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeManageStore * >(argp1);
    delete_IExchangeManageStore(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeModifyTable_GetLastError) {
  {
    IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPMAPIERROR temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeModifyTable_GetLastError(self,hResult,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IExchangeModifyTable_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPMAPIERROR(*(arg4)))); argvi++  ;
    }
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeModifyTable_GetTable) {
  {
    IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IExchangeModifyTable_GetTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_GetTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_GetTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IExchangeModifyTable_ModifyTable) {
  {
    IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
    ULONG arg2 ;
    LPROWLIST arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IExchangeModifyTable_ModifyTable(self,ulFlags,lpMods);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeModifyTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IExchangeModifyTable_ModifyTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IExchangeModifyTable_ModifyTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPROWLIST((AV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->ModifyTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IExchangeModifyTable) {
  {
    IExchangeModifyTable *arg1 = (IExchangeModifyTable *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IExchangeModifyTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IExchangeModifyTable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IExchangeModifyTable" "', argument " "1"" of type '" "IExchangeModifyTable *""'"); 
    }
    arg1 = reinterpret_cast< IExchangeModifyTable * >(argp1);
    delete_IExchangeModifyTable(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_CreateStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPENTRYID *arg6 = (LPENTRYID *) 0 ;
    ULONG *arg7 = (ULONG *) 0 ;
    LPENTRYID *arg8 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    ULONG cbEntryID5 = 0 ;
    LPENTRYID lpEntryID5 = NULL ;
    ULONG cbEntryID7 = 0 ;
    LPENTRYID lpEntryID7 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg5 = &cbEntryID5; arg6 = &lpEntryID5;
    }
    {
      arg7 = &cbEntryID7; arg8 = &lpEntryID7;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_CreateStore(self,ulStoreType,cbUserId,lpUserId,lppStoreId,lppRootId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_CreateStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_CreateStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    result = (arg1)->CreateStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg6) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5); argvi++  ;
      }
    }
    {
      if (*arg8) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg8,*arg7); argvi++  ;
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    {
      if(*arg8)
      MAPIFreeBuffer(*arg8);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    {
      if(*arg8)
      MAPIFreeBuffer(*arg8);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_CreateEmptyStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    ULONG arg5 ;
    ULONG *arg6 = (ULONG *) 0 ;
    LPENTRYID *arg7 = (LPENTRYID *) 0 ;
    ULONG *arg8 = (ULONG *) 0 ;
    LPENTRYID *arg9 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int res6 ;
    char *buf6 = 0 ;
    size_t size6 ;
    int alloc6 = 0 ;
    ULONG cbEntryID6 = 0 ;
    LPENTRYID lpEntryID6 = NULL ;
    LPENTRYID lpOrig6 = NULL ;
    int res8 ;
    char *buf8 = 0 ;
    size_t size8 ;
    int alloc8 = 0 ;
    ULONG cbEntryID8 = 0 ;
    LPENTRYID lpEntryID8 = NULL ;
    LPENTRYID lpOrig8 = NULL ;
    int argvi = 0;
    SV * _saved[2] ;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: IECServiceAdmin_CreateEmptyStore(self,ulStoreType,cbUserId,lpUserId,ulFlags,lpcbStoreId_oio,lppStoreId_oio,lpcbRootId_oio,lppRootId_oio);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    {
      arg6 = &cbEntryID6; arg7 = &lpEntryID6;
      
      res6 = SWIG_AsCharPtrAndSize(ST(4), &buf6, &size6, &alloc6);
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "6"" of type '" "ULONG *""'");
      }
      if(buf6 == NULL) {
        *arg6 = 0;
        *arg7 = NULL;
      } else {
        *arg6 = static_cast< ULONG >(size6 - 1);
        *arg7 = reinterpret_cast< LPENTRYID >(buf6);
      }
      lpOrig6 = *arg7;
    }
    {
      arg8 = &cbEntryID8; arg9 = &lpEntryID8;
      
      res8 = SWIG_AsCharPtrAndSize(ST(5), &buf8, &size8, &alloc8);
      if (!SWIG_IsOK(res8)) {
        SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "IECServiceAdmin_CreateEmptyStore" "', argument " "8"" of type '" "ULONG *""'");
      }
      if(buf8 == NULL) {
        *arg8 = 0;
        *arg9 = NULL;
      } else {
        *arg8 = static_cast< ULONG >(size8 - 1);
        *arg9 = reinterpret_cast< LPENTRYID >(buf8);
      }
      lpOrig8 = *arg9;
    }
    _saved[0] = ST(4);
    _saved[1] = ST(5);
    result = (arg1)->CreateEmptyStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg7) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg7,*arg6); argvi++  ;
      }
    }
    {
      if (*arg9) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg9,*arg8); argvi++  ;
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    
    {
      if(!lpOrig6 && arg7 && *arg7)
      MAPIFreeBuffer(*arg7);
    }
    {
      if(!lpOrig8 && arg9 && *arg9)
      MAPIFreeBuffer(*arg9);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    
    {
      if(!lpOrig6 && arg7 && *arg7)
      MAPIFreeBuffer(*arg7);
    }
    {
      if(!lpOrig8 && arg9 && *arg9)
      MAPIFreeBuffer(*arg9);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_ResolveStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPGUID arg2 ;
    ULONG *arg3 = (ULONG *) 0 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    ULONG temp3 ;
    int res3 = SWIG_TMPOBJ ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg3 = &temp3;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_ResolveStore(self,lpGuid,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_ResolveStore" "', argument " "2"" of type '" "LPGUID""'");
      }
      arg2 = reinterpret_cast< LPGUID >(buf2);
    }
    result = (arg1)->ResolveStore(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_HookStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    LPGUID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    int res5 ;
    char *buf5 ;
    size_t size5 ;
    int alloc5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECServiceAdmin_HookStore(self,ulStoreType,cbUserId,lpUserId,lpGuid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_HookStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_HookStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_HookStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    {
      alloc5 = SWIG_OLDOBJ;
      res5 = SWIG_AsCharPtrAndSize(ST(3), &buf5, &size5, &alloc5);
      if (!SWIG_IsOK(res5) || (size5 != 0 && (size5-1) != sizeof(MAPIUID))) {
        // size5-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IECServiceAdmin_HookStore" "', argument " "5"" of type '" "LPGUID""'");
      }
      arg5 = reinterpret_cast< LPGUID >(buf5);
    }
    result = (arg1)->HookStore(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_UnhookStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    LPENTRYID arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    size_t size3 ;
    int alloc3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_UnhookStore(self,ulStoreType,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, &size3, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECServiceAdmin_UnhookStore" "', argument " "3"" of type '" "ULONG""'");
      }
      if(buf3 == NULL) {
        arg3 = 0;
        arg4 = NULL;
      } else {
        arg3 = static_cast< ULONG >(size3 - 1);
        arg4 = reinterpret_cast< LPENTRYID >(buf3);
      }
    }
    result = (arg1)->UnhookStore(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_RemoveStore) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPGUID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_RemoveStore(self,lpGuid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_RemoveStore" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_RemoveStore" "', argument " "2"" of type '" "LPGUID""'");
      }
      arg2 = reinterpret_cast< LPGUID >(buf2);
    }
    result = (arg1)->RemoveStore(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_CreateUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECUSER arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_CreateUser(self,lpECUser,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECUSER,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_CreateUser" "', argument " "2"" of type '" "LPECUSER""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_CreateUser" "', argument " "2"" of type '" "LPECUSER""'");
      } else {
        arg2 = *(reinterpret_cast< LPECUSER * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateUser" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->CreateUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DeleteUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_DeleteUser(self,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->DeleteUser(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_SetUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECUSER arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_SetUser(self,lpECUser,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECUSER,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SetUser" "', argument " "2"" of type '" "LPECUSER""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_SetUser" "', argument " "2"" of type '" "LPECUSER""'");
      } else {
        arg2 = *(reinterpret_cast< LPECUSER * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetUser" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SetUser(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPECUSER *arg5 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    LPECUSER temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetUser(self,cbUserId,lpUserId,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUser" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECUSER(*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_ResolveUserName) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_ResolveUserName(self,lpszUserName,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveUserName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveUserName" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->ResolveUserName(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetUserList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECUSER *arg6 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECUSER lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetUserList(self,cbCompanyId,lpCompanyId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserList" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetUserList(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECUSER(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetSendAsList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECUSER *arg6 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECUSER lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetSendAsList(self,cbUserId,lpUserId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetSendAsList" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetSendAsList(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECUSER(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_AddSendAsUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_AddSendAsUser(self,cbUserId,lpUserId,cbSenderId,lpSenderId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddSendAsUser" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->AddSendAsUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DelSendAsUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_DelSendAsUser(self,cbUserId,lpUserId,cbSenderId,lpSenderId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelSendAsUser" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->DelSendAsUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetUserClientUpdateStatus) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPECUSERCLIENTUPDATESTATUS *arg5 = (LPECUSERCLIENTUPDATESTATUS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    LPECUSERCLIENTUPDATESTATUS temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetUserClientUpdateStatus(self,cbUserId,lpUserId,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserClientUpdateStatus" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetUserClientUpdateStatus(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECUSERCLIENTUPDATESTATUS(*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_RemoveAllObjects) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_RemoveAllObjects(self,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_RemoveAllObjects" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_RemoveAllObjects" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->RemoveAllObjects(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_CreateGroup) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECGROUP arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_CreateGroup(self,lpECGroup,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECGROUP,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "2"" of type '" "LPECGROUP""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_CreateGroup" "', argument " "2"" of type '" "LPECGROUP""'");
      } else {
        arg2 = *(reinterpret_cast< LPECGROUP * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateGroup" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->CreateGroup(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DeleteGroup) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_DeleteGroup(self,cbGroupId,lpGroupId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteGroup" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->DeleteGroup(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_SetGroup) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECGROUP arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_SetGroup(self,lpECGroup,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECGROUP,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SetGroup" "', argument " "2"" of type '" "LPECGROUP""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_SetGroup" "', argument " "2"" of type '" "LPECGROUP""'");
      } else {
        arg2 = *(reinterpret_cast< LPECGROUP * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetGroup" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SetGroup(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetGroup) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPECGROUP *arg5 = (LPECGROUP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    LPECGROUP temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetGroup(self,cbGroupId,lpGroupId,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroup" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroup" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetGroup(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECGROUP(*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_ResolveGroupName) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_ResolveGroupName(self,lpszGroupName,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveGroupName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveGroupName" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->ResolveGroupName(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetGroupList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECGROUP *arg6 = (LPECGROUP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECGROUP lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetGroupList(self,cbCompanyId,lpCompanyId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroupList" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetGroupList(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECGROUP(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DeleteGroupUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_DeleteGroupUser(self,cbGroupId,lpGroupId,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DeleteGroupUser" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->DeleteGroupUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_AddGroupUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_AddGroupUser(self,cbGroupId,lpGroupId,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddGroupUser" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->AddGroupUser(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetUserListOfGroup) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECUSER *arg6 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECUSER lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetUserListOfGroup(self,cbGroupId,lpGroupId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetUserListOfGroup" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetUserListOfGroup(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECUSER(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetGroupListOfUser) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECGROUP *arg6 = (LPECGROUP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECGROUP lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetGroupListOfUser(self,cbUserId,lpUserId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetGroupListOfUser" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetGroupListOfUser(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECGROUP(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_CreateCompany) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECCOMPANY arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_CreateCompany(self,lpECCompany,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECCOMPANY,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "2"" of type '" "LPECCOMPANY""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_CreateCompany" "', argument " "2"" of type '" "LPECCOMPANY""'");
      } else {
        arg2 = *(reinterpret_cast< LPECCOMPANY * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_CreateCompany" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->CreateCompany(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DeleteCompany) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_DeleteCompany(self,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteCompany" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->DeleteCompany(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_SetCompany) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECCOMPANY arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_SetCompany(self,lpECCompany,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_LPECCOMPANY,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SetCompany" "', argument " "2"" of type '" "LPECCOMPANY""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECServiceAdmin_SetCompany" "', argument " "2"" of type '" "LPECCOMPANY""'");
      } else {
        arg2 = *(reinterpret_cast< LPECCOMPANY * >(argp2));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_SetCompany" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->SetCompany(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetCompany) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPECCOMPANY *arg5 = (LPECCOMPANY *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    LPECCOMPANY temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetCompany(self,cbCompanyId,lpCompanyId,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetCompany" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetCompany" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetCompany" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetCompany(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECCOMPANY(*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_ResolveCompanyName) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPTSTR arg2 ;
    ULONG arg3 ;
    ULONG *arg4 = (ULONG *) 0 ;
    LPENTRYID *arg5 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    ULONG cbEntryID4 = 0 ;
    LPENTRYID lpEntryID4 = NULL ;
    std::string strInput2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg4 = &cbEntryID4; arg5 = &lpEntryID4;
    }
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_ResolveCompanyName(self,lpszCompanyName,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolveCompanyName" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_ResolveCompanyName" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    result = (arg1)->ResolveCompanyName(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg5) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg5,*arg4); argvi++  ;
      }
    }
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetCompanyList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG *arg3 = (ULONG *) 0 ;
    LPECCOMPANY *arg4 = (LPECCOMPANY *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    ULONG c3 ;
    LPECCOMPANY lp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp3 = NULL; arg4 = &lp3; c3 = 0; arg3 = &c3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_GetCompanyList(self,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetCompanyList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_GetCompanyList" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetCompanyList(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECCOMPANY(*(arg4),*(arg3)))); argvi++  ;
    }
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_AddCompanyToRemoteViewList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_AddCompanyToRemoteViewList(self,cbSetCompanyId,lpSetCompanyId,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddCompanyToRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->AddCompanyToRemoteViewList(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DelCompanyFromRemoteViewList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_DelCompanyFromRemoteViewList(self,cbSetCompanyId,lpSetCompanyId,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelCompanyFromRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->DelCompanyFromRemoteViewList(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetRemoteViewList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECCOMPANY *arg6 = (LPECCOMPANY *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECCOMPANY lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetRemoteViewList(self,cbCompanyId,lpCompanyId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetRemoteViewList" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetRemoteViewList(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECCOMPANY(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_AddUserToRemoteAdminList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_AddUserToRemoteAdminList(self,cbUserId,lpUserId,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddUserToRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->AddUserToRemoteAdminList(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DelUserFromRemoteAdminList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_DelUserFromRemoteAdminList(self,cbUserId,lpUserId,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DelUserFromRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    result = (arg1)->DelUserFromRemoteAdminList(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetRemoteAdminList) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECUSER *arg6 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECUSER lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetRemoteAdminList(self,cbCompanyId,lpCompanyId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetRemoteAdminList" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetRemoteAdminList(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECUSER(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_SyncUsers) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_SyncUsers(self,cbCompanyId,lpCompanyId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SyncUsers" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SyncUsers" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->SyncUsers(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetQuota) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    bool arg4 ;
    LPECQUOTA *arg5 = (LPECQUOTA *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    LPECQUOTA temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetQuota(self,cbUserId,lpUserId,bGetUserDefault);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuota" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuota" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetQuota" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    result = (arg1)->GetQuota(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECQUOTA(*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg5)
      MAPIFreeBuffer(*arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_SetQuota) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPECQUOTA arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_SetQuota(self,cbUserId,lpUserId,lpsQuota);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_SetQuota" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_SetQuota" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      if(!SvOK(ST(2))) {
        arg4 = NULL;
      } else {
        arg4 = HV_to_LPECQUOTA((HV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->SetQuota(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if(arg4)
      MAPIFreeBuffer(arg4);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if(arg4)
      MAPIFreeBuffer(arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_AddQuotaRecipient) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECServiceAdmin_AddQuotaRecipient(self,cbCompanyId,lpCompanyId,cbRecipientId,lpRecipientId,ulType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IECServiceAdmin_AddQuotaRecipient" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = static_cast< ULONG >(val6);
    result = (arg1)->AddQuotaRecipient(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_DeleteQuotaRecipient) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    LPENTRYID arg5 ;
    ULONG arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    size_t size4 ;
    int alloc4 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECServiceAdmin_DeleteQuotaRecipient(self,cbCompanyId,lpCompanyId,cbRecipientId,lpRecipientId,ulType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, &size4, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "4"" of type '" "ULONG""'");
      }
      if(buf4 == NULL) {
        arg4 = 0;
        arg5 = NULL;
      } else {
        arg4 = static_cast< ULONG >(size4 - 1);
        arg5 = reinterpret_cast< LPENTRYID >(buf4);
      }
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IECServiceAdmin_DeleteQuotaRecipient" "', argument " "6"" of type '" "ULONG""'");
    } 
    arg6 = static_cast< ULONG >(val6);
    result = (arg1)->DeleteQuotaRecipient(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetQuotaRecipients) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPECUSER *arg6 = (LPECUSER *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG c5 ;
    LPECUSER lp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    lp5 = NULL; arg6 = &lp5; c5 = 0; arg5 = &c5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetQuotaRecipients(self,cbUserId,lpUserId,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetQuotaRecipients" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->GetQuotaRecipients(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECUSER(*(arg6),*(arg5)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetQuotaStatus) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    LPECQUOTASTATUS *arg4 = (LPECQUOTASTATUS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    LPECQUOTASTATUS temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    temp4 = NULL; arg4 = &temp4;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_GetQuotaStatus(self,cbUserId,lpUserId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetQuotaStatus" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_GetQuotaStatus" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    result = (arg1)->GetQuotaStatus(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)HV_from_LPECQUOTASTATUS(*(arg4)))); argvi++  ;
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_PurgeSoftDelete) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_PurgeSoftDelete(self,ulDays);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_PurgeSoftDelete" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_PurgeSoftDelete" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->PurgeSoftDelete(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_PurgeCache) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_PurgeCache(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_PurgeCache" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_PurgeCache" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->PurgeCache(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_OpenUserStoresTable) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_OpenUserStoresTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_OpenUserStoresTable" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_OpenUserStoresTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->OpenUserStoresTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetServerDetails) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPECSVRNAMELIST arg2 ;
    ULONG arg3 ;
    LPECSERVERLIST *arg4 = (LPECSERVERLIST *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    LPECSERVERLIST temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECServiceAdmin_GetServerDetails(self,lpServerNameList,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetServerDetails" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPECSVRNAMELIST((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECServiceAdmin_GetServerDetails" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->GetServerDetails(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = sv_2mortal(newRV_noinc((SV *)AV_from_LPECSERVERLIST(*(arg4)))); argvi++  ;
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_ResolvePseudoUrl) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    bool *arg4 = (bool *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    char *lpStr3 = NULL ;
    bool bBool4 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg3 = &lpStr3;
    }
    {
      arg4 = &bBool4;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_ResolvePseudoUrl(self,lpszPseudoUrl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_ResolvePseudoUrl" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECServiceAdmin_ResolvePseudoUrl" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (arg1)->ResolvePseudoUrl(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtr((char*)*arg3); argvi++  ;
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int((int)*arg4); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetPublicStoreEntryID) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    ULONG arg2 ;
    ULONG *arg3 = (ULONG *) 0 ;
    LPENTRYID *arg4 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    ULONG cbEntryID3 = 0 ;
    LPENTRYID lpEntryID3 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg3 = &cbEntryID3; arg4 = &lpEntryID3;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECServiceAdmin_GetPublicStoreEntryID(self,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetPublicStoreEntryID" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECServiceAdmin_GetPublicStoreEntryID" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetPublicStoreEntryID(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg4) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg4,*arg3); argvi++  ;
      }
    }
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(*arg4)
      MAPIFreeBuffer(*arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECServiceAdmin_GetArchiveStoreEntryID) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    LPTSTR arg2 ;
    LPTSTR arg3 ;
    ULONG arg4 ;
    ULONG *arg5 = (ULONG *) 0 ;
    LPENTRYID *arg6 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    ULONG cbEntryID5 = 0 ;
    LPENTRYID lpEntryID5 = NULL ;
    std::string strInput2 ;
    std::string strInput3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg5 = &cbEntryID5; arg6 = &lpEntryID5;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECServiceAdmin_GetArchiveStoreEntryID(self,lpszUserName,lpszServerName,ulFlags,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    {
      arg2 = (LPTSTR)ST(1);
    }
    {
      arg3 = (LPTSTR)ST(2);
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECServiceAdmin_GetArchiveStoreEntryID" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    {
      SV *entry = (SV*)arg2;
      if (!SvOK(entry))
      arg2 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg2 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput2.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg2 = (LPTSTR)strInput2.c_str();
        }
      }
    }
    {
      SV *entry = (SV*)arg3;
      if (!SvOK(entry))
      arg3 = NULL;
      else {
        if (!SvUTF8(entry) && !(ulFlags & MAPI_UNICODE))
        arg3 = (LPTSTR)SvPV_nolen(entry);
        
        else {
          const char *lpszFrom = "";
          if (SvUTF8(entry))
          lpszFrom = "UTF-8";
          const char *lpszTo = (ulFlags & MAPI_UNICODE ? "WCHAR_T" : "//TRANSLIT");
          
          STRLEN len = 0;
          const char *lpsz = SvPV(entry, len);
          strInput3.assign(convert_to<std::string>(lpszTo, lpsz, len, lpszFrom));
          
          arg3 = (LPTSTR)strInput3.c_str();
        }
      }
    }
    result = (arg1)->GetArchiveStoreEntryID(arg2,arg3,arg4,arg5,arg6);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg6) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg6,*arg5); argvi++  ;
      }
    }
    
    {
      
    }
    {
      
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    XSRETURN(argvi);
  fail:
    
    {
      
    }
    {
      
    }
    
    {
      if(*arg6)
      MAPIFreeBuffer(*arg6);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECServiceAdmin) {
  {
    IECServiceAdmin *arg1 = (IECServiceAdmin *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECServiceAdmin(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECServiceAdmin, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECServiceAdmin" "', argument " "1"" of type '" "IECServiceAdmin *""'"); 
    }
    arg1 = reinterpret_cast< IECServiceAdmin * >(argp1);
    delete_IECServiceAdmin(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECSpooler_GetMasterOutgoingTable) {
  {
    IECSpooler *arg1 = (IECSpooler *) 0 ;
    ULONG arg2 ;
    IMAPITable **arg3 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    IMAPITable *temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    temp3 = NULL; arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECSpooler_GetMasterOutgoingTable(self,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSpooler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSpooler_GetMasterOutgoingTable" "', argument " "1"" of type '" "IECSpooler *""'"); 
    }
    arg1 = reinterpret_cast< IECSpooler * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECSpooler_GetMasterOutgoingTable" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    result = (arg1)->GetMasterOutgoingTable(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECSpooler_DeleteFromMasterOutgoingTable) {
  {
    IECSpooler *arg1 = (IECSpooler *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    ULONG arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECSpooler_DeleteFromMasterOutgoingTable(self,cbEntryID,lpEntryID,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSpooler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "1"" of type '" "IECSpooler *""'"); 
    }
    arg1 = reinterpret_cast< IECSpooler * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "2"" of type '" "ULONG""'");
      }
      if(buf2 == NULL) {
        arg2 = 0;
        arg3 = NULL;
      } else {
        arg2 = static_cast< ULONG >(size2 - 1);
        arg3 = reinterpret_cast< LPENTRYID >(buf2);
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECSpooler_DeleteFromMasterOutgoingTable" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->DeleteFromMasterOutgoingTable(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECSpooler) {
  {
    IECSpooler *arg1 = (IECSpooler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECSpooler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSpooler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECSpooler" "', argument " "1"" of type '" "IECSpooler *""'"); 
    }
    arg1 = reinterpret_cast< IECSpooler * >(argp1);
    delete_IECSpooler(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECTestProtocol_TestPerform) {
  {
    IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    char **arg4 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECTestProtocol_TestPerform(self,szCommand,ulArgs,szArgs);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestPerform" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
    }
    arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestPerform" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECTestProtocol_TestPerform" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_p_char, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECTestProtocol_TestPerform" "', argument " "4"" of type '" "char **""'"); 
    }
    arg4 = reinterpret_cast< char ** >(argp4);
    result = (arg1)->TestPerform(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECTestProtocol_TestSet) {
  {
    IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECTestProtocol_TestSet(self,szName,szValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestSet" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
    }
    arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestSet" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECTestProtocol_TestSet" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    result = (arg1)->TestSet(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_IECTestProtocol_TestGet) {
  {
    IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    char *temp3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECTestProtocol_TestGet(self,szName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECTestProtocol, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECTestProtocol_TestGet" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
    }
    arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECTestProtocol_TestGet" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (arg1)->TestGet(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (*arg3) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtr(*arg3); argvi++  ;
      MAPIFreeBuffer(*arg3);					  	     
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECTestProtocol) {
  {
    IECTestProtocol *arg1 = (IECTestProtocol *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECTestProtocol(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECTestProtocol, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECTestProtocol" "', argument " "1"" of type '" "IECTestProtocol *""'"); 
    }
    arg1 = reinterpret_cast< IECTestProtocol * >(argp1);
    delete_IECTestProtocol(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECMultiStoreTable_OpenMultiStoreTable) {
  {
    IECMultiStoreTable *arg1 = (IECMultiStoreTable *) 0 ;
    LPENTRYLIST arg2 ;
    ULONG arg3 ;
    IMAPITable **arg4 = (IMAPITable **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    IMAPITable *temp4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    ULONG ulFlags = 0;
    temp4 = NULL; arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECMultiStoreTable_OpenMultiStoreTable(self,lpMsgList,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECMultiStoreTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECMultiStoreTable_OpenMultiStoreTable" "', argument " "1"" of type '" "IECMultiStoreTable *""'"); 
    }
    arg1 = reinterpret_cast< IECMultiStoreTable * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECMultiStoreTable_OpenMultiStoreTable" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    result = (arg1)->OpenMultiStoreTable(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg4), SWIGTYPE_p_IMAPITable, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECMultiStoreTable) {
  {
    IECMultiStoreTable *arg1 = (IECMultiStoreTable *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECMultiStoreTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECMultiStoreTable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECMultiStoreTable" "', argument " "1"" of type '" "IECMultiStoreTable *""'"); 
    }
    arg1 = reinterpret_cast< IECMultiStoreTable * >(argp1);
    delete_IECMultiStoreTable(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECLicense_LicenseAuth) {
  {
    IECLicense *arg1 = (IECLicense *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    unsigned int arg3 ;
    unsigned char **arg4 = (unsigned char **) 0 ;
    unsigned int *arg5 = (unsigned int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 ;
    int alloc2 = 0 ;
    unsigned char *temp4 = 0 ;
    unsigned int tempn4 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg4 = &temp4; arg5 = &tempn4;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECLicense_LicenseAuth(self,lpData,ulSize,lpulResponseSize);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECLicense, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECLicense_LicenseAuth" "', argument " "1"" of type '" "IECLicense *""'"); 
    }
    arg1 = reinterpret_cast< IECLicense * >(argp1);
    {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECLicense_LicenseAuth" "', argument " "2"" of type '" "unsigned char *""'");
      }
      if(buf2 == NULL) {
        arg2 = NULL;
        arg3 = 0;
      } else {
        arg2 = reinterpret_cast< unsigned char * >(buf2);
        arg3 = static_cast< unsigned int >(size2 - 1);
      }
    }
    result = (arg1)->LicenseAuth(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (*arg4) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromBytePtrAndSize(*arg4,*arg5); argvi++  ;
      delete[] *arg4;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECLicense) {
  {
    IECLicense *arg1 = (IECLicense *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECLicense(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECLicense, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECLicense" "', argument " "1"" of type '" "IECLicense *""'"); 
    }
    arg1 = reinterpret_cast< IECLicense * >(argp1);
    delete_IECLicense(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECExportChanges_GetChangeCount) {
  {
    IECExportChanges *arg1 = (IECExportChanges *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IECExportChanges_GetChangeCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_GetChangeCount" "', argument " "1"" of type '" "IECExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECExportChanges * >(argp1);
    result = (arg1)->GetChangeCount(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_ULONG, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECExportChanges_SetMessageInterface) {
  {
    IECExportChanges *arg1 = (IECExportChanges *) 0 ;
    IID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECExportChanges_SetMessageInterface(self,refiid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_SetMessageInterface" "', argument " "1"" of type '" "IECExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECExportChanges * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_IID,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECExportChanges_SetMessageInterface" "', argument " "2"" of type '" "IID""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECExportChanges_SetMessageInterface" "', argument " "2"" of type '" "IID""'");
      } else {
        arg2 = *(reinterpret_cast< IID * >(argp2));
      }
    }
    result = (arg1)->SetMessageInterface(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECExportChanges_SetLogger) {
  {
    IECExportChanges *arg1 = (IECExportChanges *) 0 ;
    ECLogger *arg2 = (ECLogger *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECExportChanges_SetLogger(self,lpLogger);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECExportChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECExportChanges_SetLogger" "', argument " "1"" of type '" "IECExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECExportChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_ECLogger, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECExportChanges_SetLogger" "', argument " "2"" of type '" "ECLogger *""'"); 
    }
    arg2 = reinterpret_cast< ECLogger * >(argp2);
    result = (arg1)->SetLogger(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECExportChanges) {
  {
    IECExportChanges *arg1 = (IECExportChanges *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECExportChanges(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECExportChanges, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECExportChanges" "', argument " "1"" of type '" "IECExportChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECExportChanges * >(argp1);
    delete_IECExportChanges(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_UnwrapObject) {
  {
    IMAPIProp *arg1 = (IMAPIProp *) 0 ;
    LPCIID arg2 ;
    LPUNKNOWN *arg3 = (LPUNKNOWN *) 0 ;
    int res1 ;
    LPUNKNOWN temp3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    LPCIID &__lpiid = arg2;
    {
      arg3 = (LPUNKNOWN *)&temp3;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UnwrapObject(lpWrapped,USE_IID_FOR_OUTPUT);");
    }
    {
      res1 = SWIG_ConvertPtr(ST(0), (void**)&arg1, SWIGTYPE_p_IMAPIProp, 0 |  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "BUG"); 
      }
      
      arg2 = IIDFromType(TypeFromObject(ST(0)));
    }
    result = UnwrapObject(arg1,arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg3), TypeFromIID(*__lpiid), SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_GetLastError) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    HRESULT arg2 ;
    ULONG arg3 ;
    LPMAPIERROR *arg4 = (LPMAPIERROR *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECChangeAdvisor_GetLastError(self,hResult,ulFlags,lppMAPIError);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "2"" of type '" "HRESULT""'");
    } 
    arg2 = static_cast< HRESULT >(val2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_LPMAPIERROR, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECChangeAdvisor_GetLastError" "', argument " "4"" of type '" "LPMAPIERROR *""'"); 
    }
    arg4 = reinterpret_cast< LPMAPIERROR * >(argp4);
    result = (arg1)->GetLastError(arg2,arg3,arg4);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_Config) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    GUID *arg3 = (GUID *) 0 ;
    IECChangeAdviseSink *arg4 = (IECChangeAdviseSink *) 0 ;
    ULONG arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int fl5 ;
    int ecode5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: IECChangeAdvisor_Config(self,lpStream,lpGUID,lpAdviseSink,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_Config" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECChangeAdvisor_Config" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GUID, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECChangeAdvisor_Config" "', argument " "3"" of type '" "GUID *""'"); 
    }
    arg3 = reinterpret_cast< GUID * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_IECChangeAdviseSink, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IECChangeAdvisor_Config" "', argument " "4"" of type '" "IECChangeAdviseSink *""'"); 
    }
    arg4 = reinterpret_cast< IECChangeAdviseSink * >(argp4);
    {
      ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &fl5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IECChangeAdvisor_Config" "', argument " "5"" of type '" "ULONG""'");
      } 
      arg5 = fl5;
      ulFlags = fl5;
    }
    result = (arg1)->Config(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_UpdateState) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECChangeAdvisor_UpdateState(self,lpStream);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_UpdateState" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECChangeAdvisor_UpdateState" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    result = (arg1)->UpdateState(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_AddKeys) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    LPENTRYLIST arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECChangeAdvisor_AddKeys(self,lpEntryList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_AddKeys" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    result = (arg1)->AddKeys(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_RemoveKeys) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    LPENTRYLIST arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    arg2 = NULL;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECChangeAdvisor_RemoveKeys(self,lpEntryList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_RemoveKeys" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    {
      if(!SvOK(ST(1))) {
        arg2 = NULL;
      } else {
        arg2 = AV_to_LPENTRYLIST((AV *)SvRV(ST(1)));
      }
    }
    result = (arg1)->RemoveKeys(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(arg2)
      MAPIFreeBuffer(arg2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_IsMonitoringSyncId) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    ULONG arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECChangeAdvisor_IsMonitoringSyncId(self,ulSyncId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_IsMonitoringSyncId" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_IsMonitoringSyncId" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    result = (arg1)->IsMonitoringSyncId(arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdvisor_UpdateSyncState) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    ULONG arg2 ;
    ULONG arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECChangeAdvisor_UpdateSyncState(self,ulSyncId,ulChangeId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECChangeAdvisor_UpdateSyncState" "', argument " "3"" of type '" "ULONG""'");
    } 
    arg3 = static_cast< ULONG >(val3);
    result = (arg1)->UpdateSyncState(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECChangeAdvisor) {
  {
    IECChangeAdvisor *arg1 = (IECChangeAdvisor *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECChangeAdvisor(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdvisor, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECChangeAdvisor" "', argument " "1"" of type '" "IECChangeAdvisor *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdvisor * >(argp1);
    delete_IECChangeAdvisor(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECChangeAdviseSink_OnNotify) {
  {
    IECChangeAdviseSink *arg1 = (IECChangeAdviseSink *) 0 ;
    ULONG arg2 ;
    LPENTRYLIST arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl2 ;
    int ecode2 ;
    int argvi = 0;
    ULONG result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    arg3 = NULL;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECChangeAdviseSink_OnNotify(self,ulFlags,lpEntryList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdviseSink, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECChangeAdviseSink_OnNotify" "', argument " "1"" of type '" "IECChangeAdviseSink *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdviseSink * >(argp1);
    {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &fl2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECChangeAdviseSink_OnNotify" "', argument " "2"" of type '" "ULONG""'");
      } 
      arg2 = fl2;
      ulFlags = fl2;
    }
    {
      if(!SvOK(ST(2))) {
        arg3 = NULL;
      } else {
        arg3 = AV_to_LPENTRYLIST((AV *)SvRV(ST(2)));
      }
    }
    result = (arg1)->OnNotify(arg2,arg3);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      if(arg3)
      MAPIFreeBuffer(arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECChangeAdviseSink) {
  {
    IECChangeAdviseSink *arg1 = (IECChangeAdviseSink *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECChangeAdviseSink(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECChangeAdviseSink, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECChangeAdviseSink" "', argument " "1"" of type '" "IECChangeAdviseSink *""'"); 
    }
    arg1 = reinterpret_cast< IECChangeAdviseSink * >(argp1);
    delete_IECChangeAdviseSink(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECImportContentsChanges_ConfigForConversionStream) {
  {
    IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
    IStream *arg2 = (IStream *) 0 ;
    ULONG arg3 ;
    ULONG arg4 ;
    LPSPropValue arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int fl3 ;
    int ecode3 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    ULONG ulFlags = 0;
    {
      arg4 = 0;
      arg5 = NULL;
    }
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: IECImportContentsChanges_ConfigForConversionStream(self,lpStream,ulFlags,cValuesConversion,lpPropArrayConversion);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IStream, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "2"" of type '" "IStream *""'"); 
    }
    arg2 = reinterpret_cast< IStream * >(argp2);
    {
      ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IECImportContentsChanges_ConfigForConversionStream" "', argument " "3"" of type '" "ULONG""'");
      } 
      arg3 = fl3;
      ulFlags = fl3;
    }
    {
      STRLEN len;
      if(!SvOK(ST(3))) {
        arg5 = NULL;
        arg4 = 0;
      } else {
        arg5 = AV_to_LPSPropValue((AV *)SvRV(ST(3)), &len);
        arg4 = len;
      }
    }
    result = (arg1)->ConfigForConversionStream(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    
    {
      if(arg5)
      MAPIFreeBuffer((void *)arg5);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      if(arg5)
      MAPIFreeBuffer((void *)arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECImportContentsChanges_ImportMessageChangeAsAStream) {
  {
    IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
    ULONG arg2 ;
    LPSPropValue arg3 ;
    ULONG arg4 ;
    IStream **arg5 = (IStream **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int fl4 ;
    int ecode4 ;
    IStream *temp5 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = 0;
      arg3 = NULL;
    }
    ULONG ulFlags = 0;
    temp5 = NULL; arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECImportContentsChanges_ImportMessageChangeAsAStream(self,cValues,lpProps,ulFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_ImportMessageChangeAsAStream" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
    {
      STRLEN len;
      if(!SvOK(ST(1))) {
        arg3 = NULL;
        arg2 = 0;
      } else {
        arg3 = AV_to_LPSPropValue((AV *)SvRV(ST(1)), &len);
        arg2 = len;
      }
    }
    {
      ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &fl4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IECImportContentsChanges_ImportMessageChangeAsAStream" "', argument " "4"" of type '" "ULONG""'");
      } 
      arg4 = fl4;
      ulFlags = fl4;
    }
    result = (arg1)->ImportMessageChangeAsAStream(arg2,arg3,arg4,arg5);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)*(arg5), SWIGTYPE_p_IStream, SWIG_SHADOW | SWIG_OWNER); argvi++  ;
    }
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    {
      if(arg3)
      MAPIFreeBuffer((void *)arg3);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECImportContentsChanges_SetMessageInterface) {
  {
    IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
    IID *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 ;
    size_t size2 ;
    int alloc2 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IECImportContentsChanges_SetMessageInterface(self,refiid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECImportContentsChanges, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECImportContentsChanges_SetMessageInterface" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
    {
      alloc2 = SWIG_OLDOBJ;
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
      if (!SWIG_IsOK(res2) || (size2 != 0 && (size2-1) != sizeof(MAPIUID))) {
        // size2-1 because we get \0 terminated string
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IECImportContentsChanges_SetMessageInterface" "', argument " "2"" of type '" "IID const &""'");
      }
      arg2 = reinterpret_cast< IID * >(buf2);
    }
    result = (arg1)->SetMessageInterface((IID const &)*arg2);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECImportContentsChanges) {
  {
    IECImportContentsChanges *arg1 = (IECImportContentsChanges *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECImportContentsChanges(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECImportContentsChanges, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECImportContentsChanges" "', argument " "1"" of type '" "IECImportContentsChanges *""'"); 
    }
    arg1 = reinterpret_cast< IECImportContentsChanges * >(argp1);
    delete_IECImportContentsChanges(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IECSingleInstance_GetSingleInstanceId) {
  {
    IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
    ULONG *arg2 = (ULONG *) 0 ;
    LPENTRYID *arg3 = (LPENTRYID *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    ULONG cbEntryID2 = 0 ;
    LPENTRYID lpEntryID2 = NULL ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    {
      arg2 = &cbEntryID2; arg3 = &lpEntryID2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IECSingleInstance_GetSingleInstanceId(self,OUTPUT);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSingleInstance, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSingleInstance_GetSingleInstanceId" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
    }
    arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
    result = (arg1)->GetSingleInstanceId(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    {
      if (*arg3) {
        if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_FromCharPtrAndSize((const char *)*arg3,*arg2); argvi++  ;
      }
    }
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      if(*arg3)
      MAPIFreeBuffer(*arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IECSingleInstance_SetSingleInstanceId) {
  {
    IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
    ULONG arg2 ;
    LPENTRYID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    HRESULT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IECSingleInstance_SetSingleInstanceId(self,cbInstanceID,lpInstanceID);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSingleInstance, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
    }
    arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "2"" of type '" "ULONG""'");
    } 
    arg2 = static_cast< ULONG >(val2);
    {
      res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_LPENTRYID,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "3"" of type '" "LPENTRYID""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IECSingleInstance_SetSingleInstanceId" "', argument " "3"" of type '" "LPENTRYID""'");
      } else {
        arg3 = *(reinterpret_cast< LPENTRYID * >(argp3));
      }
    }
    result = (arg1)->SetSingleInstanceId(arg2,arg3);
    {
      if(FAILED(result)) {
        Do_Exception(result);
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IECSingleInstance) {
  {
    IECSingleInstance *arg1 = (IECSingleInstance *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IECSingleInstance(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IECSingleInstance, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IECSingleInstance" "', argument " "1"" of type '" "IECSingleInstance *""'"); 
    }
    arg1 = reinterpret_cast< IECSingleInstance * >(argp1);
    delete_IECSingleInstance(arg1);
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IECImportContentsChangesTo_p_IExchangeImportContentsChanges(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IExchangeImportContentsChanges *)  ((IECImportContentsChanges *) x));
}
static void *_p_IMAPIStatusTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMAPIStatus *) x));
}
static void *_p_IMsgStoreTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMsgStore *) x));
}
static void *_p_IMAPIFolderTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IMAPIFolder *) x));
}
static void *_p_IMailUserTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMailUser *) x));
}
static void *_p_IAddrBookTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IAddrBook *) x));
}
static void *_p_IAttachTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IAttach *) x));
}
static void *_p_IMessageTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMessage *) x));
}
static void *_p_IProfSectTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IProfSect *) x));
}
static void *_p_IMAPIContainerTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *)  ((IMAPIContainer *) x));
}
static void *_p_IABContainerTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IABContainer *) x));
}
static void *_p_IDistListTo_p_IMAPIProp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIProp *) (IMAPIContainer *) ((IDistList *) x));
}
static void *_p_IMAPIFolderTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IMAPIFolder *) x));
}
static void *_p_IABContainerTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IABContainer *) x));
}
static void *_p_IDistListTo_p_IMAPIContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIContainer *)  ((IDistList *) x));
}
static void *_p_IStreamTo_p_ISequentialStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISequentialStream *)  ((IStream *) x));
}
static void *_p_MAPINotifSinkTo_p_IMAPIAdviseSink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMAPIAdviseSink *)  ((MAPINotifSink *) x));
}
static void *_p_p_IMAPIStatusTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMAPIStatus **) x));
}
static void *_p_p_IECSingleInstanceTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECSingleInstance **) x));
}
static void *_p_p_IAddrBookTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IAddrBook **) x));
}
static void *_p_p_IMessageTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMessage **) x));
}
static void *_p_p_IExchangeManageStoreTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeManageStore **) x));
}
static void *_p_p_IMailUserTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMailUser **) x));
}
static void *_p_p_IMsgStoreTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMsgStore **) x));
}
static void *_p_p_IECExportChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECExportChanges **) x));
}
static void *_p_p_IExchangeExportChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeExportChanges **) x));
}
static void *_p_p_IExchangeImportHierarchyChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeImportHierarchyChanges **) x));
}
static void *_p_p_IExchangeImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeImportContentsChanges **) x));
}
static void *_p_p_IECServiceAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECServiceAdmin **) x));
}
static void *_p_p_IMsgServiceAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMsgServiceAdmin **) x));
}
static void *_p_p_IECImportContentsChangesTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IExchangeImportContentsChanges *) ((IECImportContentsChanges **) x));
}
static void *_p_p_IProviderAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProviderAdmin **) x));
}
static void *_p_p_IAttachTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IAttach **) x));
}
static void *_p_p_IExchangeModifyTableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IExchangeModifyTable **) x));
}
static void *_p_p_IMAPITableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPITable **) x));
}
static void *_p_p_IECChangeAdvisorTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECChangeAdvisor **) x));
}
static void *_p_p_IDistListTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IDistList **) x));
}
static void *_p_p_IECMultiStoreTableTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECMultiStoreTable **) x));
}
static void *_p_p_IMAPIContainerTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IMAPIContainer **) x));
}
static void *_p_p_IABContainerTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IABContainer **) x));
}
static void *_p_p_IMAPISessionTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPISession **) x));
}
static void *_p_p_ISequentialStreamTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((ISequentialStream **) x));
}
static void *_p_p_IMAPIFolderTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *)(IMAPIContainer *) ((IMAPIFolder **) x));
}
static void *_p_p_IECTestProtocolTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECTestProtocol **) x));
}
static void *_p_p_MAPINotifSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIAdviseSink *) ((MAPINotifSink **) x));
}
static void *_p_p_IProxyStoreObjectTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProxyStoreObject **) x));
}
static void *_p_p_IECLicenseTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECLicense **) x));
}
static void *_p_p_IProfAdminTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IProfAdmin **) x));
}
static void *_p_p_IMAPIPropTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIProp **) x));
}
static void *_p_p_IMAPIAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIAdviseSink **) x));
}
static void *_p_p_IECChangeAdviseSinkTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IECChangeAdviseSink **) x));
}
static void *_p_p_IMAPIProgressTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **)  ((IMAPIProgress **) x));
}
static void *_p_p_IProfSectTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (IMAPIProp *) ((IProfSect **) x));
}
static void *_p_p_IStreamTo_p_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown **) (ISequentialStream *) ((IStream **) x));
}
static void *_p_IMAPIStatusTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMAPIStatus *) x));
}
static void *_p_IECSingleInstanceTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECSingleInstance *) x));
}
static void *_p_IAddrBookTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IAddrBook *) x));
}
static void *_p_IMessageTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMessage *) x));
}
static void *_p_IExchangeManageStoreTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeManageStore *) x));
}
static void *_p_IMailUserTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMailUser *) x));
}
static void *_p_IMsgStoreTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMsgStore *) x));
}
static void *_p_IECExportChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECExportChanges *) x));
}
static void *_p_IExchangeExportChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeExportChanges *) x));
}
static void *_p_IExchangeImportHierarchyChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeImportHierarchyChanges *) x));
}
static void *_p_IExchangeImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeImportContentsChanges *) x));
}
static void *_p_IECServiceAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECServiceAdmin *) x));
}
static void *_p_IMsgServiceAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMsgServiceAdmin *) x));
}
static void *_p_IECImportContentsChangesTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IExchangeImportContentsChanges *) ((IECImportContentsChanges *) x));
}
static void *_p_IProviderAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProviderAdmin *) x));
}
static void *_p_IAttachTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IAttach *) x));
}
static void *_p_IExchangeModifyTableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IExchangeModifyTable *) x));
}
static void *_p_IMAPITableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPITable *) x));
}
static void *_p_IECChangeAdvisorTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECChangeAdvisor *) x));
}
static void *_p_IDistListTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IDistList *) x));
}
static void *_p_IECMultiStoreTableTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECMultiStoreTable *) x));
}
static void *_p_IMAPIContainerTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IMAPIContainer *) x));
}
static void *_p_IABContainerTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IABContainer *) x));
}
static void *_p_IMAPISessionTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPISession *) x));
}
static void *_p_ISequentialStreamTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((ISequentialStream *) x));
}
static void *_p_IMAPIFolderTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *)(IMAPIContainer *) ((IMAPIFolder *) x));
}
static void *_p_IECTestProtocolTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECTestProtocol *) x));
}
static void *_p_MAPINotifSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIAdviseSink *) ((MAPINotifSink *) x));
}
static void *_p_IProxyStoreObjectTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProxyStoreObject *) x));
}
static void *_p_IECLicenseTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECLicense *) x));
}
static void *_p_IProfAdminTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IProfAdmin *) x));
}
static void *_p_IMAPIPropTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIProp *) x));
}
static void *_p_IMAPIAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIAdviseSink *) x));
}
static void *_p_IECChangeAdviseSinkTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IECChangeAdviseSink *) x));
}
static void *_p_IMAPIProgressTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *)  ((IMAPIProgress *) x));
}
static void *_p_IProfSectTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (IMAPIProp *) ((IProfSect *) x));
}
static void *_p_IStreamTo_p_IUnknown(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IUnknown *) (ISequentialStream *) ((IStream *) x));
}
static swig_type_info _swigt__p_BYTE = {"_p_BYTE", "BYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ECLogger = {"_p_ECLogger", "ECLogger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GUID = {"_p_GUID", "GUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IABContainer = {"_p_IABContainer", "IABContainer *", 0, 0, (void*)"MAPICore::IABContainer", 0};
static swig_type_info _swigt__p_IAddrBook = {"_p_IAddrBook", "IAddrBook *", 0, 0, (void*)"MAPICore::IAddrBook", 0};
static swig_type_info _swigt__p_IAttach = {"_p_IAttach", "IAttach *", 0, 0, (void*)"MAPICore::IAttach", 0};
static swig_type_info _swigt__p_IDistList = {"_p_IDistList", "IDistList *", 0, 0, (void*)"MAPICore::IDistList", 0};
static swig_type_info _swigt__p_IECChangeAdviseSink = {"_p_IECChangeAdviseSink", "IECChangeAdviseSink *", 0, 0, (void*)"MAPICore::IECChangeAdviseSink", 0};
static swig_type_info _swigt__p_IECChangeAdvisor = {"_p_IECChangeAdvisor", "IECChangeAdvisor *", 0, 0, (void*)"MAPICore::IECChangeAdvisor", 0};
static swig_type_info _swigt__p_IECExportChanges = {"_p_IECExportChanges", "IECExportChanges *", 0, 0, (void*)"MAPICore::IECExportChanges", 0};
static swig_type_info _swigt__p_IECImportContentsChanges = {"_p_IECImportContentsChanges", "IECImportContentsChanges *", 0, 0, (void*)"MAPICore::IECImportContentsChanges", 0};
static swig_type_info _swigt__p_IECLicense = {"_p_IECLicense", "IECLicense *", 0, 0, (void*)"MAPICore::IECLicense", 0};
static swig_type_info _swigt__p_IECMultiStoreTable = {"_p_IECMultiStoreTable", "IECMultiStoreTable *", 0, 0, (void*)"MAPICore::IECMultiStoreTable", 0};
static swig_type_info _swigt__p_IECServiceAdmin = {"_p_IECServiceAdmin", "IECServiceAdmin *", 0, 0, (void*)"MAPICore::IECServiceAdmin", 0};
static swig_type_info _swigt__p_IECSingleInstance = {"_p_IECSingleInstance", "IECSingleInstance *", 0, 0, (void*)"MAPICore::IECSingleInstance", 0};
static swig_type_info _swigt__p_IECSpooler = {"_p_IECSpooler", "IECSpooler *", 0, 0, (void*)"MAPICore::IECSpooler", 0};
static swig_type_info _swigt__p_IECTestProtocol = {"_p_IECTestProtocol", "IECTestProtocol *", 0, 0, (void*)"MAPICore::IECTestProtocol", 0};
static swig_type_info _swigt__p_IExchangeExportChanges = {"_p_IExchangeExportChanges", "IExchangeExportChanges *", 0, 0, (void*)"MAPICore::IExchangeExportChanges", 0};
static swig_type_info _swigt__p_IExchangeImportContentsChanges = {"_p_IExchangeImportContentsChanges", "IExchangeImportContentsChanges *", 0, 0, (void*)"MAPICore::IExchangeImportContentsChanges", 0};
static swig_type_info _swigt__p_IExchangeImportHierarchyChanges = {"_p_IExchangeImportHierarchyChanges", "IExchangeImportHierarchyChanges *", 0, 0, (void*)"MAPICore::IExchangeImportHierarchyChanges", 0};
static swig_type_info _swigt__p_IExchangeManageStore = {"_p_IExchangeManageStore", "IExchangeManageStore *", 0, 0, (void*)"MAPICore::IExchangeManageStore", 0};
static swig_type_info _swigt__p_IExchangeModifyTable = {"_p_IExchangeModifyTable", "IExchangeModifyTable *", 0, 0, (void*)"MAPICore::IExchangeModifyTable", 0};
static swig_type_info _swigt__p_IID = {"_p_IID", "IID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMAPIAdviseSink = {"_p_IMAPIAdviseSink", "IMAPIAdviseSink *", 0, 0, (void*)"MAPICore::IMAPIAdviseSink", 0};
static swig_type_info _swigt__p_IMAPIContainer = {"_p_IMAPIContainer", "IMAPIContainer *", 0, 0, (void*)"MAPICore::IMAPIContainer", 0};
static swig_type_info _swigt__p_IMAPIFolder = {"_p_IMAPIFolder", "IMAPIFolder *", 0, 0, (void*)"MAPICore::IMAPIFolder", 0};
static swig_type_info _swigt__p_IMAPIProgress = {"_p_IMAPIProgress", "IMAPIProgress *", 0, 0, (void*)"MAPICore::IMAPIProgress", 0};
static swig_type_info _swigt__p_IMAPIProp = {"_p_IMAPIProp", "IMAPIProp *", 0, 0, (void*)"MAPICore::IMAPIProp", 0};
static swig_type_info _swigt__p_IMAPISession = {"_p_IMAPISession", "IMAPISession *", 0, 0, (void*)"MAPICore::IMAPISession", 0};
static swig_type_info _swigt__p_IMAPIStatus = {"_p_IMAPIStatus", "IMAPIStatus *", 0, 0, (void*)"MAPICore::IMAPIStatus", 0};
static swig_type_info _swigt__p_IMAPITable = {"_p_IMAPITable", "IMAPITable *", 0, 0, (void*)"MAPICore::IMAPITable", 0};
static swig_type_info _swigt__p_IMailUser = {"_p_IMailUser", "IMailUser *", 0, 0, (void*)"MAPICore::IMailUser", 0};
static swig_type_info _swigt__p_IMessage = {"_p_IMessage", "IMessage *", 0, 0, (void*)"MAPICore::IMessage", 0};
static swig_type_info _swigt__p_IMsgServiceAdmin = {"_p_IMsgServiceAdmin", "IMsgServiceAdmin *", 0, 0, (void*)"MAPICore::IMsgServiceAdmin", 0};
static swig_type_info _swigt__p_IMsgStore = {"_p_IMsgStore", "IMsgStore *", 0, 0, (void*)"MAPICore::IMsgStore", 0};
static swig_type_info _swigt__p_IProfAdmin = {"_p_IProfAdmin", "IProfAdmin *", 0, 0, (void*)"MAPICore::IProfAdmin", 0};
static swig_type_info _swigt__p_IProfSect = {"_p_IProfSect", "IProfSect *", 0, 0, (void*)"MAPICore::IProfSect", 0};
static swig_type_info _swigt__p_IProviderAdmin = {"_p_IProviderAdmin", "IProviderAdmin *", 0, 0, (void*)"MAPICore::IProviderAdmin", 0};
static swig_type_info _swigt__p_IProxyStoreObject = {"_p_IProxyStoreObject", "IProxyStoreObject *", 0, 0, (void*)"MAPICore::IProxyStoreObject", 0};
static swig_type_info _swigt__p_ISequentialStream = {"_p_ISequentialStream", "ISequentialStream *", 0, 0, (void*)"MAPICore::ISequentialStream", 0};
static swig_type_info _swigt__p_IStream = {"_p_IStream", "IStream *", 0, 0, (void*)"MAPICore::IStream", 0};
static swig_type_info _swigt__p_IUnknown = {"_p_IUnknown", "IUnknown *", 0, 0, (void*)"MAPICore::IUnknown", 0};
static swig_type_info _swigt__p_LARGE_INTEGER = {"_p_LARGE_INTEGER", "LARGE_INTEGER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LONG = {"_p_LONG", "LONG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRENTRY = {"_p_LPADRENTRY", "LPADRENTRY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRLIST = {"_p_LPADRLIST", "LPADRLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPADRPARM = {"_p_LPADRPARM", "LPADRPARM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPBYTE = {"_p_LPBYTE", "LPBYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPCIID = {"_p_LPCIID", "LPCIID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECCOMPANY = {"_p_LPECCOMPANY", "LPECCOMPANY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECGROUP = {"_p_LPECGROUP", "LPECGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECQUOTA = {"_p_LPECQUOTA", "LPECQUOTA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECQUOTASTATUS = {"_p_LPECQUOTASTATUS", "LPECQUOTASTATUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECSERVERLIST = {"_p_LPECSERVERLIST", "LPECSERVERLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECSVRNAMELIST = {"_p_LPECSVRNAMELIST", "LPECSVRNAMELIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECUSER = {"_p_LPECUSER", "LPECUSER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPECUSERCLIENTUPDATESTATUS = {"_p_LPECUSERCLIENTUPDATESTATUS", "LPECUSERCLIENTUPDATESTATUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPENTRYID = {"_p_LPENTRYID", "LPENTRYID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPENTRYLIST = {"_p_LPENTRYLIST", "LPENTRYLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFNBUTTON = {"_p_LPFNBUTTON", "LPFNBUTTON *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFNDISMISS = {"_p_LPFNDISMISS", "LPFNDISMISS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPFlagList = {"_p_LPFlagList", "LPFlagList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPGUID = {"_p_LPGUID", "LPGUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIADVISESINK = {"_p_LPMAPIADVISESINK", "LPMAPIADVISESINK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIERROR = {"_p_LPMAPIERROR", "LPMAPIERROR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIFOLDER = {"_p_LPMAPIFOLDER", "LPMAPIFOLDER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPINAMEID = {"_p_LPMAPINAMEID", "LPMAPINAMEID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIPROP = {"_p_LPMAPIPROP", "LPMAPIPROP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPITABLE = {"_p_LPMAPITABLE", "LPMAPITABLE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMAPIUID = {"_p_LPMAPIUID", "LPMAPIUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMDB = {"_p_LPMDB", "LPMDB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPMESSAGE = {"_p_LPMESSAGE", "LPMESSAGE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPNOTIFICATION = {"_p_LPNOTIFICATION", "LPNOTIFICATION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPREADSTATE = {"_p_LPREADSTATE", "LPREADSTATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPROWLIST = {"_p_LPROWLIST", "LPROWLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropProblemArray = {"_p_LPSPropProblemArray", "LPSPropProblemArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropTagArray = {"_p_LPSPropTagArray", "LPSPropTagArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSPropValue = {"_p_LPSPropValue", "LPSPropValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSRestriction = {"_p_LPSRestriction", "LPSRestriction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSRowSet = {"_p_LPSRowSet", "LPSRowSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSSortOrderSet = {"_p_LPSSortOrderSet", "LPSSortOrderSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPSTR = {"_p_LPSTR", "LPSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPTSTR = {"_p_LPTSTR", "LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPUNKNOWN = {"_p_LPUNKNOWN", "LPUNKNOWN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPVOID = {"_p_LPVOID", "LPVOID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MAPIINIT_0 = {"_p_MAPIINIT_0", "MAPIINIT *|MAPIINIT_0 *", 0, 0, (void*)"MAPICore::MAPIINIT_0", 0};
static swig_type_info _swigt__p_MAPINotifSink = {"_p_MAPINotifSink", "MAPINotifSink *", 0, 0, (void*)"MAPICore::MAPINotifSink", 0};
static swig_type_info _swigt__p_STATSTG = {"_p_STATSTG", "STATSTG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ULARGE_INTEGER = {"_p_ULARGE_INTEGER", "ULARGE_INTEGER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ULONG = {"_p_ULONG", "ULONG *|BOOKMARK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IAddrBook = {"_p_p_IAddrBook", "IAddrBook **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IAttach = {"_p_p_IAttach", "IAttach **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPIFolder = {"_p_p_IMAPIFolder", "IMAPIFolder **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPISession = {"_p_p_IMAPISession", "IMAPISession **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPITable = {"_p_p_IMAPITable", "IMAPITable **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMessage = {"_p_p_IMessage", "IMessage **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMsgServiceAdmin = {"_p_p_IMsgServiceAdmin", "IMsgServiceAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMsgStore = {"_p_p_IMsgStore", "IMsgStore **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProfAdmin = {"_p_p_IProfAdmin", "IProfAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProfSect = {"_p_p_IProfSect", "IProfSect **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IProviderAdmin = {"_p_p_IProviderAdmin", "IProviderAdmin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IStream = {"_p_p_IStream", "IStream **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IUnknown = {"_p_p_IUnknown", "IUnknown **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_IMAPIStatus = {"_p_p_IMAPIStatus", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECSingleInstance = {"_p_p_IECSingleInstance", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeManageStore = {"_p_p_IExchangeManageStore", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMailUser = {"_p_p_IMailUser", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECImportContentsChanges = {"_p_p_IECImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECExportChanges = {"_p_p_IECExportChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeExportChanges = {"_p_p_IExchangeExportChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeImportHierarchyChanges = {"_p_p_IExchangeImportHierarchyChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeImportContentsChanges = {"_p_p_IExchangeImportContentsChanges", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECServiceAdmin = {"_p_p_IECServiceAdmin", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IExchangeModifyTable = {"_p_p_IExchangeModifyTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECChangeAdvisor = {"_p_p_IECChangeAdvisor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IDistList = {"_p_p_IDistList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECMultiStoreTable = {"_p_p_IECMultiStoreTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIContainer = {"_p_p_IMAPIContainer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IABContainer = {"_p_p_IABContainer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_ISequentialStream = {"_p_p_ISequentialStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECTestProtocol = {"_p_p_IECTestProtocol", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_MAPINotifSink = {"_p_p_MAPINotifSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IProxyStoreObject = {"_p_p_IProxyStoreObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECLicense = {"_p_p_IECLicense", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIProp = {"_p_p_IMAPIProp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIAdviseSink = {"_p_p_IMAPIAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IECChangeAdviseSink = {"_p_p_IECChangeAdviseSink", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_IMAPIProgress = {"_p_p_IMAPIProgress", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_LPMAPINAMEID = {"_p_p_LPMAPINAMEID", "LPMAPINAMEID **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_LPTSTR = {"_p_p_LPTSTR", "LPTSTR **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_MAPIERROR = {"_p_p_MAPIERROR", "MAPIERROR **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagLOCKTYPE = {"_p_tagLOCKTYPE", "enum tagLOCKTYPE *|LOCKTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTATFLAG = {"_p_tagSTATFLAG", "enum tagSTATFLAG *|STATFLAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTGTY = {"_p_tagSTGTY", "enum tagSTGTY *|STGTY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagSTREAM_SEEK = {"_p_tagSTREAM_SEEK", "enum tagSTREAM_SEEK *|STREAM_SEEK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BYTE,
  &_swigt__p_ECLogger,
  &_swigt__p_GUID,
  &_swigt__p_IABContainer,
  &_swigt__p_IAddrBook,
  &_swigt__p_IAttach,
  &_swigt__p_IDistList,
  &_swigt__p_IECChangeAdviseSink,
  &_swigt__p_IECChangeAdvisor,
  &_swigt__p_IECExportChanges,
  &_swigt__p_IECImportContentsChanges,
  &_swigt__p_IECLicense,
  &_swigt__p_IECMultiStoreTable,
  &_swigt__p_IECServiceAdmin,
  &_swigt__p_IECSingleInstance,
  &_swigt__p_IECSpooler,
  &_swigt__p_IECTestProtocol,
  &_swigt__p_IExchangeExportChanges,
  &_swigt__p_IExchangeImportContentsChanges,
  &_swigt__p_IExchangeImportHierarchyChanges,
  &_swigt__p_IExchangeManageStore,
  &_swigt__p_IExchangeModifyTable,
  &_swigt__p_IID,
  &_swigt__p_IMAPIAdviseSink,
  &_swigt__p_IMAPIContainer,
  &_swigt__p_IMAPIFolder,
  &_swigt__p_IMAPIProgress,
  &_swigt__p_IMAPIProp,
  &_swigt__p_IMAPISession,
  &_swigt__p_IMAPIStatus,
  &_swigt__p_IMAPITable,
  &_swigt__p_IMailUser,
  &_swigt__p_IMessage,
  &_swigt__p_IMsgServiceAdmin,
  &_swigt__p_IMsgStore,
  &_swigt__p_IProfAdmin,
  &_swigt__p_IProfSect,
  &_swigt__p_IProviderAdmin,
  &_swigt__p_IProxyStoreObject,
  &_swigt__p_ISequentialStream,
  &_swigt__p_IStream,
  &_swigt__p_IUnknown,
  &_swigt__p_LARGE_INTEGER,
  &_swigt__p_LONG,
  &_swigt__p_LPADRENTRY,
  &_swigt__p_LPADRLIST,
  &_swigt__p_LPADRPARM,
  &_swigt__p_LPBYTE,
  &_swigt__p_LPCIID,
  &_swigt__p_LPECCOMPANY,
  &_swigt__p_LPECGROUP,
  &_swigt__p_LPECQUOTA,
  &_swigt__p_LPECQUOTASTATUS,
  &_swigt__p_LPECSERVERLIST,
  &_swigt__p_LPECSVRNAMELIST,
  &_swigt__p_LPECUSER,
  &_swigt__p_LPECUSERCLIENTUPDATESTATUS,
  &_swigt__p_LPENTRYID,
  &_swigt__p_LPENTRYLIST,
  &_swigt__p_LPFNBUTTON,
  &_swigt__p_LPFNDISMISS,
  &_swigt__p_LPFlagList,
  &_swigt__p_LPGUID,
  &_swigt__p_LPMAPIADVISESINK,
  &_swigt__p_LPMAPIERROR,
  &_swigt__p_LPMAPIFOLDER,
  &_swigt__p_LPMAPINAMEID,
  &_swigt__p_LPMAPIPROP,
  &_swigt__p_LPMAPITABLE,
  &_swigt__p_LPMAPIUID,
  &_swigt__p_LPMDB,
  &_swigt__p_LPMESSAGE,
  &_swigt__p_LPNOTIFICATION,
  &_swigt__p_LPREADSTATE,
  &_swigt__p_LPROWLIST,
  &_swigt__p_LPSPropProblemArray,
  &_swigt__p_LPSPropTagArray,
  &_swigt__p_LPSPropValue,
  &_swigt__p_LPSRestriction,
  &_swigt__p_LPSRowSet,
  &_swigt__p_LPSSortOrderSet,
  &_swigt__p_LPSTR,
  &_swigt__p_LPTSTR,
  &_swigt__p_LPUNKNOWN,
  &_swigt__p_LPVOID,
  &_swigt__p_MAPIINIT_0,
  &_swigt__p_MAPINotifSink,
  &_swigt__p_STATSTG,
  &_swigt__p_ULARGE_INTEGER,
  &_swigt__p_ULONG,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_p_IABContainer,
  &_swigt__p_p_IAddrBook,
  &_swigt__p_p_IAttach,
  &_swigt__p_p_IDistList,
  &_swigt__p_p_IECChangeAdviseSink,
  &_swigt__p_p_IECChangeAdvisor,
  &_swigt__p_p_IECExportChanges,
  &_swigt__p_p_IECImportContentsChanges,
  &_swigt__p_p_IECLicense,
  &_swigt__p_p_IECMultiStoreTable,
  &_swigt__p_p_IECServiceAdmin,
  &_swigt__p_p_IECSingleInstance,
  &_swigt__p_p_IECTestProtocol,
  &_swigt__p_p_IExchangeExportChanges,
  &_swigt__p_p_IExchangeImportContentsChanges,
  &_swigt__p_p_IExchangeImportHierarchyChanges,
  &_swigt__p_p_IExchangeManageStore,
  &_swigt__p_p_IExchangeModifyTable,
  &_swigt__p_p_IMAPIAdviseSink,
  &_swigt__p_p_IMAPIContainer,
  &_swigt__p_p_IMAPIFolder,
  &_swigt__p_p_IMAPIProgress,
  &_swigt__p_p_IMAPIProp,
  &_swigt__p_p_IMAPISession,
  &_swigt__p_p_IMAPIStatus,
  &_swigt__p_p_IMAPITable,
  &_swigt__p_p_IMailUser,
  &_swigt__p_p_IMessage,
  &_swigt__p_p_IMsgServiceAdmin,
  &_swigt__p_p_IMsgStore,
  &_swigt__p_p_IProfAdmin,
  &_swigt__p_p_IProfSect,
  &_swigt__p_p_IProviderAdmin,
  &_swigt__p_p_IProxyStoreObject,
  &_swigt__p_p_ISequentialStream,
  &_swigt__p_p_IStream,
  &_swigt__p_p_IUnknown,
  &_swigt__p_p_LPMAPINAMEID,
  &_swigt__p_p_LPTSTR,
  &_swigt__p_p_MAPIERROR,
  &_swigt__p_p_MAPINotifSink,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_void,
  &_swigt__p_tagLOCKTYPE,
  &_swigt__p_tagSTATFLAG,
  &_swigt__p_tagSTGTY,
  &_swigt__p_tagSTREAM_SEEK,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_BYTE[] = {  {&_swigt__p_BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ECLogger[] = {  {&_swigt__p_ECLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GUID[] = {  {&_swigt__p_GUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IABContainer[] = {  {&_swigt__p_IABContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAddrBook[] = {  {&_swigt__p_IAddrBook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAttach[] = {  {&_swigt__p_IAttach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDistList[] = {  {&_swigt__p_IDistList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECChangeAdviseSink[] = {  {&_swigt__p_IECChangeAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECChangeAdvisor[] = {  {&_swigt__p_IECChangeAdvisor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECExportChanges[] = {  {&_swigt__p_IECExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECImportContentsChanges[] = {  {&_swigt__p_IECImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECLicense[] = {  {&_swigt__p_IECLicense, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECMultiStoreTable[] = {  {&_swigt__p_IECMultiStoreTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECServiceAdmin[] = {  {&_swigt__p_IECServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECSingleInstance[] = {  {&_swigt__p_IECSingleInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECSpooler[] = {  {&_swigt__p_IECSpooler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IECTestProtocol[] = {  {&_swigt__p_IECTestProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeExportChanges[] = {  {&_swigt__p_IExchangeExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeImportContentsChanges[] = {  {&_swigt__p_IExchangeImportContentsChanges, 0, 0, 0},  {&_swigt__p_IECImportContentsChanges, _p_IECImportContentsChangesTo_p_IExchangeImportContentsChanges, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeImportHierarchyChanges[] = {  {&_swigt__p_IExchangeImportHierarchyChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeManageStore[] = {  {&_swigt__p_IExchangeManageStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IExchangeModifyTable[] = {  {&_swigt__p_IExchangeModifyTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IID[] = {  {&_swigt__p_IID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIAdviseSink[] = {  {&_swigt__p_MAPINotifSink, _p_MAPINotifSinkTo_p_IMAPIAdviseSink, 0, 0},  {&_swigt__p_IMAPIAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIContainer[] = {  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IMAPIContainer, 0, 0},  {&_swigt__p_IMAPIContainer, 0, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IMAPIContainer, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IMAPIContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIFolder[] = {  {&_swigt__p_IMAPIFolder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIProgress[] = {  {&_swigt__p_IMAPIProgress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIProp[] = {  {&_swigt__p_IMAPIStatus, _p_IMAPIStatusTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMsgStore, _p_IMsgStoreTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMailUser, _p_IMailUserTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IAddrBook, _p_IAddrBookTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IAttach, _p_IAttachTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMessage, _p_IMessageTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IProfSect, _p_IProfSectTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIContainer, _p_IMAPIContainerTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IMAPIProp, 0, 0},  {&_swigt__p_IMAPIProp, 0, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IMAPIProp, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPISession[] = {  {&_swigt__p_IMAPISession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPIStatus[] = {  {&_swigt__p_IMAPIStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMAPITable[] = {  {&_swigt__p_IMAPITable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMailUser[] = {  {&_swigt__p_IMailUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMessage[] = {  {&_swigt__p_IMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMsgServiceAdmin[] = {  {&_swigt__p_IMsgServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMsgStore[] = {  {&_swigt__p_IMsgStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProfAdmin[] = {  {&_swigt__p_IProfAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProfSect[] = {  {&_swigt__p_IProfSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProviderAdmin[] = {  {&_swigt__p_IProviderAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProxyStoreObject[] = {  {&_swigt__p_IProxyStoreObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISequentialStream[] = {  {&_swigt__p_IStream, _p_IStreamTo_p_ISequentialStream, 0, 0},  {&_swigt__p_ISequentialStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IStream[] = {  {&_swigt__p_IStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IUnknown[] = {  {&_swigt__p_IMAPIStatus, _p_IMAPIStatusTo_p_IUnknown, 0, 0},  {&_swigt__p_IECSingleInstance, _p_IECSingleInstanceTo_p_IUnknown, 0, 0},  {&_swigt__p_IAddrBook, _p_IAddrBookTo_p_IUnknown, 0, 0},  {&_swigt__p_IMessage, _p_IMessageTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeManageStore, _p_IExchangeManageStoreTo_p_IUnknown, 0, 0},  {&_swigt__p_IMailUser, _p_IMailUserTo_p_IUnknown, 0, 0},  {&_swigt__p_IMsgStore, _p_IMsgStoreTo_p_IUnknown, 0, 0},  {&_swigt__p_IECImportContentsChanges, _p_IECImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IECExportChanges, _p_IECExportChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeExportChanges, _p_IExchangeExportChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeImportHierarchyChanges, _p_IExchangeImportHierarchyChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeImportContentsChanges, _p_IExchangeImportContentsChangesTo_p_IUnknown, 0, 0},  {&_swigt__p_IMsgServiceAdmin, _p_IMsgServiceAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IECServiceAdmin, _p_IECServiceAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IUnknown, 0, 0, 0},  {&_swigt__p_IProviderAdmin, _p_IProviderAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IAttach, _p_IAttachTo_p_IUnknown, 0, 0},  {&_swigt__p_IExchangeModifyTable, _p_IExchangeModifyTableTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPITable, _p_IMAPITableTo_p_IUnknown, 0, 0},  {&_swigt__p_IECChangeAdvisor, _p_IECChangeAdvisorTo_p_IUnknown, 0, 0},  {&_swigt__p_IDistList, _p_IDistListTo_p_IUnknown, 0, 0},  {&_swigt__p_IECMultiStoreTable, _p_IECMultiStoreTableTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIContainer, _p_IMAPIContainerTo_p_IUnknown, 0, 0},  {&_swigt__p_IABContainer, _p_IABContainerTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPISession, _p_IMAPISessionTo_p_IUnknown, 0, 0},  {&_swigt__p_ISequentialStream, _p_ISequentialStreamTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIFolder, _p_IMAPIFolderTo_p_IUnknown, 0, 0},  {&_swigt__p_IECTestProtocol, _p_IECTestProtocolTo_p_IUnknown, 0, 0},  {&_swigt__p_MAPINotifSink, _p_MAPINotifSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IProxyStoreObject, _p_IProxyStoreObjectTo_p_IUnknown, 0, 0},  {&_swigt__p_IECLicense, _p_IECLicenseTo_p_IUnknown, 0, 0},  {&_swigt__p_IProfAdmin, _p_IProfAdminTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIProp, _p_IMAPIPropTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIAdviseSink, _p_IMAPIAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IECChangeAdviseSink, _p_IECChangeAdviseSinkTo_p_IUnknown, 0, 0},  {&_swigt__p_IMAPIProgress, _p_IMAPIProgressTo_p_IUnknown, 0, 0},  {&_swigt__p_IStream, _p_IStreamTo_p_IUnknown, 0, 0},  {&_swigt__p_IProfSect, _p_IProfSectTo_p_IUnknown, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LARGE_INTEGER[] = {  {&_swigt__p_LARGE_INTEGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LONG[] = {  {&_swigt__p_LONG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRENTRY[] = {  {&_swigt__p_LPADRENTRY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRLIST[] = {  {&_swigt__p_LPADRLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPADRPARM[] = {  {&_swigt__p_LPADRPARM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPBYTE[] = {  {&_swigt__p_LPBYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPCIID[] = {  {&_swigt__p_LPCIID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECCOMPANY[] = {  {&_swigt__p_LPECCOMPANY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECGROUP[] = {  {&_swigt__p_LPECGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECQUOTA[] = {  {&_swigt__p_LPECQUOTA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECQUOTASTATUS[] = {  {&_swigt__p_LPECQUOTASTATUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECSERVERLIST[] = {  {&_swigt__p_LPECSERVERLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECSVRNAMELIST[] = {  {&_swigt__p_LPECSVRNAMELIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECUSER[] = {  {&_swigt__p_LPECUSER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPECUSERCLIENTUPDATESTATUS[] = {  {&_swigt__p_LPECUSERCLIENTUPDATESTATUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPENTRYID[] = {  {&_swigt__p_LPENTRYID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPENTRYLIST[] = {  {&_swigt__p_LPENTRYLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFNBUTTON[] = {  {&_swigt__p_LPFNBUTTON, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFNDISMISS[] = {  {&_swigt__p_LPFNDISMISS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPFlagList[] = {  {&_swigt__p_LPFlagList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPGUID[] = {  {&_swigt__p_LPGUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIADVISESINK[] = {  {&_swigt__p_LPMAPIADVISESINK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIERROR[] = {  {&_swigt__p_LPMAPIERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIFOLDER[] = {  {&_swigt__p_LPMAPIFOLDER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPINAMEID[] = {  {&_swigt__p_LPMAPINAMEID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIPROP[] = {  {&_swigt__p_LPMAPIPROP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPITABLE[] = {  {&_swigt__p_LPMAPITABLE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMAPIUID[] = {  {&_swigt__p_LPMAPIUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMDB[] = {  {&_swigt__p_LPMDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPMESSAGE[] = {  {&_swigt__p_LPMESSAGE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPNOTIFICATION[] = {  {&_swigt__p_LPNOTIFICATION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPREADSTATE[] = {  {&_swigt__p_LPREADSTATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPROWLIST[] = {  {&_swigt__p_LPROWLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropProblemArray[] = {  {&_swigt__p_LPSPropProblemArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropTagArray[] = {  {&_swigt__p_LPSPropTagArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSPropValue[] = {  {&_swigt__p_LPSPropValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSRestriction[] = {  {&_swigt__p_LPSRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSRowSet[] = {  {&_swigt__p_LPSRowSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSSortOrderSet[] = {  {&_swigt__p_LPSSortOrderSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPSTR[] = {  {&_swigt__p_LPSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPTSTR[] = {  {&_swigt__p_LPTSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPUNKNOWN[] = {  {&_swigt__p_LPUNKNOWN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPVOID[] = {  {&_swigt__p_LPVOID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MAPIINIT_0[] = {  {&_swigt__p_MAPIINIT_0, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MAPINotifSink[] = {  {&_swigt__p_MAPINotifSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_STATSTG[] = {  {&_swigt__p_STATSTG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ULARGE_INTEGER[] = {  {&_swigt__p_ULARGE_INTEGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ULONG[] = {  {&_swigt__p_ULONG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IAddrBook[] = {  {&_swigt__p_p_IAddrBook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IAttach[] = {  {&_swigt__p_p_IAttach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIFolder[] = {  {&_swigt__p_p_IMAPIFolder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPISession[] = {  {&_swigt__p_p_IMAPISession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPITable[] = {  {&_swigt__p_p_IMAPITable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMessage[] = {  {&_swigt__p_p_IMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMsgServiceAdmin[] = {  {&_swigt__p_p_IMsgServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMsgStore[] = {  {&_swigt__p_p_IMsgStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProfAdmin[] = {  {&_swigt__p_p_IProfAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProfSect[] = {  {&_swigt__p_p_IProfSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProviderAdmin[] = {  {&_swigt__p_p_IProviderAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IStream[] = {  {&_swigt__p_p_IStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIStatus[] = {{&_swigt__p_p_IMAPIStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECSingleInstance[] = {{&_swigt__p_p_IECSingleInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeManageStore[] = {{&_swigt__p_p_IExchangeManageStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMailUser[] = {{&_swigt__p_p_IMailUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECImportContentsChanges[] = {{&_swigt__p_p_IECImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECExportChanges[] = {{&_swigt__p_p_IECExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeExportChanges[] = {{&_swigt__p_p_IExchangeExportChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeImportHierarchyChanges[] = {{&_swigt__p_p_IExchangeImportHierarchyChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeImportContentsChanges[] = {{&_swigt__p_p_IExchangeImportContentsChanges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECServiceAdmin[] = {{&_swigt__p_p_IECServiceAdmin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IExchangeModifyTable[] = {{&_swigt__p_p_IExchangeModifyTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECChangeAdvisor[] = {{&_swigt__p_p_IECChangeAdvisor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IDistList[] = {{&_swigt__p_p_IDistList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECMultiStoreTable[] = {{&_swigt__p_p_IECMultiStoreTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIContainer[] = {{&_swigt__p_p_IMAPIContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IABContainer[] = {{&_swigt__p_p_IABContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ISequentialStream[] = {{&_swigt__p_p_ISequentialStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECTestProtocol[] = {{&_swigt__p_p_IECTestProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MAPINotifSink[] = {{&_swigt__p_p_MAPINotifSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IProxyStoreObject[] = {{&_swigt__p_p_IProxyStoreObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECLicense[] = {{&_swigt__p_p_IECLicense, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIProp[] = {{&_swigt__p_p_IMAPIProp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIAdviseSink[] = {{&_swigt__p_p_IMAPIAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IECChangeAdviseSink[] = {{&_swigt__p_p_IECChangeAdviseSink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IMAPIProgress[] = {{&_swigt__p_p_IMAPIProgress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_IUnknown[] = {  {&_swigt__p_p_IMAPIStatus, _p_p_IMAPIStatusTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECSingleInstance, _p_p_IECSingleInstanceTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IAddrBook, _p_p_IAddrBookTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMessage, _p_p_IMessageTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeManageStore, _p_p_IExchangeManageStoreTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMailUser, _p_p_IMailUserTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMsgStore, _p_p_IMsgStoreTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECImportContentsChanges, _p_p_IECImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECExportChanges, _p_p_IECExportChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeExportChanges, _p_p_IExchangeExportChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeImportHierarchyChanges, _p_p_IExchangeImportHierarchyChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeImportContentsChanges, _p_p_IExchangeImportContentsChangesTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMsgServiceAdmin, _p_p_IMsgServiceAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECServiceAdmin, _p_p_IECServiceAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IUnknown, 0, 0, 0},  {&_swigt__p_p_IProviderAdmin, _p_p_IProviderAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IAttach, _p_p_IAttachTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IExchangeModifyTable, _p_p_IExchangeModifyTableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPITable, _p_p_IMAPITableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECChangeAdvisor, _p_p_IECChangeAdvisorTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IDistList, _p_p_IDistListTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECMultiStoreTable, _p_p_IECMultiStoreTableTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIContainer, _p_p_IMAPIContainerTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IABContainer, _p_p_IABContainerTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPISession, _p_p_IMAPISessionTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_ISequentialStream, _p_p_ISequentialStreamTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIFolder, _p_p_IMAPIFolderTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECTestProtocol, _p_p_IECTestProtocolTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_MAPINotifSink, _p_p_MAPINotifSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProxyStoreObject, _p_p_IProxyStoreObjectTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECLicense, _p_p_IECLicenseTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProfAdmin, _p_p_IProfAdminTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIProp, _p_p_IMAPIPropTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIAdviseSink, _p_p_IMAPIAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IECChangeAdviseSink, _p_p_IECChangeAdviseSinkTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IMAPIProgress, _p_p_IMAPIProgressTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IProfSect, _p_p_IProfSectTo_p_p_IUnknown, 0, 0},  {&_swigt__p_p_IStream, _p_p_IStreamTo_p_p_IUnknown, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_LPMAPINAMEID[] = {  {&_swigt__p_p_LPMAPINAMEID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_LPTSTR[] = {  {&_swigt__p_p_LPTSTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MAPIERROR[] = {  {&_swigt__p_p_MAPIERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagLOCKTYPE[] = {  {&_swigt__p_tagLOCKTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTATFLAG[] = {  {&_swigt__p_tagSTATFLAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTGTY[] = {  {&_swigt__p_tagSTGTY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagSTREAM_SEEK[] = {  {&_swigt__p_tagSTREAM_SEEK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BYTE,
  _swigc__p_ECLogger,
  _swigc__p_GUID,
  _swigc__p_IABContainer,
  _swigc__p_IAddrBook,
  _swigc__p_IAttach,
  _swigc__p_IDistList,
  _swigc__p_IECChangeAdviseSink,
  _swigc__p_IECChangeAdvisor,
  _swigc__p_IECExportChanges,
  _swigc__p_IECImportContentsChanges,
  _swigc__p_IECLicense,
  _swigc__p_IECMultiStoreTable,
  _swigc__p_IECServiceAdmin,
  _swigc__p_IECSingleInstance,
  _swigc__p_IECSpooler,
  _swigc__p_IECTestProtocol,
  _swigc__p_IExchangeExportChanges,
  _swigc__p_IExchangeImportContentsChanges,
  _swigc__p_IExchangeImportHierarchyChanges,
  _swigc__p_IExchangeManageStore,
  _swigc__p_IExchangeModifyTable,
  _swigc__p_IID,
  _swigc__p_IMAPIAdviseSink,
  _swigc__p_IMAPIContainer,
  _swigc__p_IMAPIFolder,
  _swigc__p_IMAPIProgress,
  _swigc__p_IMAPIProp,
  _swigc__p_IMAPISession,
  _swigc__p_IMAPIStatus,
  _swigc__p_IMAPITable,
  _swigc__p_IMailUser,
  _swigc__p_IMessage,
  _swigc__p_IMsgServiceAdmin,
  _swigc__p_IMsgStore,
  _swigc__p_IProfAdmin,
  _swigc__p_IProfSect,
  _swigc__p_IProviderAdmin,
  _swigc__p_IProxyStoreObject,
  _swigc__p_ISequentialStream,
  _swigc__p_IStream,
  _swigc__p_IUnknown,
  _swigc__p_LARGE_INTEGER,
  _swigc__p_LONG,
  _swigc__p_LPADRENTRY,
  _swigc__p_LPADRLIST,
  _swigc__p_LPADRPARM,
  _swigc__p_LPBYTE,
  _swigc__p_LPCIID,
  _swigc__p_LPECCOMPANY,
  _swigc__p_LPECGROUP,
  _swigc__p_LPECQUOTA,
  _swigc__p_LPECQUOTASTATUS,
  _swigc__p_LPECSERVERLIST,
  _swigc__p_LPECSVRNAMELIST,
  _swigc__p_LPECUSER,
  _swigc__p_LPECUSERCLIENTUPDATESTATUS,
  _swigc__p_LPENTRYID,
  _swigc__p_LPENTRYLIST,
  _swigc__p_LPFNBUTTON,
  _swigc__p_LPFNDISMISS,
  _swigc__p_LPFlagList,
  _swigc__p_LPGUID,
  _swigc__p_LPMAPIADVISESINK,
  _swigc__p_LPMAPIERROR,
  _swigc__p_LPMAPIFOLDER,
  _swigc__p_LPMAPINAMEID,
  _swigc__p_LPMAPIPROP,
  _swigc__p_LPMAPITABLE,
  _swigc__p_LPMAPIUID,
  _swigc__p_LPMDB,
  _swigc__p_LPMESSAGE,
  _swigc__p_LPNOTIFICATION,
  _swigc__p_LPREADSTATE,
  _swigc__p_LPROWLIST,
  _swigc__p_LPSPropProblemArray,
  _swigc__p_LPSPropTagArray,
  _swigc__p_LPSPropValue,
  _swigc__p_LPSRestriction,
  _swigc__p_LPSRowSet,
  _swigc__p_LPSSortOrderSet,
  _swigc__p_LPSTR,
  _swigc__p_LPTSTR,
  _swigc__p_LPUNKNOWN,
  _swigc__p_LPVOID,
  _swigc__p_MAPIINIT_0,
  _swigc__p_MAPINotifSink,
  _swigc__p_STATSTG,
  _swigc__p_ULARGE_INTEGER,
  _swigc__p_ULONG,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_p_IABContainer,
  _swigc__p_p_IAddrBook,
  _swigc__p_p_IAttach,
  _swigc__p_p_IDistList,
  _swigc__p_p_IECChangeAdviseSink,
  _swigc__p_p_IECChangeAdvisor,
  _swigc__p_p_IECExportChanges,
  _swigc__p_p_IECImportContentsChanges,
  _swigc__p_p_IECLicense,
  _swigc__p_p_IECMultiStoreTable,
  _swigc__p_p_IECServiceAdmin,
  _swigc__p_p_IECSingleInstance,
  _swigc__p_p_IECTestProtocol,
  _swigc__p_p_IExchangeExportChanges,
  _swigc__p_p_IExchangeImportContentsChanges,
  _swigc__p_p_IExchangeImportHierarchyChanges,
  _swigc__p_p_IExchangeManageStore,
  _swigc__p_p_IExchangeModifyTable,
  _swigc__p_p_IMAPIAdviseSink,
  _swigc__p_p_IMAPIContainer,
  _swigc__p_p_IMAPIFolder,
  _swigc__p_p_IMAPIProgress,
  _swigc__p_p_IMAPIProp,
  _swigc__p_p_IMAPISession,
  _swigc__p_p_IMAPIStatus,
  _swigc__p_p_IMAPITable,
  _swigc__p_p_IMailUser,
  _swigc__p_p_IMessage,
  _swigc__p_p_IMsgServiceAdmin,
  _swigc__p_p_IMsgStore,
  _swigc__p_p_IProfAdmin,
  _swigc__p_p_IProfSect,
  _swigc__p_p_IProviderAdmin,
  _swigc__p_p_IProxyStoreObject,
  _swigc__p_p_ISequentialStream,
  _swigc__p_p_IStream,
  _swigc__p_p_IUnknown,
  _swigc__p_p_LPMAPINAMEID,
  _swigc__p_p_LPTSTR,
  _swigc__p_p_MAPIERROR,
  _swigc__p_p_MAPINotifSink,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_void,
  _swigc__p_tagLOCKTYPE,
  _swigc__p_tagSTATFLAG,
  _swigc__p_tagSTGTY,
  _swigc__p_tagSTREAM_SEEK,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"MAPICorec::IUnknown_QueryInterface", _wrap_IUnknown_QueryInterface},
{"MAPICorec::delete_IUnknown", _wrap_delete_IUnknown},
{"MAPICorec::ISequentialStream_Write", _wrap_ISequentialStream_Write},
{"MAPICorec::ISequentialStream_Read", _wrap_ISequentialStream_Read},
{"MAPICorec::delete_ISequentialStream", _wrap_delete_ISequentialStream},
{"MAPICorec::IStream_Seek", _wrap_IStream_Seek},
{"MAPICorec::IStream_SetSize", _wrap_IStream_SetSize},
{"MAPICorec::IStream_CopyTo", _wrap_IStream_CopyTo},
{"MAPICorec::IStream_Commit", _wrap_IStream_Commit},
{"MAPICorec::IStream_Revert", _wrap_IStream_Revert},
{"MAPICorec::IStream_LockRegion", _wrap_IStream_LockRegion},
{"MAPICorec::IStream_UnlockRegion", _wrap_IStream_UnlockRegion},
{"MAPICorec::IStream_Stat", _wrap_IStream_Stat},
{"MAPICorec::IStream_Clone", _wrap_IStream_Clone},
{"MAPICorec::new_IStream", _wrap_new_IStream},
{"MAPICorec::delete_IStream", _wrap_delete_IStream},
{"MAPICorec::IMAPIProp_GetLastError", _wrap_IMAPIProp_GetLastError},
{"MAPICorec::IMAPIProp_SaveChanges", _wrap_IMAPIProp_SaveChanges},
{"MAPICorec::IMAPIProp_GetProps", _wrap_IMAPIProp_GetProps},
{"MAPICorec::IMAPIProp_GetPropList", _wrap_IMAPIProp_GetPropList},
{"MAPICorec::IMAPIProp_OpenProperty", _wrap_IMAPIProp_OpenProperty},
{"MAPICorec::IMAPIProp_SetProps", _wrap_IMAPIProp_SetProps},
{"MAPICorec::IMAPIProp_DeleteProps", _wrap_IMAPIProp_DeleteProps},
{"MAPICorec::IMAPIProp_CopyTo", _wrap_IMAPIProp_CopyTo},
{"MAPICorec::IMAPIProp_CopyProps", _wrap_IMAPIProp_CopyProps},
{"MAPICorec::IMAPIProp_GetNamesFromIDs", _wrap_IMAPIProp_GetNamesFromIDs},
{"MAPICorec::IMAPIProp_GetIDsFromNames", _wrap_IMAPIProp_GetIDsFromNames},
{"MAPICorec::delete_IMAPIProp", _wrap_delete_IMAPIProp},
{"MAPICorec::IMAPIContainer_GetContentsTable", _wrap_IMAPIContainer_GetContentsTable},
{"MAPICorec::IMAPIContainer_GetHierarchyTable", _wrap_IMAPIContainer_GetHierarchyTable},
{"MAPICorec::IMAPIContainer_OpenEntry", _wrap_IMAPIContainer_OpenEntry},
{"MAPICorec::IMAPIContainer_SetSearchCriteria", _wrap_IMAPIContainer_SetSearchCriteria},
{"MAPICorec::IMAPIContainer_GetSearchCriteria", _wrap_IMAPIContainer_GetSearchCriteria},
{"MAPICorec::delete_IMAPIContainer", _wrap_delete_IMAPIContainer},
{"MAPICorec::IMAPIAdviseSink_OnNotify", _wrap_IMAPIAdviseSink_OnNotify},
{"MAPICorec::delete_IMAPIAdviseSink", _wrap_delete_IMAPIAdviseSink},
{"MAPICorec::IMsgStore_Advise", _wrap_IMsgStore_Advise},
{"MAPICorec::IMsgStore_Unadvise", _wrap_IMsgStore_Unadvise},
{"MAPICorec::IMsgStore_CompareEntryIDs", _wrap_IMsgStore_CompareEntryIDs},
{"MAPICorec::IMsgStore_OpenEntry", _wrap_IMsgStore_OpenEntry},
{"MAPICorec::IMsgStore_SetReceiveFolder", _wrap_IMsgStore_SetReceiveFolder},
{"MAPICorec::IMsgStore_GetReceiveFolder", _wrap_IMsgStore_GetReceiveFolder},
{"MAPICorec::IMsgStore_GetReceiveFolderTable", _wrap_IMsgStore_GetReceiveFolderTable},
{"MAPICorec::IMsgStore_StoreLogoff", _wrap_IMsgStore_StoreLogoff},
{"MAPICorec::IMsgStore_AbortSubmit", _wrap_IMsgStore_AbortSubmit},
{"MAPICorec::IMsgStore_GetOutgoingQueue", _wrap_IMsgStore_GetOutgoingQueue},
{"MAPICorec::IMsgStore_SetLockState", _wrap_IMsgStore_SetLockState},
{"MAPICorec::IMsgStore_FinishedMsg", _wrap_IMsgStore_FinishedMsg},
{"MAPICorec::IMsgStore_NotifyNewMail", _wrap_IMsgStore_NotifyNewMail},
{"MAPICorec::delete_IMsgStore", _wrap_delete_IMsgStore},
{"MAPICorec::IProxyStoreObject_PlaceHolder1", _wrap_IProxyStoreObject_PlaceHolder1},
{"MAPICorec::IProxyStoreObject_PlaceHolder2", _wrap_IProxyStoreObject_PlaceHolder2},
{"MAPICorec::delete_IProxyStoreObject", _wrap_delete_IProxyStoreObject},
{"MAPICorec::IProxyStoreObject_UnwrapNoRef", _wrap_IProxyStoreObject_UnwrapNoRef},
{"MAPICorec::IMAPIFolder_CreateMessage", _wrap_IMAPIFolder_CreateMessage},
{"MAPICorec::IMAPIFolder_CopyMessages", _wrap_IMAPIFolder_CopyMessages},
{"MAPICorec::IMAPIFolder_DeleteMessages", _wrap_IMAPIFolder_DeleteMessages},
{"MAPICorec::IMAPIFolder_CreateFolder", _wrap_IMAPIFolder_CreateFolder},
{"MAPICorec::IMAPIFolder_CopyFolder", _wrap_IMAPIFolder_CopyFolder},
{"MAPICorec::IMAPIFolder_DeleteFolder", _wrap_IMAPIFolder_DeleteFolder},
{"MAPICorec::IMAPIFolder_SetReadFlags", _wrap_IMAPIFolder_SetReadFlags},
{"MAPICorec::IMAPIFolder_GetMessageStatus", _wrap_IMAPIFolder_GetMessageStatus},
{"MAPICorec::IMAPIFolder_SetMessageStatus", _wrap_IMAPIFolder_SetMessageStatus},
{"MAPICorec::IMAPIFolder_SaveContentsSort", _wrap_IMAPIFolder_SaveContentsSort},
{"MAPICorec::IMAPIFolder_EmptyFolder", _wrap_IMAPIFolder_EmptyFolder},
{"MAPICorec::delete_IMAPIFolder", _wrap_delete_IMAPIFolder},
{"MAPICorec::IMessage_GetAttachmentTable", _wrap_IMessage_GetAttachmentTable},
{"MAPICorec::IMessage_OpenAttach", _wrap_IMessage_OpenAttach},
{"MAPICorec::IMessage_CreateAttach", _wrap_IMessage_CreateAttach},
{"MAPICorec::IMessage_DeleteAttach", _wrap_IMessage_DeleteAttach},
{"MAPICorec::IMessage_GetRecipientTable", _wrap_IMessage_GetRecipientTable},
{"MAPICorec::IMessage_ModifyRecipients", _wrap_IMessage_ModifyRecipients},
{"MAPICorec::IMessage_SubmitMessage", _wrap_IMessage_SubmitMessage},
{"MAPICorec::IMessage_SetReadFlag", _wrap_IMessage_SetReadFlag},
{"MAPICorec::delete_IMessage", _wrap_delete_IMessage},
{"MAPICorec::delete_IAttach", _wrap_delete_IAttach},
{"MAPICorec::IABContainer_CreateEntry", _wrap_IABContainer_CreateEntry},
{"MAPICorec::IABContainer_CopyEntries", _wrap_IABContainer_CopyEntries},
{"MAPICorec::IABContainer_DeleteEntries", _wrap_IABContainer_DeleteEntries},
{"MAPICorec::IABContainer_ResolveNames", _wrap_IABContainer_ResolveNames},
{"MAPICorec::delete_IABContainer", _wrap_delete_IABContainer},
{"MAPICorec::delete_IMailUser", _wrap_delete_IMailUser},
{"MAPICorec::IDistList_CreateEntry", _wrap_IDistList_CreateEntry},
{"MAPICorec::IDistList_CopyEntries", _wrap_IDistList_CopyEntries},
{"MAPICorec::IDistList_DeleteEntries", _wrap_IDistList_DeleteEntries},
{"MAPICorec::IDistList_ResolveNames", _wrap_IDistList_ResolveNames},
{"MAPICorec::delete_IDistList", _wrap_delete_IDistList},
{"MAPICorec::IMAPIStatus_ValidateState", _wrap_IMAPIStatus_ValidateState},
{"MAPICorec::IMAPIStatus_SettingsDialog", _wrap_IMAPIStatus_SettingsDialog},
{"MAPICorec::IMAPIStatus_ChangePassword", _wrap_IMAPIStatus_ChangePassword},
{"MAPICorec::IMAPIStatus_FlushQueues", _wrap_IMAPIStatus_FlushQueues},
{"MAPICorec::delete_IMAPIStatus", _wrap_delete_IMAPIStatus},
{"MAPICorec::IMAPITable_GetLastError", _wrap_IMAPITable_GetLastError},
{"MAPICorec::IMAPITable_Advise", _wrap_IMAPITable_Advise},
{"MAPICorec::IMAPITable_Unadvise", _wrap_IMAPITable_Unadvise},
{"MAPICorec::IMAPITable_GetStatus", _wrap_IMAPITable_GetStatus},
{"MAPICorec::IMAPITable_SetColumns", _wrap_IMAPITable_SetColumns},
{"MAPICorec::IMAPITable_QueryColumns", _wrap_IMAPITable_QueryColumns},
{"MAPICorec::IMAPITable_GetRowCount", _wrap_IMAPITable_GetRowCount},
{"MAPICorec::IMAPITable_SeekRow", _wrap_IMAPITable_SeekRow},
{"MAPICorec::IMAPITable_SeekRowApprox", _wrap_IMAPITable_SeekRowApprox},
{"MAPICorec::IMAPITable_QueryPosition", _wrap_IMAPITable_QueryPosition},
{"MAPICorec::IMAPITable_FindRow", _wrap_IMAPITable_FindRow},
{"MAPICorec::IMAPITable_Restrict", _wrap_IMAPITable_Restrict},
{"MAPICorec::IMAPITable_CreateBookmark", _wrap_IMAPITable_CreateBookmark},
{"MAPICorec::IMAPITable_FreeBookmark", _wrap_IMAPITable_FreeBookmark},
{"MAPICorec::IMAPITable_SortTable", _wrap_IMAPITable_SortTable},
{"MAPICorec::IMAPITable_QuerySortOrder", _wrap_IMAPITable_QuerySortOrder},
{"MAPICorec::IMAPITable_QueryRows", _wrap_IMAPITable_QueryRows},
{"MAPICorec::IMAPITable_Abort", _wrap_IMAPITable_Abort},
{"MAPICorec::IMAPITable_ExpandRow", _wrap_IMAPITable_ExpandRow},
{"MAPICorec::IMAPITable_CollapseRow", _wrap_IMAPITable_CollapseRow},
{"MAPICorec::IMAPITable_WaitForCompletion", _wrap_IMAPITable_WaitForCompletion},
{"MAPICorec::IMAPITable_GetCollapseState", _wrap_IMAPITable_GetCollapseState},
{"MAPICorec::IMAPITable_SetCollapseState", _wrap_IMAPITable_SetCollapseState},
{"MAPICorec::delete_IMAPITable", _wrap_delete_IMAPITable},
{"MAPICorec::delete_IProfSect", _wrap_delete_IProfSect},
{"MAPICorec::IMAPIProgress_Progress", _wrap_IMAPIProgress_Progress},
{"MAPICorec::IMAPIProgress_GetFlags", _wrap_IMAPIProgress_GetFlags},
{"MAPICorec::IMAPIProgress_GetMax", _wrap_IMAPIProgress_GetMax},
{"MAPICorec::IMAPIProgress_GetMin", _wrap_IMAPIProgress_GetMin},
{"MAPICorec::IMAPIProgress_SetLimits", _wrap_IMAPIProgress_SetLimits},
{"MAPICorec::delete_IMAPIProgress", _wrap_delete_IMAPIProgress},
{"MAPICorec::IProviderAdmin_GetLastError", _wrap_IProviderAdmin_GetLastError},
{"MAPICorec::IProviderAdmin_GetProviderTable", _wrap_IProviderAdmin_GetProviderTable},
{"MAPICorec::IProviderAdmin_CreateProvider", _wrap_IProviderAdmin_CreateProvider},
{"MAPICorec::IProviderAdmin_DeleteProvider", _wrap_IProviderAdmin_DeleteProvider},
{"MAPICorec::IProviderAdmin_OpenProfileSection", _wrap_IProviderAdmin_OpenProfileSection},
{"MAPICorec::delete_IProviderAdmin", _wrap_delete_IProviderAdmin},
{"MAPICorec::MAPIINIT_0_ulVersion_set", _wrap_MAPIINIT_0_ulVersion_set},
{"MAPICorec::MAPIINIT_0_ulVersion_get", _wrap_MAPIINIT_0_ulVersion_get},
{"MAPICorec::MAPIINIT_0_ulFlags_set", _wrap_MAPIINIT_0_ulFlags_set},
{"MAPICorec::MAPIINIT_0_ulFlags_get", _wrap_MAPIINIT_0_ulFlags_get},
{"MAPICorec::new_MAPIINIT_0", _wrap_new_MAPIINIT_0},
{"MAPICorec::delete_MAPIINIT_0", _wrap_delete_MAPIINIT_0},
{"MAPICorec::MAPIInitialize", _wrap_MAPIInitialize},
{"MAPICorec::MAPIUninitialize", _wrap_MAPIUninitialize},
{"MAPICorec::MAPILogonEx", _wrap_MAPILogonEx},
{"MAPICorec::MAPIAdminProfiles", _wrap_MAPIAdminProfiles},
{"MAPICorec::IMAPISession_GetLastError", _wrap_IMAPISession_GetLastError},
{"MAPICorec::IMAPISession_GetMsgStoresTable", _wrap_IMAPISession_GetMsgStoresTable},
{"MAPICorec::IMAPISession_OpenMsgStore", _wrap_IMAPISession_OpenMsgStore},
{"MAPICorec::IMAPISession_OpenAddressBook", _wrap_IMAPISession_OpenAddressBook},
{"MAPICorec::IMAPISession_OpenProfileSection", _wrap_IMAPISession_OpenProfileSection},
{"MAPICorec::IMAPISession_GetStatusTable", _wrap_IMAPISession_GetStatusTable},
{"MAPICorec::IMAPISession_OpenEntry", _wrap_IMAPISession_OpenEntry},
{"MAPICorec::IMAPISession_CompareEntryIDs", _wrap_IMAPISession_CompareEntryIDs},
{"MAPICorec::IMAPISession_Advise", _wrap_IMAPISession_Advise},
{"MAPICorec::IMAPISession_Unadvise", _wrap_IMAPISession_Unadvise},
{"MAPICorec::IMAPISession_MessageOptions", _wrap_IMAPISession_MessageOptions},
{"MAPICorec::IMAPISession_QueryDefaultMessageOpt", _wrap_IMAPISession_QueryDefaultMessageOpt},
{"MAPICorec::IMAPISession_EnumAdrTypes", _wrap_IMAPISession_EnumAdrTypes},
{"MAPICorec::IMAPISession_QueryIdentity", _wrap_IMAPISession_QueryIdentity},
{"MAPICorec::IMAPISession_Logoff", _wrap_IMAPISession_Logoff},
{"MAPICorec::IMAPISession_SetDefaultStore", _wrap_IMAPISession_SetDefaultStore},
{"MAPICorec::IMAPISession_AdminServices", _wrap_IMAPISession_AdminServices},
{"MAPICorec::IMAPISession_ShowForm", _wrap_IMAPISession_ShowForm},
{"MAPICorec::IMAPISession_PrepareForm", _wrap_IMAPISession_PrepareForm},
{"MAPICorec::delete_IMAPISession", _wrap_delete_IMAPISession},
{"MAPICorec::IAddrBook_OpenEntry", _wrap_IAddrBook_OpenEntry},
{"MAPICorec::IAddrBook_CompareEntryIDs", _wrap_IAddrBook_CompareEntryIDs},
{"MAPICorec::IAddrBook_Advise", _wrap_IAddrBook_Advise},
{"MAPICorec::IAddrBook_Unadvise", _wrap_IAddrBook_Unadvise},
{"MAPICorec::IAddrBook_CreateOneOff", _wrap_IAddrBook_CreateOneOff},
{"MAPICorec::IAddrBook_NewEntry", _wrap_IAddrBook_NewEntry},
{"MAPICorec::IAddrBook_ResolveName", _wrap_IAddrBook_ResolveName},
{"MAPICorec::IAddrBook_Address", _wrap_IAddrBook_Address},
{"MAPICorec::IAddrBook_Details", _wrap_IAddrBook_Details},
{"MAPICorec::IAddrBook_RecipOptions", _wrap_IAddrBook_RecipOptions},
{"MAPICorec::IAddrBook_QueryDefaultRecipOpt", _wrap_IAddrBook_QueryDefaultRecipOpt},
{"MAPICorec::IAddrBook_GetPAB", _wrap_IAddrBook_GetPAB},
{"MAPICorec::IAddrBook_SetPAB", _wrap_IAddrBook_SetPAB},
{"MAPICorec::IAddrBook_GetDefaultDir", _wrap_IAddrBook_GetDefaultDir},
{"MAPICorec::IAddrBook_SetDefaultDir", _wrap_IAddrBook_SetDefaultDir},
{"MAPICorec::IAddrBook_GetSearchPath", _wrap_IAddrBook_GetSearchPath},
{"MAPICorec::IAddrBook_SetSearchPath", _wrap_IAddrBook_SetSearchPath},
{"MAPICorec::IAddrBook_PrepareRecips", _wrap_IAddrBook_PrepareRecips},
{"MAPICorec::delete_IAddrBook", _wrap_delete_IAddrBook},
{"MAPICorec::IProfAdmin_GetLastError", _wrap_IProfAdmin_GetLastError},
{"MAPICorec::IProfAdmin_GetProfileTable", _wrap_IProfAdmin_GetProfileTable},
{"MAPICorec::IProfAdmin_CreateProfile", _wrap_IProfAdmin_CreateProfile},
{"MAPICorec::IProfAdmin_DeleteProfile", _wrap_IProfAdmin_DeleteProfile},
{"MAPICorec::IProfAdmin_ChangeProfilePassword", _wrap_IProfAdmin_ChangeProfilePassword},
{"MAPICorec::IProfAdmin_CopyProfile", _wrap_IProfAdmin_CopyProfile},
{"MAPICorec::IProfAdmin_RenameProfile", _wrap_IProfAdmin_RenameProfile},
{"MAPICorec::IProfAdmin_SetDefaultProfile", _wrap_IProfAdmin_SetDefaultProfile},
{"MAPICorec::IProfAdmin_AdminServices", _wrap_IProfAdmin_AdminServices},
{"MAPICorec::delete_IProfAdmin", _wrap_delete_IProfAdmin},
{"MAPICorec::IMsgServiceAdmin_GetLastError", _wrap_IMsgServiceAdmin_GetLastError},
{"MAPICorec::IMsgServiceAdmin_GetMsgServiceTable", _wrap_IMsgServiceAdmin_GetMsgServiceTable},
{"MAPICorec::IMsgServiceAdmin_CreateMsgService", _wrap_IMsgServiceAdmin_CreateMsgService},
{"MAPICorec::IMsgServiceAdmin_DeleteMsgService", _wrap_IMsgServiceAdmin_DeleteMsgService},
{"MAPICorec::IMsgServiceAdmin_CopyMsgService", _wrap_IMsgServiceAdmin_CopyMsgService},
{"MAPICorec::IMsgServiceAdmin_RenameMsgService", _wrap_IMsgServiceAdmin_RenameMsgService},
{"MAPICorec::IMsgServiceAdmin_ConfigureMsgService", _wrap_IMsgServiceAdmin_ConfigureMsgService},
{"MAPICorec::IMsgServiceAdmin_OpenProfileSection", _wrap_IMsgServiceAdmin_OpenProfileSection},
{"MAPICorec::IMsgServiceAdmin_MsgServiceTransportOrder", _wrap_IMsgServiceAdmin_MsgServiceTransportOrder},
{"MAPICorec::IMsgServiceAdmin_AdminProviders", _wrap_IMsgServiceAdmin_AdminProviders},
{"MAPICorec::IMsgServiceAdmin_SetPrimaryIdentity", _wrap_IMsgServiceAdmin_SetPrimaryIdentity},
{"MAPICorec::IMsgServiceAdmin_GetProviderTable", _wrap_IMsgServiceAdmin_GetProviderTable},
{"MAPICorec::delete_IMsgServiceAdmin", _wrap_delete_IMsgServiceAdmin},
{"MAPICorec::MAPINotifSink_GetNotifications", _wrap_MAPINotifSink_GetNotifications},
{"MAPICorec::new_MAPINotifSink", _wrap_new_MAPINotifSink},
{"MAPICorec::delete_MAPINotifSink", _wrap_delete_MAPINotifSink},
{"MAPICorec::WrapStoreEntryID", _wrap_WrapStoreEntryID},
{"MAPICorec::WrapCompressedRTFStream", _wrap_WrapCompressedRTFStream},
{"MAPICorec::IExchangeImportContentsChanges_GetLastError", _wrap_IExchangeImportContentsChanges_GetLastError},
{"MAPICorec::IExchangeImportContentsChanges_Config", _wrap_IExchangeImportContentsChanges_Config},
{"MAPICorec::IExchangeImportContentsChanges_UpdateState", _wrap_IExchangeImportContentsChanges_UpdateState},
{"MAPICorec::IExchangeImportContentsChanges_ImportMessageChange", _wrap_IExchangeImportContentsChanges_ImportMessageChange},
{"MAPICorec::IExchangeImportContentsChanges_ImportMessageDeletion", _wrap_IExchangeImportContentsChanges_ImportMessageDeletion},
{"MAPICorec::IExchangeImportContentsChanges_ImportPerUserReadStateChange", _wrap_IExchangeImportContentsChanges_ImportPerUserReadStateChange},
{"MAPICorec::IExchangeImportContentsChanges_ImportMessageMove", _wrap_IExchangeImportContentsChanges_ImportMessageMove},
{"MAPICorec::delete_IExchangeImportContentsChanges", _wrap_delete_IExchangeImportContentsChanges},
{"MAPICorec::IExchangeImportHierarchyChanges_GetLastError", _wrap_IExchangeImportHierarchyChanges_GetLastError},
{"MAPICorec::IExchangeImportHierarchyChanges_Config", _wrap_IExchangeImportHierarchyChanges_Config},
{"MAPICorec::IExchangeImportHierarchyChanges_UpdateState", _wrap_IExchangeImportHierarchyChanges_UpdateState},
{"MAPICorec::IExchangeImportHierarchyChanges_ImportFolderChange", _wrap_IExchangeImportHierarchyChanges_ImportFolderChange},
{"MAPICorec::IExchangeImportHierarchyChanges_ImportFolderDeletion", _wrap_IExchangeImportHierarchyChanges_ImportFolderDeletion},
{"MAPICorec::delete_IExchangeImportHierarchyChanges", _wrap_delete_IExchangeImportHierarchyChanges},
{"MAPICorec::IExchangeExportChanges_GetLastError", _wrap_IExchangeExportChanges_GetLastError},
{"MAPICorec::IExchangeExportChanges_Config", _wrap_IExchangeExportChanges_Config},
{"MAPICorec::IExchangeExportChanges_Synchronize", _wrap_IExchangeExportChanges_Synchronize},
{"MAPICorec::IExchangeExportChanges_UpdateState", _wrap_IExchangeExportChanges_UpdateState},
{"MAPICorec::delete_IExchangeExportChanges", _wrap_delete_IExchangeExportChanges},
{"MAPICorec::IExchangeManageStore_CreateStoreEntryID", _wrap_IExchangeManageStore_CreateStoreEntryID},
{"MAPICorec::IExchangeManageStore_EntryIDFromSourceKey", _wrap_IExchangeManageStore_EntryIDFromSourceKey},
{"MAPICorec::IExchangeManageStore_GetRights", _wrap_IExchangeManageStore_GetRights},
{"MAPICorec::IExchangeManageStore_GetMailboxTable", _wrap_IExchangeManageStore_GetMailboxTable},
{"MAPICorec::IExchangeManageStore_GetPublicFolderTable", _wrap_IExchangeManageStore_GetPublicFolderTable},
{"MAPICorec::delete_IExchangeManageStore", _wrap_delete_IExchangeManageStore},
{"MAPICorec::IExchangeModifyTable_GetLastError", _wrap_IExchangeModifyTable_GetLastError},
{"MAPICorec::IExchangeModifyTable_GetTable", _wrap_IExchangeModifyTable_GetTable},
{"MAPICorec::IExchangeModifyTable_ModifyTable", _wrap_IExchangeModifyTable_ModifyTable},
{"MAPICorec::delete_IExchangeModifyTable", _wrap_delete_IExchangeModifyTable},
{"MAPICorec::IECServiceAdmin_CreateStore", _wrap_IECServiceAdmin_CreateStore},
{"MAPICorec::IECServiceAdmin_CreateEmptyStore", _wrap_IECServiceAdmin_CreateEmptyStore},
{"MAPICorec::IECServiceAdmin_ResolveStore", _wrap_IECServiceAdmin_ResolveStore},
{"MAPICorec::IECServiceAdmin_HookStore", _wrap_IECServiceAdmin_HookStore},
{"MAPICorec::IECServiceAdmin_UnhookStore", _wrap_IECServiceAdmin_UnhookStore},
{"MAPICorec::IECServiceAdmin_RemoveStore", _wrap_IECServiceAdmin_RemoveStore},
{"MAPICorec::IECServiceAdmin_CreateUser", _wrap_IECServiceAdmin_CreateUser},
{"MAPICorec::IECServiceAdmin_DeleteUser", _wrap_IECServiceAdmin_DeleteUser},
{"MAPICorec::IECServiceAdmin_SetUser", _wrap_IECServiceAdmin_SetUser},
{"MAPICorec::IECServiceAdmin_GetUser", _wrap_IECServiceAdmin_GetUser},
{"MAPICorec::IECServiceAdmin_ResolveUserName", _wrap_IECServiceAdmin_ResolveUserName},
{"MAPICorec::IECServiceAdmin_GetUserList", _wrap_IECServiceAdmin_GetUserList},
{"MAPICorec::IECServiceAdmin_GetSendAsList", _wrap_IECServiceAdmin_GetSendAsList},
{"MAPICorec::IECServiceAdmin_AddSendAsUser", _wrap_IECServiceAdmin_AddSendAsUser},
{"MAPICorec::IECServiceAdmin_DelSendAsUser", _wrap_IECServiceAdmin_DelSendAsUser},
{"MAPICorec::IECServiceAdmin_GetUserClientUpdateStatus", _wrap_IECServiceAdmin_GetUserClientUpdateStatus},
{"MAPICorec::IECServiceAdmin_RemoveAllObjects", _wrap_IECServiceAdmin_RemoveAllObjects},
{"MAPICorec::IECServiceAdmin_CreateGroup", _wrap_IECServiceAdmin_CreateGroup},
{"MAPICorec::IECServiceAdmin_DeleteGroup", _wrap_IECServiceAdmin_DeleteGroup},
{"MAPICorec::IECServiceAdmin_SetGroup", _wrap_IECServiceAdmin_SetGroup},
{"MAPICorec::IECServiceAdmin_GetGroup", _wrap_IECServiceAdmin_GetGroup},
{"MAPICorec::IECServiceAdmin_ResolveGroupName", _wrap_IECServiceAdmin_ResolveGroupName},
{"MAPICorec::IECServiceAdmin_GetGroupList", _wrap_IECServiceAdmin_GetGroupList},
{"MAPICorec::IECServiceAdmin_DeleteGroupUser", _wrap_IECServiceAdmin_DeleteGroupUser},
{"MAPICorec::IECServiceAdmin_AddGroupUser", _wrap_IECServiceAdmin_AddGroupUser},
{"MAPICorec::IECServiceAdmin_GetUserListOfGroup", _wrap_IECServiceAdmin_GetUserListOfGroup},
{"MAPICorec::IECServiceAdmin_GetGroupListOfUser", _wrap_IECServiceAdmin_GetGroupListOfUser},
{"MAPICorec::IECServiceAdmin_CreateCompany", _wrap_IECServiceAdmin_CreateCompany},
{"MAPICorec::IECServiceAdmin_DeleteCompany", _wrap_IECServiceAdmin_DeleteCompany},
{"MAPICorec::IECServiceAdmin_SetCompany", _wrap_IECServiceAdmin_SetCompany},
{"MAPICorec::IECServiceAdmin_GetCompany", _wrap_IECServiceAdmin_GetCompany},
{"MAPICorec::IECServiceAdmin_ResolveCompanyName", _wrap_IECServiceAdmin_ResolveCompanyName},
{"MAPICorec::IECServiceAdmin_GetCompanyList", _wrap_IECServiceAdmin_GetCompanyList},
{"MAPICorec::IECServiceAdmin_AddCompanyToRemoteViewList", _wrap_IECServiceAdmin_AddCompanyToRemoteViewList},
{"MAPICorec::IECServiceAdmin_DelCompanyFromRemoteViewList", _wrap_IECServiceAdmin_DelCompanyFromRemoteViewList},
{"MAPICorec::IECServiceAdmin_GetRemoteViewList", _wrap_IECServiceAdmin_GetRemoteViewList},
{"MAPICorec::IECServiceAdmin_AddUserToRemoteAdminList", _wrap_IECServiceAdmin_AddUserToRemoteAdminList},
{"MAPICorec::IECServiceAdmin_DelUserFromRemoteAdminList", _wrap_IECServiceAdmin_DelUserFromRemoteAdminList},
{"MAPICorec::IECServiceAdmin_GetRemoteAdminList", _wrap_IECServiceAdmin_GetRemoteAdminList},
{"MAPICorec::IECServiceAdmin_SyncUsers", _wrap_IECServiceAdmin_SyncUsers},
{"MAPICorec::IECServiceAdmin_GetQuota", _wrap_IECServiceAdmin_GetQuota},
{"MAPICorec::IECServiceAdmin_SetQuota", _wrap_IECServiceAdmin_SetQuota},
{"MAPICorec::IECServiceAdmin_AddQuotaRecipient", _wrap_IECServiceAdmin_AddQuotaRecipient},
{"MAPICorec::IECServiceAdmin_DeleteQuotaRecipient", _wrap_IECServiceAdmin_DeleteQuotaRecipient},
{"MAPICorec::IECServiceAdmin_GetQuotaRecipients", _wrap_IECServiceAdmin_GetQuotaRecipients},
{"MAPICorec::IECServiceAdmin_GetQuotaStatus", _wrap_IECServiceAdmin_GetQuotaStatus},
{"MAPICorec::IECServiceAdmin_PurgeSoftDelete", _wrap_IECServiceAdmin_PurgeSoftDelete},
{"MAPICorec::IECServiceAdmin_PurgeCache", _wrap_IECServiceAdmin_PurgeCache},
{"MAPICorec::IECServiceAdmin_OpenUserStoresTable", _wrap_IECServiceAdmin_OpenUserStoresTable},
{"MAPICorec::IECServiceAdmin_GetServerDetails", _wrap_IECServiceAdmin_GetServerDetails},
{"MAPICorec::IECServiceAdmin_ResolvePseudoUrl", _wrap_IECServiceAdmin_ResolvePseudoUrl},
{"MAPICorec::IECServiceAdmin_GetPublicStoreEntryID", _wrap_IECServiceAdmin_GetPublicStoreEntryID},
{"MAPICorec::IECServiceAdmin_GetArchiveStoreEntryID", _wrap_IECServiceAdmin_GetArchiveStoreEntryID},
{"MAPICorec::delete_IECServiceAdmin", _wrap_delete_IECServiceAdmin},
{"MAPICorec::IECSpooler_GetMasterOutgoingTable", _wrap_IECSpooler_GetMasterOutgoingTable},
{"MAPICorec::IECSpooler_DeleteFromMasterOutgoingTable", _wrap_IECSpooler_DeleteFromMasterOutgoingTable},
{"MAPICorec::delete_IECSpooler", _wrap_delete_IECSpooler},
{"MAPICorec::IECTestProtocol_TestPerform", _wrap_IECTestProtocol_TestPerform},
{"MAPICorec::IECTestProtocol_TestSet", _wrap_IECTestProtocol_TestSet},
{"MAPICorec::IECTestProtocol_TestGet", _wrap_IECTestProtocol_TestGet},
{"MAPICorec::delete_IECTestProtocol", _wrap_delete_IECTestProtocol},
{"MAPICorec::IECMultiStoreTable_OpenMultiStoreTable", _wrap_IECMultiStoreTable_OpenMultiStoreTable},
{"MAPICorec::delete_IECMultiStoreTable", _wrap_delete_IECMultiStoreTable},
{"MAPICorec::IECLicense_LicenseAuth", _wrap_IECLicense_LicenseAuth},
{"MAPICorec::delete_IECLicense", _wrap_delete_IECLicense},
{"MAPICorec::IECExportChanges_GetChangeCount", _wrap_IECExportChanges_GetChangeCount},
{"MAPICorec::IECExportChanges_SetMessageInterface", _wrap_IECExportChanges_SetMessageInterface},
{"MAPICorec::IECExportChanges_SetLogger", _wrap_IECExportChanges_SetLogger},
{"MAPICorec::delete_IECExportChanges", _wrap_delete_IECExportChanges},
{"MAPICorec::UnwrapObject", _wrap_UnwrapObject},
{"MAPICorec::IECChangeAdvisor_GetLastError", _wrap_IECChangeAdvisor_GetLastError},
{"MAPICorec::IECChangeAdvisor_Config", _wrap_IECChangeAdvisor_Config},
{"MAPICorec::IECChangeAdvisor_UpdateState", _wrap_IECChangeAdvisor_UpdateState},
{"MAPICorec::IECChangeAdvisor_AddKeys", _wrap_IECChangeAdvisor_AddKeys},
{"MAPICorec::IECChangeAdvisor_RemoveKeys", _wrap_IECChangeAdvisor_RemoveKeys},
{"MAPICorec::IECChangeAdvisor_IsMonitoringSyncId", _wrap_IECChangeAdvisor_IsMonitoringSyncId},
{"MAPICorec::IECChangeAdvisor_UpdateSyncState", _wrap_IECChangeAdvisor_UpdateSyncState},
{"MAPICorec::delete_IECChangeAdvisor", _wrap_delete_IECChangeAdvisor},
{"MAPICorec::IECChangeAdviseSink_OnNotify", _wrap_IECChangeAdviseSink_OnNotify},
{"MAPICorec::delete_IECChangeAdviseSink", _wrap_delete_IECChangeAdviseSink},
{"MAPICorec::IECImportContentsChanges_ConfigForConversionStream", _wrap_IECImportContentsChanges_ConfigForConversionStream},
{"MAPICorec::IECImportContentsChanges_ImportMessageChangeAsAStream", _wrap_IECImportContentsChanges_ImportMessageChangeAsAStream},
{"MAPICorec::IECImportContentsChanges_SetMessageInterface", _wrap_IECImportContentsChanges_SetMessageInterface},
{"MAPICorec::delete_IECImportContentsChanges", _wrap_delete_IECImportContentsChanges},
{"MAPICorec::IECSingleInstance_GetSingleInstanceId", _wrap_IECSingleInstance_GetSingleInstanceId},
{"MAPICorec::IECSingleInstance_SetSingleInstanceId", _wrap_IECSingleInstance_SetSingleInstanceId},
{"MAPICorec::delete_IECSingleInstance", _wrap_delete_IECSingleInstance},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv((char*) swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv((char*)swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  SWIG_TypeClientData(SWIGTYPE_p_IUnknown, (void*) "MAPICore::IUnknown");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_DIRECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_TRANSACTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00010000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_SIMPLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x08000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_READ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_WRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000001L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_READWRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000002L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_SHARE_DENY_NONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000040L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_SHARE_DENY_READ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000030L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_SHARE_DENY_WRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000020L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_SHARE_EXCLUSIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000010L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_PRIORITY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00040000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_DELETEONRELEASE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x04000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_NOSCRATCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00100000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_CREATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00001000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_CONVERT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00020000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_FAILIFTHERE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_NOSNAPSHOT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00200000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGM_DIRECT_SWMR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00400000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGTY_STORAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STGTY_STORAGE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGTY_STREAM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STGTY_STREAM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGTY_LOCKBYTES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STGTY_LOCKBYTES)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STGTY_PROPERTY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STGTY_PROPERTY)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STREAM_SEEK_SET", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STREAM_SEEK_SET)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STREAM_SEEK_CUR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STREAM_SEEK_CUR)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STREAM_SEEK_END", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STREAM_SEEK_END)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOCK_WRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(LOCK_WRITE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOCK_EXCLUSIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(LOCK_EXCLUSIVE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOCK_ONLYONCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(LOCK_ONLYONCE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATFLAG_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STATFLAG_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATFLAG_NONAME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STATFLAG_NONAME)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATFLAG_NOOPEN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(STATFLAG_NOOPEN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_ISequentialStream, (void*) "MAPICore::ISequentialStream");
  SWIG_TypeClientData(SWIGTYPE_p_IStream, (void*) "MAPICore::IStream");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MODIFY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_MODIFY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_READ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_DELETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_CREATE_HIERARCHY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_CREATE_CONTENTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ACCESS_CREATE_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "hrSuccess", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SHORTTERM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x80)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NOTRECIP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x40)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_THISSESSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x20)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NOW", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x10)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NOTRESERVED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x08)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_COMPOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x80)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ONE_OFF_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x8000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ONE_OFF_NO_RICH_INFO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x0001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ADDRBOOK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_FOLDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ABCONT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000005))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MAILUSER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000006))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ATTACH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000007))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DISTLIST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_PROFSECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000009))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_STATUS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0000000A))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SESSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0000000B))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_FORMINFO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0000000C))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MV_FLAG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x1000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_UNSPECIFIED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_NULL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_SHORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_LONG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_FLOAT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_DOUBLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0005))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_CURRENCY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0006))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_APPTIME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0007))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x000A))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_BOOLEAN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x000B))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_OBJECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x000D))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_LONGLONG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0014))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_STRING8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x001E))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x001F))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_SYSTIME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_CLSID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0048))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_BINARY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0102))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_I2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_I4", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_R4", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_R8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0005))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_I8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x0014))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_SHORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0002)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_LONG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0003)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_FLOAT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0004)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_DOUBLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0005)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_CURRENCY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0006)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_APPTIME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0007)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_SYSTIME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0040)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_STRING8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x001E)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_BINARY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0102)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x001F)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_CLSID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0048)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_LONGLONG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0014)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_I2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0002)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_I4", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0003)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_R4", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0004)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_R8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0005)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PT_MV_I8", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|(0x0014)))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MV_INSTANCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x2000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MVI_FLAG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x1000|0x2000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ERROR_VERSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(0x00000000L)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "KEEP_OPEN_READONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "KEEP_OPEN_READWRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FORCE_SAVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_CREATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STREAM_APPEND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NOREPLACE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DECLINE_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NO_STRINGS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NO_IDS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MNID_ID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MNID_STRING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIProp, (void*) "MAPICore::IMAPIProp");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_BEST_ACCESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONVENIENT_DEPTH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEARCH_RUNNING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEARCH_REBUILD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEARCH_RECURSIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEARCH_FOREGROUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STOP_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RESTART_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RECURSIVE_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SHALLOW_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOREGROUND_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BACKGROUND_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIContainer, (void*) "MAPICore::IMAPIContainer");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevCriticalError", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevNewMail", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevObjectCreated", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevObjectDeleted", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevObjectModified", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevObjectMoved", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevObjectCopied", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevSearchComplete", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevTableModified", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000100))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevStatusObjectModified", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000200))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevReservedForMapi", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x40000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "fnevExtended", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x80000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_CHANGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_ROW_ADDED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_ROW_DELETED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_ROW_MODIFIED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_DONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(6)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_RESTRICT_DONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(7)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SETCOL_DONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(8)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_RELOAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(9)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIAdviseSink, (void*) "MAPICore::IMAPIAdviseSink");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_ENTRYID_UNIQUE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_READONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_SEARCH_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_MODIFY_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_CREATE_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_ATTACH_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_OLE_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_SUBMIT_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_NOTIFY_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000100))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_MV_PROPS_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000200))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_CATEGORIZE_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000400))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_RTF_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000800))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_RESTRICTION_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00001000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_SORT_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00002000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_PUBLIC_FOLDERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00004000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_UNCOMPRESSED_RTF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00008000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STORE_HAS_SEARCHES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x01000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_NO_WAIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_ORDERLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_PURGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_ABORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_QUIET", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_COMPLETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00010000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_INBOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00020000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_OUTBOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00040000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "LOGOFF_OUTBOUND_QUEUE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00080000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSG_LOCKED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSG_UNLOCKED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_IPM_SUBTREE_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_IPM_INBOX_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_IPM_OUTBOX_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_IPM_WASTEBASKET_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_IPM_SENTMAIL_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_VIEWS_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_COMMON_VIEWS_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_FINDER_VALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMsgStore, (void*) "MAPICore::IMsgStore");
  SWIG_TypeClientData(SWIGTYPE_p_IProxyStoreObject, (void*) "MAPICore::IProxyStoreObject");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_ROOT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_GENERIC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_SEARCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MESSAGE_MOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MESSAGE_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPEN_IF_EXISTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DEL_MESSAGES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DEL_FOLDERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DEL_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FOLDER_MOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "COPY_SUBFOLDERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_HIGHLIGHTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_TAGGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_HIDDEN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_DELMARKED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_REMOTE_DOWNLOAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00001000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGSTATUS_REMOTE_DELETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00002000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RECURSIVE_SORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLDSTATUS_HIGHLIGHTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLDSTATUS_TAGGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLDSTATUS_HIDDEN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLDSTATUS_DELMARKED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIFolder, (void*) "MAPICore::IMAPIFolder");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FORCE_SUBMIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_READ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_UNMODIFIED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_SUBMIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_UNSENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_HASATTACH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_FROMME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_RESEND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_RN_PENDING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000100))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MSGFLAG_NRN_PENDING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000200))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SUBMITFLAG_LOCKED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SUBMITFLAG_PREPROCESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MODRECIP_ADD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MODRECIP_MODIFY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MODRECIP_REMOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SUPPRESS_RECEIPT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CLEAR_READ_FLAG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GENERATE_RECEIPT_ONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CLEAR_RN_PENDING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CLEAR_NRN_PENDING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SECURITY_SIGNED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SECURITY_ENCRYPTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PRIO_URGENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((1))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PRIO_NORMAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PRIO_NONURGENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((-1))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SENSITIVITY_NONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SENSITIVITY_PERSONAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SENSITIVITY_PRIVATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SENSITIVITY_COMPANY_CONFIDENTIAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IMPORTANCE_LOW", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IMPORTANCE_NORMAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((1))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IMPORTANCE_HIGH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((2))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMessage, (void*) "MAPICore::IMessage");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NO_ATTACHMENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_BY_VALUE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_BY_REFERENCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_BY_REF_RESOLVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_BY_REF_ONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_EMBEDDED_MSG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000005))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ATTACH_OLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000006))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IAttach, (void*) "MAPICore::IAttach");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_RECIPIENTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_SUBCONTAINERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_MODIFIABLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_UNMODIFIABLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_FIND_ON_OPEN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_NOT_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CREATE_CHECK_DUP_STRICT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CREATE_CHECK_DUP_LOOSE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CREATE_REPLACE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_UNRESOLVED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_AMBIGUOUS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_RESOLVED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IABContainer, (void*) "MAPICore::IABContainer");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SEND_NO_RICH_INFO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00010000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_PUBLIC_UA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_PRIVATE_UA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((1))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_MS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((2))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_ML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((3))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_PDAU", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((4))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_PDS_PATRON", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((5))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MH_DP_OTHER_AU", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((6))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMailUser, (void*) "MAPICore::IMailUser");
  SWIG_TypeClientData(SWIGTYPE_p_IDistList, (void*) "MAPICore::IDistList");
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIStatus, (void*) "MAPICore::IMAPIStatus");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_COMPLETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_QCHANGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(7)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_SORTING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(9)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_SORT_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(10)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_SETTING_COLS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(11)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_SETCOL_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(13)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_RESTRICTING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(14)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLSTAT_RESTRICT_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(15)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLTYPE_SNAPSHOT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLTYPE_KEYSET", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBLTYPE_DYNAMIC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_ASCEND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_DESCEND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_COMBINE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_CATEG_MAX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TABLE_SORT_CATEG_MIN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000008)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BOOKMARK_BEGINNING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BOOKMARK_CURRENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BOOKMARK_END", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_FULLSTRING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_SUBSTRING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_PREFIX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_IGNORECASE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00010000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_IGNORENONSPACE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00020000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FL_LOOSE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00040000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_AND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_OR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_NOT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_CONTENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000003)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_PROPERTY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_COMPAREPROPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000005)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_BITMASK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000006)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_SIZE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000007)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_EXIST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000008)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_SUBRESTRICTION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000009)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RES_COMMENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x0000000A)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_LT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_LE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_GT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_GE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_EQ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_NE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "RELOP_RE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(6)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BMR_EQZ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BMR_NEZ", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_ALL_COLUMNS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_LEAF_ROW", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_EMPTY_CATEGORY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_EXPANDED_CATEGORY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_COLLAPSED_CATEGORY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_NOWAIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_ASYNC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_BATCH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DIR_BACKWARD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TBL_NOADVANCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPITable, (void*) "MAPICore::IMAPITable");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_STORE_PROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((33))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_AB", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((34))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_AB_PROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((35))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_TRANSPORT_PROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((36))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SPOOLER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((37))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_PROFILE_PROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((38))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SUBSYSTEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((39))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_HOOK_PROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((40))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_VALIDATE_STATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_SETTINGS_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_CHANGE_PASSWORD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_FLUSH_QUEUES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_DEFAULT_OUTBOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_DEFAULT_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_PRIMARY_IDENTITY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_SIMPLE_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_XP_PREFER_LAST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_NO_PRIMARY_IDENTITY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_NO_DEFAULT_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_TEMP_SECTION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_OWN_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000100))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_NEED_IPM_TREE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000800))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_PRIMARY_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00001000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_SECONDARY_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00002000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_AVAILABLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_OFFLINE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_FAILURE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_INBOUND_ENABLED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00010000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_INBOUND_ACTIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00020000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_INBOUND_FLUSH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00040000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_OUTBOUND_ENABLED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00100000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_OUTBOUND_ACTIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00200000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_OUTBOUND_FLUSH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00400000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_REMOTE_ACCESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00800000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SUPPRESS_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "REFRESH_XP_HEADER_CACHE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00010000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROCESS_XP_HEADER_CACHE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00020000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FORCE_XP_CONNECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00040000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FORCE_XP_DISCONNECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00080000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONFIG_CHANGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00100000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ABORT_XP_HEADER_OPERATION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00200000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SHOW_XP_SESSION_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00400000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UI_READONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLUSH_UPLOAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLUSH_DOWNLOAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLUSH_FORCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLUSH_NO_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FLUSH_ASYNC_OK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IProfSect, (void*) "MAPICore::IProfSect");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_TOP_LEVEL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPIProgress, (void*) "MAPICore::IMAPIProgress");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UI_SERVICE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_UI_ALWAYS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_UI_ALLOWED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000010)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UI_CURRENT_PROVIDER_FIRST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IProviderAdmin, (void*) "MAPICore::IProviderAdmin");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ADRPARM_HELP_CTX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DIALOG_MODAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DIALOG_SDI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DIALOG_OPTIONS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ADDRESS_ONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_SELECTONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000010))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_RESOLVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_MAILUSER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_DISTLIST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_FORUM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000002))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_AGENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000003))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_ORGANIZATION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_PRIVATE_DISTLIST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000005))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_REMOTE_MAILUSER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000006))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_MODIFIABLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00010000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_GLOBAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00020000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_LOCAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00030000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_WAN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00040000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_NOT_SPECIFIC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00050000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_FOLDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x01000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_FOLDER_LINK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x02000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DT_FOLDER_SPECIAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x04000000))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DEFERRED_ERRORS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000008))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000040))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MDB_NO_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MDB_WRITE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000004))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MDB_TEMPORARY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000020))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MDB_NO_MAIL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000080))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AB_NO_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "EC_OVERRIDE_HOMESERVER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((0x00000001))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ALLOW_OTHERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000008)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_EXPLICIT_PROFILE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000010)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SERVICE_UI_ALWAYS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00002000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NO_MAIL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00008000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NT_SERVICE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00010000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_TIMEOUT_SHORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00100000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_MAPIINIT_0, (void*) "MAPICore::MAPIINIT_0");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_INIT_VERSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_MULTITHREAD_NOTIFICATIONS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_LOGOFF_SHARED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_LOGOFF_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DEFAULT_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SIMPLE_STORE_TEMPORARY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SIMPLE_STORE_PERMANENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000003)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_PRIMARY_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SECONDARY_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000005)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_POST_MESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NEW_MESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMAPISession, (void*) "MAPICore::IMAPISession");
  SWIG_TypeClientData(SWIGTYPE_p_IAddrBook, (void*) "MAPICore::IAddrBook");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DEFAULT_SERVICES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IProfAdmin, (void*) "MAPICore::IProfAdmin");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_DEFAULT_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_SINGLE_COPY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_CREATE_WITH_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_PRIMARY_IDENTITY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000008)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SERVICE_NO_PRIMARY_IDENTITY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000020)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IMsgServiceAdmin, (void*) "MAPICore::IMsgServiceAdmin");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_CALL_FAILED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80004005)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_ENOUGH_MEMORY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8007000E)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_PARAMETER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80070057)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INTERFACE_NOT_SUPPORTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80004002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NO_ACCESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80070005)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NO_SUPPORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040102)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_BAD_CHARWIDTH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040103)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_STRING_TOO_LONG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040105)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNKNOWN_FLAGS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040106)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_ENTRYID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040107)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_OBJECT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040108)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_OBJECT_CHANGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040109)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_OBJECT_DELETED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004010A)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_BUSY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004010B)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_ENOUGH_DISK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004010D)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_ENOUGH_RESOURCES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004010E)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_FOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004010F)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_VERSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040110)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_LOGON_FAILED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040111)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_SESSION_LIMIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040112)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_USER_CANCEL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040113)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNABLE_TO_ABORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040114)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NETWORK_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040115)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_DISK_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040116)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TOO_COMPLEX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040117)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_BAD_COLUMN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040118)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_EXTENDED_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040119)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_COMPUTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011A)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_CORRUPT_DATA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011B)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNCONFIGURED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011C)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_FAILONEPROVIDER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011D)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNKNOWN_CPID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011E)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNKNOWN_LCID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004011F)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_PASSWORD_CHANGE_REQUIRED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040120)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_PASSWORD_EXPIRED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040121)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_WORKSTATION_ACCOUNT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040122)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_ACCESS_TIME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040123)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_ACCOUNT_DISABLED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040124)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_END_OF_SESSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040200)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNKNOWN_ENTRYID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040201)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_MISSING_REQUIRED_COLUMN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040202)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_NO_SERVICE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040203)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_BAD_VALUE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040301)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_TYPE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040302)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TYPE_NO_SUPPORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040303)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNEXPECTED_TYPE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040304)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TOO_BIG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040305)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_DECLINE_COPY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040306)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNEXPECTED_ID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040307)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_ERRORS_RETURNED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040380)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_UNABLE_TO_COMPLETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040400)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TIMEOUT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040401)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TABLE_EMPTY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040402)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_TABLE_TOO_BIG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040403)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_INVALID_BOOKMARK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040405)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_POSITION_CHANGED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040481)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_APPROX_COUNT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040482)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_WAIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040500)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_CANCEL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040501)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_ME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040502)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_CANCEL_MESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040580)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_CORRUPT_STORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040600)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_IN_QUEUE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040601)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NO_SUPPRESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040602)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_COLLISION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040604)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NOT_INITIALIZED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040605)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NON_STANDARD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040606)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_NO_RECIPIENTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040607)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_SUBMITTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040608)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_HAS_FOLDERS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040609)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_HAS_MESSAGES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004060A)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_FOLDER_CYCLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004060B)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_W_PARTIAL_COMPLETION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040680)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_AMBIGUOUS_RECIP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040700)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_E_STORE_FULL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x8004060c)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_MAPINotifSink, (void*) "MAPICore::MAPINotifSink");
  SWIG_TypeClientData(SWIGTYPE_p_IExchangeImportContentsChanges, (void*) "MAPICore::IExchangeImportContentsChanges");
  SWIG_TypeClientData(SWIGTYPE_p_IExchangeImportHierarchyChanges, (void*) "MAPICore::IExchangeImportHierarchyChanges");
  SWIG_TypeClientData(SWIGTYPE_p_IExchangeExportChanges, (void*) "MAPICore::IExchangeExportChanges");
  SWIG_TypeClientData(SWIGTYPE_p_IExchangeManageStore, (void*) "MAPICore::IExchangeManageStore");
  SWIG_TypeClientData(SWIGTYPE_p_IExchangeModifyTable, (void*) "MAPICore::IExchangeModifyTable");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x01)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NO_DELETIONS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x02)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NO_SOFT_DELETIONS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x04)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_READ_STATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x08)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x10)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NORMAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x20)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NO_CONFLICTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x40)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_ONLY_SPECIFIED_PROPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x80)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NO_FOREIGN_KEYS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x100)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_LIMITED_IMESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x200)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_CATCHUP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x400)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_NEW_MESSAGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x800)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_MSG_SELECTIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x1000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_BEST_BODY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x2000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x4000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_PROGRESS_MODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x8000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_FXRECOVERMODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x10000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_DEFER_CONFIG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x20000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_FORCE_UNICODE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x40000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DELETE_HARD_DELETE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x10)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ROWLIST_REPLACE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ROW_ADD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ROW_MODIFY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ROW_REMOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ROW_EMPTY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_UNKNOWN_FLAGS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040106)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_INVALID_PARAMETER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80070057)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_ERROR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80004005)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_OBJECT_DELETED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040800)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_IGNORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040801)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_CONFLICT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040802)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_NO_PARENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040803)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_INCEST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040804)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_E_UNSYNCHRONIZED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x80040805)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_W_PROGRESS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040820)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SYNC_W_CLIENT_CHANGE_NEWER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(0x00040821)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ECSTORE_TYPE_PRIVATE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ECSTORE_TYPE_PUBLIC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ECSTORE_TYPE_ARCHIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IECServiceAdmin, (void*) "MAPICore::IECServiceAdmin");
  SWIG_TypeClientData(SWIGTYPE_p_IECSpooler, (void*) "MAPICore::IECSpooler");
  SWIG_TypeClientData(SWIGTYPE_p_IECTestProtocol, (void*) "MAPICore::IECTestProtocol");
  SWIG_TypeClientData(SWIGTYPE_p_IECMultiStoreTable, (void*) "MAPICore::IECMultiStoreTable");
  SWIG_TypeClientData(SWIGTYPE_p_IECLicense, (void*) "MAPICore::IECLicense");
  SWIG_TypeClientData(SWIGTYPE_p_IECExportChanges, (void*) "MAPICore::IECExportChanges");
  SWIG_TypeClientData(SWIGTYPE_p_IECChangeAdvisor, (void*) "MAPICore::IECChangeAdvisor");
  SWIG_TypeClientData(SWIGTYPE_p_IECChangeAdviseSink, (void*) "MAPICore::IECChangeAdviseSink");
  SWIG_TypeClientData(SWIGTYPE_p_IECImportContentsChanges, (void*) "MAPICore::IECImportContentsChanges");
  SWIG_TypeClientData(SWIGTYPE_p_IECSingleInstance, (void*) "MAPICore::IECSingleInstance");
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ORIG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_TO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_CC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_BCC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000003)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_P1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x10000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SUBMITTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x80000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_UNREAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_RECEIPT_REQUESTED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000004)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_LOGON_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000001)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_PASSWORD_UI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00020000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_NEW_SESSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000002)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_FORCE_DOWNLOAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00001000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_EXTENDED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000020)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_DIALOG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000008)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_USE_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000040)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_UNREAD_ONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000020)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_GUARANTEE_FIFO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000100)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_LONG_MSGID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00004000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_PEEK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000080)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_SUPPRESS_ATTACH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000800)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_ENVELOPE_ONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000040)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_BODY_AS_FILE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000200)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig1.3/perl5/perltypemaps.swg,64,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAPI_AB_NOMODIFY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0x00000400)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}


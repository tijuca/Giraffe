# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package MAPICore;
use base qw(Exporter);
use base qw(DynaLoader);
package MAPICorec;
bootstrap MAPICore;
package MAPICore;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package MAPICore;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package MAPICore;

*MAPIInitialize = *MAPICorec::MAPIInitialize;
*MAPIUninitialize = *MAPICorec::MAPIUninitialize;
*MAPILogonEx = *MAPICorec::MAPILogonEx;
*MAPIAdminProfiles = *MAPICorec::MAPIAdminProfiles;
*WrapStoreEntryID = *MAPICorec::WrapStoreEntryID;
*WrapCompressedRTFStream = *MAPICorec::WrapCompressedRTFStream;
*UnwrapObject = *MAPICorec::UnwrapObject;

############# Class : MAPICore::IUnknown ##############

package MAPICore::IUnknown;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore );
%OWNER = ();
%ITERATORS = ();
*QueryInterface = *MAPICorec::IUnknown_QueryInterface;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IUnknown($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::ISequentialStream ##############

package MAPICore::ISequentialStream;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*Write = *MAPICorec::ISequentialStream_Write;
*Read = *MAPICorec::ISequentialStream_Read;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_ISequentialStream($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IStream ##############

package MAPICore::IStream;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::ISequentialStream MAPICore );
%OWNER = ();
%ITERATORS = ();
*Seek = *MAPICorec::IStream_Seek;
*SetSize = *MAPICorec::IStream_SetSize;
*CopyTo = *MAPICorec::IStream_CopyTo;
*Commit = *MAPICorec::IStream_Commit;
*Revert = *MAPICorec::IStream_Revert;
*LockRegion = *MAPICorec::IStream_LockRegion;
*UnlockRegion = *MAPICorec::IStream_UnlockRegion;
*Stat = *MAPICorec::IStream_Stat;
*Clone = *MAPICorec::IStream_Clone;
sub new {
    my $pkg = shift;
    my $self = MAPICorec::new_IStream(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IStream($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIProp ##############

package MAPICore::IMAPIProp;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IMAPIProp_GetLastError;
*SaveChanges = *MAPICorec::IMAPIProp_SaveChanges;
*GetProps = *MAPICorec::IMAPIProp_GetProps;
*GetPropList = *MAPICorec::IMAPIProp_GetPropList;
*OpenProperty = *MAPICorec::IMAPIProp_OpenProperty;
*SetProps = *MAPICorec::IMAPIProp_SetProps;
*DeleteProps = *MAPICorec::IMAPIProp_DeleteProps;
*CopyTo = *MAPICorec::IMAPIProp_CopyTo;
*CopyProps = *MAPICorec::IMAPIProp_CopyProps;
*GetNamesFromIDs = *MAPICorec::IMAPIProp_GetNamesFromIDs;
*GetIDsFromNames = *MAPICorec::IMAPIProp_GetIDsFromNames;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIProp($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIContainer ##############

package MAPICore::IMAPIContainer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetContentsTable = *MAPICorec::IMAPIContainer_GetContentsTable;
*GetHierarchyTable = *MAPICorec::IMAPIContainer_GetHierarchyTable;
*OpenEntry = *MAPICorec::IMAPIContainer_OpenEntry;
*SetSearchCriteria = *MAPICorec::IMAPIContainer_SetSearchCriteria;
*GetSearchCriteria = *MAPICorec::IMAPIContainer_GetSearchCriteria;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIContainer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIAdviseSink ##############

package MAPICore::IMAPIAdviseSink;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*OnNotify = *MAPICorec::IMAPIAdviseSink_OnNotify;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIAdviseSink($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMsgStore ##############

package MAPICore::IMsgStore;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
*Advise = *MAPICorec::IMsgStore_Advise;
*Unadvise = *MAPICorec::IMsgStore_Unadvise;
*CompareEntryIDs = *MAPICorec::IMsgStore_CompareEntryIDs;
*OpenEntry = *MAPICorec::IMsgStore_OpenEntry;
*SetReceiveFolder = *MAPICorec::IMsgStore_SetReceiveFolder;
*GetReceiveFolder = *MAPICorec::IMsgStore_GetReceiveFolder;
*GetReceiveFolderTable = *MAPICorec::IMsgStore_GetReceiveFolderTable;
*StoreLogoff = *MAPICorec::IMsgStore_StoreLogoff;
*AbortSubmit = *MAPICorec::IMsgStore_AbortSubmit;
*GetOutgoingQueue = *MAPICorec::IMsgStore_GetOutgoingQueue;
*SetLockState = *MAPICorec::IMsgStore_SetLockState;
*FinishedMsg = *MAPICorec::IMsgStore_FinishedMsg;
*NotifyNewMail = *MAPICorec::IMsgStore_NotifyNewMail;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMsgStore($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IProxyStoreObject ##############

package MAPICore::IProxyStoreObject;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*PlaceHolder1 = *MAPICorec::IProxyStoreObject_PlaceHolder1;
*PlaceHolder2 = *MAPICorec::IProxyStoreObject_PlaceHolder2;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IProxyStoreObject($self);
        delete $OWNER{$self};
    }
}

*UnwrapNoRef = *MAPICorec::IProxyStoreObject_UnwrapNoRef;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIFolder ##############

package MAPICore::IMAPIFolder;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIContainer MAPICore );
%OWNER = ();
%ITERATORS = ();
*CreateMessage = *MAPICorec::IMAPIFolder_CreateMessage;
*CopyMessages = *MAPICorec::IMAPIFolder_CopyMessages;
*DeleteMessages = *MAPICorec::IMAPIFolder_DeleteMessages;
*CreateFolder = *MAPICorec::IMAPIFolder_CreateFolder;
*CopyFolder = *MAPICorec::IMAPIFolder_CopyFolder;
*DeleteFolder = *MAPICorec::IMAPIFolder_DeleteFolder;
*SetReadFlags = *MAPICorec::IMAPIFolder_SetReadFlags;
*GetMessageStatus = *MAPICorec::IMAPIFolder_GetMessageStatus;
*SetMessageStatus = *MAPICorec::IMAPIFolder_SetMessageStatus;
*SaveContentsSort = *MAPICorec::IMAPIFolder_SaveContentsSort;
*EmptyFolder = *MAPICorec::IMAPIFolder_EmptyFolder;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIFolder($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMessage ##############

package MAPICore::IMessage;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetAttachmentTable = *MAPICorec::IMessage_GetAttachmentTable;
*OpenAttach = *MAPICorec::IMessage_OpenAttach;
*CreateAttach = *MAPICorec::IMessage_CreateAttach;
*DeleteAttach = *MAPICorec::IMessage_DeleteAttach;
*GetRecipientTable = *MAPICorec::IMessage_GetRecipientTable;
*ModifyRecipients = *MAPICorec::IMessage_ModifyRecipients;
*SubmitMessage = *MAPICorec::IMessage_SubmitMessage;
*SetReadFlag = *MAPICorec::IMessage_SetReadFlag;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMessage($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IAttach ##############

package MAPICore::IAttach;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IAttach($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IABContainer ##############

package MAPICore::IABContainer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIContainer MAPICore );
%OWNER = ();
%ITERATORS = ();
*CreateEntry = *MAPICorec::IABContainer_CreateEntry;
*CopyEntries = *MAPICorec::IABContainer_CopyEntries;
*DeleteEntries = *MAPICorec::IABContainer_DeleteEntries;
*ResolveNames = *MAPICorec::IABContainer_ResolveNames;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IABContainer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMailUser ##############

package MAPICore::IMailUser;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMailUser($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IDistList ##############

package MAPICore::IDistList;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIContainer MAPICore );
%OWNER = ();
%ITERATORS = ();
*CreateEntry = *MAPICorec::IDistList_CreateEntry;
*CopyEntries = *MAPICorec::IDistList_CopyEntries;
*DeleteEntries = *MAPICorec::IDistList_DeleteEntries;
*ResolveNames = *MAPICorec::IDistList_ResolveNames;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IDistList($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIStatus ##############

package MAPICore::IMAPIStatus;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
*ValidateState = *MAPICorec::IMAPIStatus_ValidateState;
*SettingsDialog = *MAPICorec::IMAPIStatus_SettingsDialog;
*ChangePassword = *MAPICorec::IMAPIStatus_ChangePassword;
*FlushQueues = *MAPICorec::IMAPIStatus_FlushQueues;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIStatus($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPITable ##############

package MAPICore::IMAPITable;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IMAPITable_GetLastError;
*Advise = *MAPICorec::IMAPITable_Advise;
*Unadvise = *MAPICorec::IMAPITable_Unadvise;
*GetStatus = *MAPICorec::IMAPITable_GetStatus;
*SetColumns = *MAPICorec::IMAPITable_SetColumns;
*QueryColumns = *MAPICorec::IMAPITable_QueryColumns;
*GetRowCount = *MAPICorec::IMAPITable_GetRowCount;
*SeekRow = *MAPICorec::IMAPITable_SeekRow;
*SeekRowApprox = *MAPICorec::IMAPITable_SeekRowApprox;
*QueryPosition = *MAPICorec::IMAPITable_QueryPosition;
*FindRow = *MAPICorec::IMAPITable_FindRow;
*Restrict = *MAPICorec::IMAPITable_Restrict;
*CreateBookmark = *MAPICorec::IMAPITable_CreateBookmark;
*FreeBookmark = *MAPICorec::IMAPITable_FreeBookmark;
*SortTable = *MAPICorec::IMAPITable_SortTable;
*QuerySortOrder = *MAPICorec::IMAPITable_QuerySortOrder;
*QueryRows = *MAPICorec::IMAPITable_QueryRows;
*Abort = *MAPICorec::IMAPITable_Abort;
*ExpandRow = *MAPICorec::IMAPITable_ExpandRow;
*CollapseRow = *MAPICorec::IMAPITable_CollapseRow;
*WaitForCompletion = *MAPICorec::IMAPITable_WaitForCompletion;
*GetCollapseState = *MAPICorec::IMAPITable_GetCollapseState;
*SetCollapseState = *MAPICorec::IMAPITable_SetCollapseState;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPITable($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IProfSect ##############

package MAPICore::IProfSect;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IProfSect($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPIProgress ##############

package MAPICore::IMAPIProgress;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*Progress = *MAPICorec::IMAPIProgress_Progress;
*GetFlags = *MAPICorec::IMAPIProgress_GetFlags;
*GetMax = *MAPICorec::IMAPIProgress_GetMax;
*GetMin = *MAPICorec::IMAPIProgress_GetMin;
*SetLimits = *MAPICorec::IMAPIProgress_SetLimits;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPIProgress($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IProviderAdmin ##############

package MAPICore::IProviderAdmin;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IProviderAdmin_GetLastError;
*GetProviderTable = *MAPICorec::IProviderAdmin_GetProviderTable;
*CreateProvider = *MAPICorec::IProviderAdmin_CreateProvider;
*DeleteProvider = *MAPICorec::IProviderAdmin_DeleteProvider;
*OpenProfileSection = *MAPICorec::IProviderAdmin_OpenProfileSection;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IProviderAdmin($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::MAPIINIT_0 ##############

package MAPICore::MAPIINIT_0;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore );
%OWNER = ();
%ITERATORS = ();
*swig_ulVersion_get = *MAPICorec::MAPIINIT_0_ulVersion_get;
*swig_ulVersion_set = *MAPICorec::MAPIINIT_0_ulVersion_set;
*swig_ulFlags_get = *MAPICorec::MAPIINIT_0_ulFlags_get;
*swig_ulFlags_set = *MAPICorec::MAPIINIT_0_ulFlags_set;
sub new {
    my $pkg = shift;
    my $self = MAPICorec::new_MAPIINIT_0(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_MAPIINIT_0($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMAPISession ##############

package MAPICore::IMAPISession;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IMAPISession_GetLastError;
*GetMsgStoresTable = *MAPICorec::IMAPISession_GetMsgStoresTable;
*OpenMsgStore = *MAPICorec::IMAPISession_OpenMsgStore;
*OpenAddressBook = *MAPICorec::IMAPISession_OpenAddressBook;
*OpenProfileSection = *MAPICorec::IMAPISession_OpenProfileSection;
*GetStatusTable = *MAPICorec::IMAPISession_GetStatusTable;
*OpenEntry = *MAPICorec::IMAPISession_OpenEntry;
*CompareEntryIDs = *MAPICorec::IMAPISession_CompareEntryIDs;
*Advise = *MAPICorec::IMAPISession_Advise;
*Unadvise = *MAPICorec::IMAPISession_Unadvise;
*MessageOptions = *MAPICorec::IMAPISession_MessageOptions;
*QueryDefaultMessageOpt = *MAPICorec::IMAPISession_QueryDefaultMessageOpt;
*EnumAdrTypes = *MAPICorec::IMAPISession_EnumAdrTypes;
*QueryIdentity = *MAPICorec::IMAPISession_QueryIdentity;
*Logoff = *MAPICorec::IMAPISession_Logoff;
*SetDefaultStore = *MAPICorec::IMAPISession_SetDefaultStore;
*AdminServices = *MAPICorec::IMAPISession_AdminServices;
*ShowForm = *MAPICorec::IMAPISession_ShowForm;
*PrepareForm = *MAPICorec::IMAPISession_PrepareForm;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMAPISession($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IAddrBook ##############

package MAPICore::IAddrBook;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIProp MAPICore );
%OWNER = ();
%ITERATORS = ();
*OpenEntry = *MAPICorec::IAddrBook_OpenEntry;
*CompareEntryIDs = *MAPICorec::IAddrBook_CompareEntryIDs;
*Advise = *MAPICorec::IAddrBook_Advise;
*Unadvise = *MAPICorec::IAddrBook_Unadvise;
*CreateOneOff = *MAPICorec::IAddrBook_CreateOneOff;
*NewEntry = *MAPICorec::IAddrBook_NewEntry;
*ResolveName = *MAPICorec::IAddrBook_ResolveName;
*Address = *MAPICorec::IAddrBook_Address;
*Details = *MAPICorec::IAddrBook_Details;
*RecipOptions = *MAPICorec::IAddrBook_RecipOptions;
*QueryDefaultRecipOpt = *MAPICorec::IAddrBook_QueryDefaultRecipOpt;
*GetPAB = *MAPICorec::IAddrBook_GetPAB;
*SetPAB = *MAPICorec::IAddrBook_SetPAB;
*GetDefaultDir = *MAPICorec::IAddrBook_GetDefaultDir;
*SetDefaultDir = *MAPICorec::IAddrBook_SetDefaultDir;
*GetSearchPath = *MAPICorec::IAddrBook_GetSearchPath;
*SetSearchPath = *MAPICorec::IAddrBook_SetSearchPath;
*PrepareRecips = *MAPICorec::IAddrBook_PrepareRecips;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IAddrBook($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IProfAdmin ##############

package MAPICore::IProfAdmin;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IProfAdmin_GetLastError;
*GetProfileTable = *MAPICorec::IProfAdmin_GetProfileTable;
*CreateProfile = *MAPICorec::IProfAdmin_CreateProfile;
*DeleteProfile = *MAPICorec::IProfAdmin_DeleteProfile;
*ChangeProfilePassword = *MAPICorec::IProfAdmin_ChangeProfilePassword;
*CopyProfile = *MAPICorec::IProfAdmin_CopyProfile;
*RenameProfile = *MAPICorec::IProfAdmin_RenameProfile;
*SetDefaultProfile = *MAPICorec::IProfAdmin_SetDefaultProfile;
*AdminServices = *MAPICorec::IProfAdmin_AdminServices;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IProfAdmin($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IMsgServiceAdmin ##############

package MAPICore::IMsgServiceAdmin;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IMsgServiceAdmin_GetLastError;
*GetMsgServiceTable = *MAPICorec::IMsgServiceAdmin_GetMsgServiceTable;
*CreateMsgService = *MAPICorec::IMsgServiceAdmin_CreateMsgService;
*DeleteMsgService = *MAPICorec::IMsgServiceAdmin_DeleteMsgService;
*CopyMsgService = *MAPICorec::IMsgServiceAdmin_CopyMsgService;
*RenameMsgService = *MAPICorec::IMsgServiceAdmin_RenameMsgService;
*ConfigureMsgService = *MAPICorec::IMsgServiceAdmin_ConfigureMsgService;
*OpenProfileSection = *MAPICorec::IMsgServiceAdmin_OpenProfileSection;
*MsgServiceTransportOrder = *MAPICorec::IMsgServiceAdmin_MsgServiceTransportOrder;
*AdminProviders = *MAPICorec::IMsgServiceAdmin_AdminProviders;
*SetPrimaryIdentity = *MAPICorec::IMsgServiceAdmin_SetPrimaryIdentity;
*GetProviderTable = *MAPICorec::IMsgServiceAdmin_GetProviderTable;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IMsgServiceAdmin($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::MAPINotifSink ##############

package MAPICore::MAPINotifSink;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IMAPIAdviseSink MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetNotifications = *MAPICorec::MAPINotifSink_GetNotifications;
sub new {
    my $pkg = shift;
    my $self = MAPICorec::new_MAPINotifSink(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_MAPINotifSink($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IExchangeImportContentsChanges ##############

package MAPICore::IExchangeImportContentsChanges;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IExchangeImportContentsChanges_GetLastError;
*Config = *MAPICorec::IExchangeImportContentsChanges_Config;
*UpdateState = *MAPICorec::IExchangeImportContentsChanges_UpdateState;
*ImportMessageChange = *MAPICorec::IExchangeImportContentsChanges_ImportMessageChange;
*ImportMessageDeletion = *MAPICorec::IExchangeImportContentsChanges_ImportMessageDeletion;
*ImportPerUserReadStateChange = *MAPICorec::IExchangeImportContentsChanges_ImportPerUserReadStateChange;
*ImportMessageMove = *MAPICorec::IExchangeImportContentsChanges_ImportMessageMove;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IExchangeImportContentsChanges($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IExchangeImportHierarchyChanges ##############

package MAPICore::IExchangeImportHierarchyChanges;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IExchangeImportHierarchyChanges_GetLastError;
*Config = *MAPICorec::IExchangeImportHierarchyChanges_Config;
*UpdateState = *MAPICorec::IExchangeImportHierarchyChanges_UpdateState;
*ImportFolderChange = *MAPICorec::IExchangeImportHierarchyChanges_ImportFolderChange;
*ImportFolderDeletion = *MAPICorec::IExchangeImportHierarchyChanges_ImportFolderDeletion;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IExchangeImportHierarchyChanges($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IExchangeExportChanges ##############

package MAPICore::IExchangeExportChanges;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IExchangeExportChanges_GetLastError;
*Config = *MAPICorec::IExchangeExportChanges_Config;
*Synchronize = *MAPICorec::IExchangeExportChanges_Synchronize;
*UpdateState = *MAPICorec::IExchangeExportChanges_UpdateState;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IExchangeExportChanges($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IExchangeManageStore ##############

package MAPICore::IExchangeManageStore;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*CreateStoreEntryID = *MAPICorec::IExchangeManageStore_CreateStoreEntryID;
*EntryIDFromSourceKey = *MAPICorec::IExchangeManageStore_EntryIDFromSourceKey;
*GetRights = *MAPICorec::IExchangeManageStore_GetRights;
*GetMailboxTable = *MAPICorec::IExchangeManageStore_GetMailboxTable;
*GetPublicFolderTable = *MAPICorec::IExchangeManageStore_GetPublicFolderTable;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IExchangeManageStore($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IExchangeModifyTable ##############

package MAPICore::IExchangeModifyTable;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IExchangeModifyTable_GetLastError;
*GetTable = *MAPICorec::IExchangeModifyTable_GetTable;
*ModifyTable = *MAPICorec::IExchangeModifyTable_ModifyTable;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IExchangeModifyTable($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECServiceAdmin ##############

package MAPICore::IECServiceAdmin;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*CreateStore = *MAPICorec::IECServiceAdmin_CreateStore;
*CreateEmptyStore = *MAPICorec::IECServiceAdmin_CreateEmptyStore;
*ResolveStore = *MAPICorec::IECServiceAdmin_ResolveStore;
*HookStore = *MAPICorec::IECServiceAdmin_HookStore;
*UnhookStore = *MAPICorec::IECServiceAdmin_UnhookStore;
*RemoveStore = *MAPICorec::IECServiceAdmin_RemoveStore;
*CreateUser = *MAPICorec::IECServiceAdmin_CreateUser;
*DeleteUser = *MAPICorec::IECServiceAdmin_DeleteUser;
*SetUser = *MAPICorec::IECServiceAdmin_SetUser;
*GetUser = *MAPICorec::IECServiceAdmin_GetUser;
*ResolveUserName = *MAPICorec::IECServiceAdmin_ResolveUserName;
*GetUserList = *MAPICorec::IECServiceAdmin_GetUserList;
*GetSendAsList = *MAPICorec::IECServiceAdmin_GetSendAsList;
*AddSendAsUser = *MAPICorec::IECServiceAdmin_AddSendAsUser;
*DelSendAsUser = *MAPICorec::IECServiceAdmin_DelSendAsUser;
*GetUserClientUpdateStatus = *MAPICorec::IECServiceAdmin_GetUserClientUpdateStatus;
*RemoveAllObjects = *MAPICorec::IECServiceAdmin_RemoveAllObjects;
*CreateGroup = *MAPICorec::IECServiceAdmin_CreateGroup;
*DeleteGroup = *MAPICorec::IECServiceAdmin_DeleteGroup;
*SetGroup = *MAPICorec::IECServiceAdmin_SetGroup;
*GetGroup = *MAPICorec::IECServiceAdmin_GetGroup;
*ResolveGroupName = *MAPICorec::IECServiceAdmin_ResolveGroupName;
*GetGroupList = *MAPICorec::IECServiceAdmin_GetGroupList;
*DeleteGroupUser = *MAPICorec::IECServiceAdmin_DeleteGroupUser;
*AddGroupUser = *MAPICorec::IECServiceAdmin_AddGroupUser;
*GetUserListOfGroup = *MAPICorec::IECServiceAdmin_GetUserListOfGroup;
*GetGroupListOfUser = *MAPICorec::IECServiceAdmin_GetGroupListOfUser;
*CreateCompany = *MAPICorec::IECServiceAdmin_CreateCompany;
*DeleteCompany = *MAPICorec::IECServiceAdmin_DeleteCompany;
*SetCompany = *MAPICorec::IECServiceAdmin_SetCompany;
*GetCompany = *MAPICorec::IECServiceAdmin_GetCompany;
*ResolveCompanyName = *MAPICorec::IECServiceAdmin_ResolveCompanyName;
*GetCompanyList = *MAPICorec::IECServiceAdmin_GetCompanyList;
*AddCompanyToRemoteViewList = *MAPICorec::IECServiceAdmin_AddCompanyToRemoteViewList;
*DelCompanyFromRemoteViewList = *MAPICorec::IECServiceAdmin_DelCompanyFromRemoteViewList;
*GetRemoteViewList = *MAPICorec::IECServiceAdmin_GetRemoteViewList;
*AddUserToRemoteAdminList = *MAPICorec::IECServiceAdmin_AddUserToRemoteAdminList;
*DelUserFromRemoteAdminList = *MAPICorec::IECServiceAdmin_DelUserFromRemoteAdminList;
*GetRemoteAdminList = *MAPICorec::IECServiceAdmin_GetRemoteAdminList;
*SyncUsers = *MAPICorec::IECServiceAdmin_SyncUsers;
*GetQuota = *MAPICorec::IECServiceAdmin_GetQuota;
*SetQuota = *MAPICorec::IECServiceAdmin_SetQuota;
*AddQuotaRecipient = *MAPICorec::IECServiceAdmin_AddQuotaRecipient;
*DeleteQuotaRecipient = *MAPICorec::IECServiceAdmin_DeleteQuotaRecipient;
*GetQuotaRecipients = *MAPICorec::IECServiceAdmin_GetQuotaRecipients;
*GetQuotaStatus = *MAPICorec::IECServiceAdmin_GetQuotaStatus;
*PurgeSoftDelete = *MAPICorec::IECServiceAdmin_PurgeSoftDelete;
*PurgeCache = *MAPICorec::IECServiceAdmin_PurgeCache;
*OpenUserStoresTable = *MAPICorec::IECServiceAdmin_OpenUserStoresTable;
*GetServerDetails = *MAPICorec::IECServiceAdmin_GetServerDetails;
*ResolvePseudoUrl = *MAPICorec::IECServiceAdmin_ResolvePseudoUrl;
*GetPublicStoreEntryID = *MAPICorec::IECServiceAdmin_GetPublicStoreEntryID;
*GetArchiveStoreEntryID = *MAPICorec::IECServiceAdmin_GetArchiveStoreEntryID;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECServiceAdmin($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECSpooler ##############

package MAPICore::IECSpooler;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetMasterOutgoingTable = *MAPICorec::IECSpooler_GetMasterOutgoingTable;
*DeleteFromMasterOutgoingTable = *MAPICorec::IECSpooler_DeleteFromMasterOutgoingTable;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECSpooler($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECTestProtocol ##############

package MAPICore::IECTestProtocol;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*TestPerform = *MAPICorec::IECTestProtocol_TestPerform;
*TestSet = *MAPICorec::IECTestProtocol_TestSet;
*TestGet = *MAPICorec::IECTestProtocol_TestGet;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECTestProtocol($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECMultiStoreTable ##############

package MAPICore::IECMultiStoreTable;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*OpenMultiStoreTable = *MAPICorec::IECMultiStoreTable_OpenMultiStoreTable;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECMultiStoreTable($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECLicense ##############

package MAPICore::IECLicense;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*LicenseAuth = *MAPICorec::IECLicense_LicenseAuth;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECLicense($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECExportChanges ##############

package MAPICore::IECExportChanges;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetChangeCount = *MAPICorec::IECExportChanges_GetChangeCount;
*SetMessageInterface = *MAPICorec::IECExportChanges_SetMessageInterface;
*SetLogger = *MAPICorec::IECExportChanges_SetLogger;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECExportChanges($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECChangeAdvisor ##############

package MAPICore::IECChangeAdvisor;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetLastError = *MAPICorec::IECChangeAdvisor_GetLastError;
*Config = *MAPICorec::IECChangeAdvisor_Config;
*UpdateState = *MAPICorec::IECChangeAdvisor_UpdateState;
*AddKeys = *MAPICorec::IECChangeAdvisor_AddKeys;
*RemoveKeys = *MAPICorec::IECChangeAdvisor_RemoveKeys;
*IsMonitoringSyncId = *MAPICorec::IECChangeAdvisor_IsMonitoringSyncId;
*UpdateSyncState = *MAPICorec::IECChangeAdvisor_UpdateSyncState;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECChangeAdvisor($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECChangeAdviseSink ##############

package MAPICore::IECChangeAdviseSink;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*OnNotify = *MAPICorec::IECChangeAdviseSink_OnNotify;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECChangeAdviseSink($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECImportContentsChanges ##############

package MAPICore::IECImportContentsChanges;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IExchangeImportContentsChanges MAPICore );
%OWNER = ();
%ITERATORS = ();
*ConfigForConversionStream = *MAPICorec::IECImportContentsChanges_ConfigForConversionStream;
*ImportMessageChangeAsAStream = *MAPICorec::IECImportContentsChanges_ImportMessageChangeAsAStream;
*SetMessageInterface = *MAPICorec::IECImportContentsChanges_SetMessageInterface;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECImportContentsChanges($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : MAPICore::IECSingleInstance ##############

package MAPICore::IECSingleInstance;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( MAPICore::IUnknown MAPICore );
%OWNER = ();
%ITERATORS = ();
*GetSingleInstanceId = *MAPICorec::IECSingleInstance_GetSingleInstanceId;
*SetSingleInstanceId = *MAPICorec::IECSingleInstance_SetSingleInstanceId;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        MAPICorec::delete_IECSingleInstance($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- CONSTANT STUBS -------

package MAPICore;

sub STGM_DIRECT () { $MAPICorec::STGM_DIRECT }
sub STGM_TRANSACTED () { $MAPICorec::STGM_TRANSACTED }
sub STGM_SIMPLE () { $MAPICorec::STGM_SIMPLE }
sub STGM_READ () { $MAPICorec::STGM_READ }
sub STGM_WRITE () { $MAPICorec::STGM_WRITE }
sub STGM_READWRITE () { $MAPICorec::STGM_READWRITE }
sub STGM_SHARE_DENY_NONE () { $MAPICorec::STGM_SHARE_DENY_NONE }
sub STGM_SHARE_DENY_READ () { $MAPICorec::STGM_SHARE_DENY_READ }
sub STGM_SHARE_DENY_WRITE () { $MAPICorec::STGM_SHARE_DENY_WRITE }
sub STGM_SHARE_EXCLUSIVE () { $MAPICorec::STGM_SHARE_EXCLUSIVE }
sub STGM_PRIORITY () { $MAPICorec::STGM_PRIORITY }
sub STGM_DELETEONRELEASE () { $MAPICorec::STGM_DELETEONRELEASE }
sub STGM_NOSCRATCH () { $MAPICorec::STGM_NOSCRATCH }
sub STGM_CREATE () { $MAPICorec::STGM_CREATE }
sub STGM_CONVERT () { $MAPICorec::STGM_CONVERT }
sub STGM_FAILIFTHERE () { $MAPICorec::STGM_FAILIFTHERE }
sub STGM_NOSNAPSHOT () { $MAPICorec::STGM_NOSNAPSHOT }
sub STGM_DIRECT_SWMR () { $MAPICorec::STGM_DIRECT_SWMR }
sub STGTY_STORAGE () { $MAPICorec::STGTY_STORAGE }
sub STGTY_STREAM () { $MAPICorec::STGTY_STREAM }
sub STGTY_LOCKBYTES () { $MAPICorec::STGTY_LOCKBYTES }
sub STGTY_PROPERTY () { $MAPICorec::STGTY_PROPERTY }
sub STREAM_SEEK_SET () { $MAPICorec::STREAM_SEEK_SET }
sub STREAM_SEEK_CUR () { $MAPICorec::STREAM_SEEK_CUR }
sub STREAM_SEEK_END () { $MAPICorec::STREAM_SEEK_END }
sub LOCK_WRITE () { $MAPICorec::LOCK_WRITE }
sub LOCK_EXCLUSIVE () { $MAPICorec::LOCK_EXCLUSIVE }
sub LOCK_ONLYONCE () { $MAPICorec::LOCK_ONLYONCE }
sub STATFLAG_DEFAULT () { $MAPICorec::STATFLAG_DEFAULT }
sub STATFLAG_NONAME () { $MAPICorec::STATFLAG_NONAME }
sub STATFLAG_NOOPEN () { $MAPICorec::STATFLAG_NOOPEN }
sub MAPI_MODIFY () { $MAPICorec::MAPI_MODIFY }
sub MAPI_ACCESS_MODIFY () { $MAPICorec::MAPI_ACCESS_MODIFY }
sub MAPI_ACCESS_READ () { $MAPICorec::MAPI_ACCESS_READ }
sub MAPI_ACCESS_DELETE () { $MAPICorec::MAPI_ACCESS_DELETE }
sub MAPI_ACCESS_CREATE_HIERARCHY () { $MAPICorec::MAPI_ACCESS_CREATE_HIERARCHY }
sub MAPI_ACCESS_CREATE_CONTENTS () { $MAPICorec::MAPI_ACCESS_CREATE_CONTENTS }
sub MAPI_ACCESS_CREATE_ASSOCIATED () { $MAPICorec::MAPI_ACCESS_CREATE_ASSOCIATED }
sub MAPI_UNICODE () { $MAPICorec::MAPI_UNICODE }
sub hrSuccess () { $MAPICorec::hrSuccess }
sub MAPI_SHORTTERM () { $MAPICorec::MAPI_SHORTTERM }
sub MAPI_NOTRECIP () { $MAPICorec::MAPI_NOTRECIP }
sub MAPI_THISSESSION () { $MAPICorec::MAPI_THISSESSION }
sub MAPI_NOW () { $MAPICorec::MAPI_NOW }
sub MAPI_NOTRESERVED () { $MAPICorec::MAPI_NOTRESERVED }
sub MAPI_COMPOUND () { $MAPICorec::MAPI_COMPOUND }
sub MAPI_ONE_OFF_UNICODE () { $MAPICorec::MAPI_ONE_OFF_UNICODE }
sub MAPI_ONE_OFF_NO_RICH_INFO () { $MAPICorec::MAPI_ONE_OFF_NO_RICH_INFO }
sub MAPI_STORE () { $MAPICorec::MAPI_STORE }
sub MAPI_ADDRBOOK () { $MAPICorec::MAPI_ADDRBOOK }
sub MAPI_FOLDER () { $MAPICorec::MAPI_FOLDER }
sub MAPI_ABCONT () { $MAPICorec::MAPI_ABCONT }
sub MAPI_MESSAGE () { $MAPICorec::MAPI_MESSAGE }
sub MAPI_MAILUSER () { $MAPICorec::MAPI_MAILUSER }
sub MAPI_ATTACH () { $MAPICorec::MAPI_ATTACH }
sub MAPI_DISTLIST () { $MAPICorec::MAPI_DISTLIST }
sub MAPI_PROFSECT () { $MAPICorec::MAPI_PROFSECT }
sub MAPI_STATUS () { $MAPICorec::MAPI_STATUS }
sub MAPI_SESSION () { $MAPICorec::MAPI_SESSION }
sub MAPI_FORMINFO () { $MAPICorec::MAPI_FORMINFO }
sub MV_FLAG () { $MAPICorec::MV_FLAG }
sub PT_UNSPECIFIED () { $MAPICorec::PT_UNSPECIFIED }
sub PT_NULL () { $MAPICorec::PT_NULL }
sub PT_SHORT () { $MAPICorec::PT_SHORT }
sub PT_LONG () { $MAPICorec::PT_LONG }
sub PT_FLOAT () { $MAPICorec::PT_FLOAT }
sub PT_DOUBLE () { $MAPICorec::PT_DOUBLE }
sub PT_CURRENCY () { $MAPICorec::PT_CURRENCY }
sub PT_APPTIME () { $MAPICorec::PT_APPTIME }
sub PT_ERROR () { $MAPICorec::PT_ERROR }
sub PT_BOOLEAN () { $MAPICorec::PT_BOOLEAN }
sub PT_OBJECT () { $MAPICorec::PT_OBJECT }
sub PT_LONGLONG () { $MAPICorec::PT_LONGLONG }
sub PT_STRING8 () { $MAPICorec::PT_STRING8 }
sub PT_UNICODE () { $MAPICorec::PT_UNICODE }
sub PT_SYSTIME () { $MAPICorec::PT_SYSTIME }
sub PT_CLSID () { $MAPICorec::PT_CLSID }
sub PT_BINARY () { $MAPICorec::PT_BINARY }
sub PT_I2 () { $MAPICorec::PT_I2 }
sub PT_I4 () { $MAPICorec::PT_I4 }
sub PT_R4 () { $MAPICorec::PT_R4 }
sub PT_R8 () { $MAPICorec::PT_R8 }
sub PT_I8 () { $MAPICorec::PT_I8 }
sub PT_MV_SHORT () { $MAPICorec::PT_MV_SHORT }
sub PT_MV_LONG () { $MAPICorec::PT_MV_LONG }
sub PT_MV_FLOAT () { $MAPICorec::PT_MV_FLOAT }
sub PT_MV_DOUBLE () { $MAPICorec::PT_MV_DOUBLE }
sub PT_MV_CURRENCY () { $MAPICorec::PT_MV_CURRENCY }
sub PT_MV_APPTIME () { $MAPICorec::PT_MV_APPTIME }
sub PT_MV_SYSTIME () { $MAPICorec::PT_MV_SYSTIME }
sub PT_MV_STRING8 () { $MAPICorec::PT_MV_STRING8 }
sub PT_MV_BINARY () { $MAPICorec::PT_MV_BINARY }
sub PT_MV_UNICODE () { $MAPICorec::PT_MV_UNICODE }
sub PT_MV_CLSID () { $MAPICorec::PT_MV_CLSID }
sub PT_MV_LONGLONG () { $MAPICorec::PT_MV_LONGLONG }
sub PT_MV_I2 () { $MAPICorec::PT_MV_I2 }
sub PT_MV_I4 () { $MAPICorec::PT_MV_I4 }
sub PT_MV_R4 () { $MAPICorec::PT_MV_R4 }
sub PT_MV_R8 () { $MAPICorec::PT_MV_R8 }
sub PT_MV_I8 () { $MAPICorec::PT_MV_I8 }
sub MV_INSTANCE () { $MAPICorec::MV_INSTANCE }
sub MVI_FLAG () { $MAPICorec::MVI_FLAG }
sub MAPI_ERROR_VERSION () { $MAPICorec::MAPI_ERROR_VERSION }
sub KEEP_OPEN_READONLY () { $MAPICorec::KEEP_OPEN_READONLY }
sub KEEP_OPEN_READWRITE () { $MAPICorec::KEEP_OPEN_READWRITE }
sub FORCE_SAVE () { $MAPICorec::FORCE_SAVE }
sub MAPI_CREATE () { $MAPICorec::MAPI_CREATE }
sub STREAM_APPEND () { $MAPICorec::STREAM_APPEND }
sub MAPI_MOVE () { $MAPICorec::MAPI_MOVE }
sub MAPI_NOREPLACE () { $MAPICorec::MAPI_NOREPLACE }
sub MAPI_DECLINE_OK () { $MAPICorec::MAPI_DECLINE_OK }
sub MAPI_NO_STRINGS () { $MAPICorec::MAPI_NO_STRINGS }
sub MAPI_NO_IDS () { $MAPICorec::MAPI_NO_IDS }
sub MNID_ID () { $MAPICorec::MNID_ID }
sub MNID_STRING () { $MAPICorec::MNID_STRING }
sub MAPI_BEST_ACCESS () { $MAPICorec::MAPI_BEST_ACCESS }
sub CONVENIENT_DEPTH () { $MAPICorec::CONVENIENT_DEPTH }
sub SEARCH_RUNNING () { $MAPICorec::SEARCH_RUNNING }
sub SEARCH_REBUILD () { $MAPICorec::SEARCH_REBUILD }
sub SEARCH_RECURSIVE () { $MAPICorec::SEARCH_RECURSIVE }
sub SEARCH_FOREGROUND () { $MAPICorec::SEARCH_FOREGROUND }
sub STOP_SEARCH () { $MAPICorec::STOP_SEARCH }
sub RESTART_SEARCH () { $MAPICorec::RESTART_SEARCH }
sub RECURSIVE_SEARCH () { $MAPICorec::RECURSIVE_SEARCH }
sub SHALLOW_SEARCH () { $MAPICorec::SHALLOW_SEARCH }
sub FOREGROUND_SEARCH () { $MAPICorec::FOREGROUND_SEARCH }
sub BACKGROUND_SEARCH () { $MAPICorec::BACKGROUND_SEARCH }
sub fnevCriticalError () { $MAPICorec::fnevCriticalError }
sub fnevNewMail () { $MAPICorec::fnevNewMail }
sub fnevObjectCreated () { $MAPICorec::fnevObjectCreated }
sub fnevObjectDeleted () { $MAPICorec::fnevObjectDeleted }
sub fnevObjectModified () { $MAPICorec::fnevObjectModified }
sub fnevObjectMoved () { $MAPICorec::fnevObjectMoved }
sub fnevObjectCopied () { $MAPICorec::fnevObjectCopied }
sub fnevSearchComplete () { $MAPICorec::fnevSearchComplete }
sub fnevTableModified () { $MAPICorec::fnevTableModified }
sub fnevStatusObjectModified () { $MAPICorec::fnevStatusObjectModified }
sub fnevReservedForMapi () { $MAPICorec::fnevReservedForMapi }
sub fnevExtended () { $MAPICorec::fnevExtended }
sub TABLE_CHANGED () { $MAPICorec::TABLE_CHANGED }
sub TABLE_ERROR () { $MAPICorec::TABLE_ERROR }
sub TABLE_ROW_ADDED () { $MAPICorec::TABLE_ROW_ADDED }
sub TABLE_ROW_DELETED () { $MAPICorec::TABLE_ROW_DELETED }
sub TABLE_ROW_MODIFIED () { $MAPICorec::TABLE_ROW_MODIFIED }
sub TABLE_SORT_DONE () { $MAPICorec::TABLE_SORT_DONE }
sub TABLE_RESTRICT_DONE () { $MAPICorec::TABLE_RESTRICT_DONE }
sub TABLE_SETCOL_DONE () { $MAPICorec::TABLE_SETCOL_DONE }
sub TABLE_RELOAD () { $MAPICorec::TABLE_RELOAD }
sub STORE_ENTRYID_UNIQUE () { $MAPICorec::STORE_ENTRYID_UNIQUE }
sub STORE_READONLY () { $MAPICorec::STORE_READONLY }
sub STORE_SEARCH_OK () { $MAPICorec::STORE_SEARCH_OK }
sub STORE_MODIFY_OK () { $MAPICorec::STORE_MODIFY_OK }
sub STORE_CREATE_OK () { $MAPICorec::STORE_CREATE_OK }
sub STORE_ATTACH_OK () { $MAPICorec::STORE_ATTACH_OK }
sub STORE_OLE_OK () { $MAPICorec::STORE_OLE_OK }
sub STORE_SUBMIT_OK () { $MAPICorec::STORE_SUBMIT_OK }
sub STORE_NOTIFY_OK () { $MAPICorec::STORE_NOTIFY_OK }
sub STORE_MV_PROPS_OK () { $MAPICorec::STORE_MV_PROPS_OK }
sub STORE_CATEGORIZE_OK () { $MAPICorec::STORE_CATEGORIZE_OK }
sub STORE_RTF_OK () { $MAPICorec::STORE_RTF_OK }
sub STORE_RESTRICTION_OK () { $MAPICorec::STORE_RESTRICTION_OK }
sub STORE_SORT_OK () { $MAPICorec::STORE_SORT_OK }
sub STORE_PUBLIC_FOLDERS () { $MAPICorec::STORE_PUBLIC_FOLDERS }
sub STORE_UNCOMPRESSED_RTF () { $MAPICorec::STORE_UNCOMPRESSED_RTF }
sub STORE_HAS_SEARCHES () { $MAPICorec::STORE_HAS_SEARCHES }
sub LOGOFF_NO_WAIT () { $MAPICorec::LOGOFF_NO_WAIT }
sub LOGOFF_ORDERLY () { $MAPICorec::LOGOFF_ORDERLY }
sub LOGOFF_PURGE () { $MAPICorec::LOGOFF_PURGE }
sub LOGOFF_ABORT () { $MAPICorec::LOGOFF_ABORT }
sub LOGOFF_QUIET () { $MAPICorec::LOGOFF_QUIET }
sub LOGOFF_COMPLETE () { $MAPICorec::LOGOFF_COMPLETE }
sub LOGOFF_INBOUND () { $MAPICorec::LOGOFF_INBOUND }
sub LOGOFF_OUTBOUND () { $MAPICorec::LOGOFF_OUTBOUND }
sub LOGOFF_OUTBOUND_QUEUE () { $MAPICorec::LOGOFF_OUTBOUND_QUEUE }
sub MSG_LOCKED () { $MAPICorec::MSG_LOCKED }
sub MSG_UNLOCKED () { $MAPICorec::MSG_UNLOCKED }
sub FOLDER_IPM_SUBTREE_VALID () { $MAPICorec::FOLDER_IPM_SUBTREE_VALID }
sub FOLDER_IPM_INBOX_VALID () { $MAPICorec::FOLDER_IPM_INBOX_VALID }
sub FOLDER_IPM_OUTBOX_VALID () { $MAPICorec::FOLDER_IPM_OUTBOX_VALID }
sub FOLDER_IPM_WASTEBASKET_VALID () { $MAPICorec::FOLDER_IPM_WASTEBASKET_VALID }
sub FOLDER_IPM_SENTMAIL_VALID () { $MAPICorec::FOLDER_IPM_SENTMAIL_VALID }
sub FOLDER_VIEWS_VALID () { $MAPICorec::FOLDER_VIEWS_VALID }
sub FOLDER_COMMON_VIEWS_VALID () { $MAPICorec::FOLDER_COMMON_VIEWS_VALID }
sub FOLDER_FINDER_VALID () { $MAPICorec::FOLDER_FINDER_VALID }
sub FOLDER_ROOT () { $MAPICorec::FOLDER_ROOT }
sub FOLDER_GENERIC () { $MAPICorec::FOLDER_GENERIC }
sub FOLDER_SEARCH () { $MAPICorec::FOLDER_SEARCH }
sub MESSAGE_MOVE () { $MAPICorec::MESSAGE_MOVE }
sub MESSAGE_DIALOG () { $MAPICorec::MESSAGE_DIALOG }
sub OPEN_IF_EXISTS () { $MAPICorec::OPEN_IF_EXISTS }
sub DEL_MESSAGES () { $MAPICorec::DEL_MESSAGES }
sub FOLDER_DIALOG () { $MAPICorec::FOLDER_DIALOG }
sub DEL_FOLDERS () { $MAPICorec::DEL_FOLDERS }
sub DEL_ASSOCIATED () { $MAPICorec::DEL_ASSOCIATED }
sub FOLDER_MOVE () { $MAPICorec::FOLDER_MOVE }
sub COPY_SUBFOLDERS () { $MAPICorec::COPY_SUBFOLDERS }
sub MSGSTATUS_HIGHLIGHTED () { $MAPICorec::MSGSTATUS_HIGHLIGHTED }
sub MSGSTATUS_TAGGED () { $MAPICorec::MSGSTATUS_TAGGED }
sub MSGSTATUS_HIDDEN () { $MAPICorec::MSGSTATUS_HIDDEN }
sub MSGSTATUS_DELMARKED () { $MAPICorec::MSGSTATUS_DELMARKED }
sub MSGSTATUS_REMOTE_DOWNLOAD () { $MAPICorec::MSGSTATUS_REMOTE_DOWNLOAD }
sub MSGSTATUS_REMOTE_DELETE () { $MAPICorec::MSGSTATUS_REMOTE_DELETE }
sub RECURSIVE_SORT () { $MAPICorec::RECURSIVE_SORT }
sub FLDSTATUS_HIGHLIGHTED () { $MAPICorec::FLDSTATUS_HIGHLIGHTED }
sub FLDSTATUS_TAGGED () { $MAPICorec::FLDSTATUS_TAGGED }
sub FLDSTATUS_HIDDEN () { $MAPICorec::FLDSTATUS_HIDDEN }
sub FLDSTATUS_DELMARKED () { $MAPICorec::FLDSTATUS_DELMARKED }
sub FORCE_SUBMIT () { $MAPICorec::FORCE_SUBMIT }
sub MSGFLAG_READ () { $MAPICorec::MSGFLAG_READ }
sub MSGFLAG_UNMODIFIED () { $MAPICorec::MSGFLAG_UNMODIFIED }
sub MSGFLAG_SUBMIT () { $MAPICorec::MSGFLAG_SUBMIT }
sub MSGFLAG_UNSENT () { $MAPICorec::MSGFLAG_UNSENT }
sub MSGFLAG_HASATTACH () { $MAPICorec::MSGFLAG_HASATTACH }
sub MSGFLAG_FROMME () { $MAPICorec::MSGFLAG_FROMME }
sub MSGFLAG_ASSOCIATED () { $MAPICorec::MSGFLAG_ASSOCIATED }
sub MSGFLAG_RESEND () { $MAPICorec::MSGFLAG_RESEND }
sub MSGFLAG_RN_PENDING () { $MAPICorec::MSGFLAG_RN_PENDING }
sub MSGFLAG_NRN_PENDING () { $MAPICorec::MSGFLAG_NRN_PENDING }
sub SUBMITFLAG_LOCKED () { $MAPICorec::SUBMITFLAG_LOCKED }
sub SUBMITFLAG_PREPROCESS () { $MAPICorec::SUBMITFLAG_PREPROCESS }
sub MODRECIP_ADD () { $MAPICorec::MODRECIP_ADD }
sub MODRECIP_MODIFY () { $MAPICorec::MODRECIP_MODIFY }
sub MODRECIP_REMOVE () { $MAPICorec::MODRECIP_REMOVE }
sub SUPPRESS_RECEIPT () { $MAPICorec::SUPPRESS_RECEIPT }
sub CLEAR_READ_FLAG () { $MAPICorec::CLEAR_READ_FLAG }
sub GENERATE_RECEIPT_ONLY () { $MAPICorec::GENERATE_RECEIPT_ONLY }
sub CLEAR_RN_PENDING () { $MAPICorec::CLEAR_RN_PENDING }
sub CLEAR_NRN_PENDING () { $MAPICorec::CLEAR_NRN_PENDING }
sub ATTACH_DIALOG () { $MAPICorec::ATTACH_DIALOG }
sub SECURITY_SIGNED () { $MAPICorec::SECURITY_SIGNED }
sub SECURITY_ENCRYPTED () { $MAPICorec::SECURITY_ENCRYPTED }
sub PRIO_URGENT () { $MAPICorec::PRIO_URGENT }
sub PRIO_NORMAL () { $MAPICorec::PRIO_NORMAL }
sub PRIO_NONURGENT () { $MAPICorec::PRIO_NONURGENT }
sub SENSITIVITY_NONE () { $MAPICorec::SENSITIVITY_NONE }
sub SENSITIVITY_PERSONAL () { $MAPICorec::SENSITIVITY_PERSONAL }
sub SENSITIVITY_PRIVATE () { $MAPICorec::SENSITIVITY_PRIVATE }
sub SENSITIVITY_COMPANY_CONFIDENTIAL () { $MAPICorec::SENSITIVITY_COMPANY_CONFIDENTIAL }
sub IMPORTANCE_LOW () { $MAPICorec::IMPORTANCE_LOW }
sub IMPORTANCE_NORMAL () { $MAPICorec::IMPORTANCE_NORMAL }
sub IMPORTANCE_HIGH () { $MAPICorec::IMPORTANCE_HIGH }
sub NO_ATTACHMENT () { $MAPICorec::NO_ATTACHMENT }
sub ATTACH_BY_VALUE () { $MAPICorec::ATTACH_BY_VALUE }
sub ATTACH_BY_REFERENCE () { $MAPICorec::ATTACH_BY_REFERENCE }
sub ATTACH_BY_REF_RESOLVE () { $MAPICorec::ATTACH_BY_REF_RESOLVE }
sub ATTACH_BY_REF_ONLY () { $MAPICorec::ATTACH_BY_REF_ONLY }
sub ATTACH_EMBEDDED_MSG () { $MAPICorec::ATTACH_EMBEDDED_MSG }
sub ATTACH_OLE () { $MAPICorec::ATTACH_OLE }
sub AB_RECIPIENTS () { $MAPICorec::AB_RECIPIENTS }
sub AB_SUBCONTAINERS () { $MAPICorec::AB_SUBCONTAINERS }
sub AB_MODIFIABLE () { $MAPICorec::AB_MODIFIABLE }
sub AB_UNMODIFIABLE () { $MAPICorec::AB_UNMODIFIABLE }
sub AB_FIND_ON_OPEN () { $MAPICorec::AB_FIND_ON_OPEN }
sub AB_NOT_DEFAULT () { $MAPICorec::AB_NOT_DEFAULT }
sub CREATE_CHECK_DUP_STRICT () { $MAPICorec::CREATE_CHECK_DUP_STRICT }
sub CREATE_CHECK_DUP_LOOSE () { $MAPICorec::CREATE_CHECK_DUP_LOOSE }
sub CREATE_REPLACE () { $MAPICorec::CREATE_REPLACE }
sub MAPI_UNRESOLVED () { $MAPICorec::MAPI_UNRESOLVED }
sub MAPI_AMBIGUOUS () { $MAPICorec::MAPI_AMBIGUOUS }
sub MAPI_RESOLVED () { $MAPICorec::MAPI_RESOLVED }
sub MAPI_SEND_NO_RICH_INFO () { $MAPICorec::MAPI_SEND_NO_RICH_INFO }
sub MAPI_MH_DP_PUBLIC_UA () { $MAPICorec::MAPI_MH_DP_PUBLIC_UA }
sub MAPI_MH_DP_PRIVATE_UA () { $MAPICorec::MAPI_MH_DP_PRIVATE_UA }
sub MAPI_MH_DP_MS () { $MAPICorec::MAPI_MH_DP_MS }
sub MAPI_MH_DP_ML () { $MAPICorec::MAPI_MH_DP_ML }
sub MAPI_MH_DP_PDAU () { $MAPICorec::MAPI_MH_DP_PDAU }
sub MAPI_MH_DP_PDS_PATRON () { $MAPICorec::MAPI_MH_DP_PDS_PATRON }
sub MAPI_MH_DP_OTHER_AU () { $MAPICorec::MAPI_MH_DP_OTHER_AU }
sub TBLSTAT_COMPLETE () { $MAPICorec::TBLSTAT_COMPLETE }
sub TBLSTAT_QCHANGED () { $MAPICorec::TBLSTAT_QCHANGED }
sub TBLSTAT_SORTING () { $MAPICorec::TBLSTAT_SORTING }
sub TBLSTAT_SORT_ERROR () { $MAPICorec::TBLSTAT_SORT_ERROR }
sub TBLSTAT_SETTING_COLS () { $MAPICorec::TBLSTAT_SETTING_COLS }
sub TBLSTAT_SETCOL_ERROR () { $MAPICorec::TBLSTAT_SETCOL_ERROR }
sub TBLSTAT_RESTRICTING () { $MAPICorec::TBLSTAT_RESTRICTING }
sub TBLSTAT_RESTRICT_ERROR () { $MAPICorec::TBLSTAT_RESTRICT_ERROR }
sub TBLTYPE_SNAPSHOT () { $MAPICorec::TBLTYPE_SNAPSHOT }
sub TBLTYPE_KEYSET () { $MAPICorec::TBLTYPE_KEYSET }
sub TBLTYPE_DYNAMIC () { $MAPICorec::TBLTYPE_DYNAMIC }
sub TABLE_SORT_ASCEND () { $MAPICorec::TABLE_SORT_ASCEND }
sub TABLE_SORT_DESCEND () { $MAPICorec::TABLE_SORT_DESCEND }
sub TABLE_SORT_COMBINE () { $MAPICorec::TABLE_SORT_COMBINE }
sub TABLE_SORT_CATEG_MAX () { $MAPICorec::TABLE_SORT_CATEG_MAX }
sub TABLE_SORT_CATEG_MIN () { $MAPICorec::TABLE_SORT_CATEG_MIN }
sub BOOKMARK_BEGINNING () { $MAPICorec::BOOKMARK_BEGINNING }
sub BOOKMARK_CURRENT () { $MAPICorec::BOOKMARK_CURRENT }
sub BOOKMARK_END () { $MAPICorec::BOOKMARK_END }
sub FL_FULLSTRING () { $MAPICorec::FL_FULLSTRING }
sub FL_SUBSTRING () { $MAPICorec::FL_SUBSTRING }
sub FL_PREFIX () { $MAPICorec::FL_PREFIX }
sub FL_IGNORECASE () { $MAPICorec::FL_IGNORECASE }
sub FL_IGNORENONSPACE () { $MAPICorec::FL_IGNORENONSPACE }
sub FL_LOOSE () { $MAPICorec::FL_LOOSE }
sub RES_AND () { $MAPICorec::RES_AND }
sub RES_OR () { $MAPICorec::RES_OR }
sub RES_NOT () { $MAPICorec::RES_NOT }
sub RES_CONTENT () { $MAPICorec::RES_CONTENT }
sub RES_PROPERTY () { $MAPICorec::RES_PROPERTY }
sub RES_COMPAREPROPS () { $MAPICorec::RES_COMPAREPROPS }
sub RES_BITMASK () { $MAPICorec::RES_BITMASK }
sub RES_SIZE () { $MAPICorec::RES_SIZE }
sub RES_EXIST () { $MAPICorec::RES_EXIST }
sub RES_SUBRESTRICTION () { $MAPICorec::RES_SUBRESTRICTION }
sub RES_COMMENT () { $MAPICorec::RES_COMMENT }
sub RELOP_LT () { $MAPICorec::RELOP_LT }
sub RELOP_LE () { $MAPICorec::RELOP_LE }
sub RELOP_GT () { $MAPICorec::RELOP_GT }
sub RELOP_GE () { $MAPICorec::RELOP_GE }
sub RELOP_EQ () { $MAPICorec::RELOP_EQ }
sub RELOP_NE () { $MAPICorec::RELOP_NE }
sub RELOP_RE () { $MAPICorec::RELOP_RE }
sub BMR_EQZ () { $MAPICorec::BMR_EQZ }
sub BMR_NEZ () { $MAPICorec::BMR_NEZ }
sub TBL_ALL_COLUMNS () { $MAPICorec::TBL_ALL_COLUMNS }
sub TBL_LEAF_ROW () { $MAPICorec::TBL_LEAF_ROW }
sub TBL_EMPTY_CATEGORY () { $MAPICorec::TBL_EMPTY_CATEGORY }
sub TBL_EXPANDED_CATEGORY () { $MAPICorec::TBL_EXPANDED_CATEGORY }
sub TBL_COLLAPSED_CATEGORY () { $MAPICorec::TBL_COLLAPSED_CATEGORY }
sub TBL_NOWAIT () { $MAPICorec::TBL_NOWAIT }
sub TBL_ASYNC () { $MAPICorec::TBL_ASYNC }
sub TBL_BATCH () { $MAPICorec::TBL_BATCH }
sub DIR_BACKWARD () { $MAPICorec::DIR_BACKWARD }
sub TBL_NOADVANCE () { $MAPICorec::TBL_NOADVANCE }
sub MAPI_STORE_PROVIDER () { $MAPICorec::MAPI_STORE_PROVIDER }
sub MAPI_AB () { $MAPICorec::MAPI_AB }
sub MAPI_AB_PROVIDER () { $MAPICorec::MAPI_AB_PROVIDER }
sub MAPI_TRANSPORT_PROVIDER () { $MAPICorec::MAPI_TRANSPORT_PROVIDER }
sub MAPI_SPOOLER () { $MAPICorec::MAPI_SPOOLER }
sub MAPI_PROFILE_PROVIDER () { $MAPICorec::MAPI_PROFILE_PROVIDER }
sub MAPI_SUBSYSTEM () { $MAPICorec::MAPI_SUBSYSTEM }
sub MAPI_HOOK_PROVIDER () { $MAPICorec::MAPI_HOOK_PROVIDER }
sub STATUS_VALIDATE_STATE () { $MAPICorec::STATUS_VALIDATE_STATE }
sub STATUS_SETTINGS_DIALOG () { $MAPICorec::STATUS_SETTINGS_DIALOG }
sub STATUS_CHANGE_PASSWORD () { $MAPICorec::STATUS_CHANGE_PASSWORD }
sub STATUS_FLUSH_QUEUES () { $MAPICorec::STATUS_FLUSH_QUEUES }
sub STATUS_DEFAULT_OUTBOUND () { $MAPICorec::STATUS_DEFAULT_OUTBOUND }
sub STATUS_DEFAULT_STORE () { $MAPICorec::STATUS_DEFAULT_STORE }
sub STATUS_PRIMARY_IDENTITY () { $MAPICorec::STATUS_PRIMARY_IDENTITY }
sub STATUS_SIMPLE_STORE () { $MAPICorec::STATUS_SIMPLE_STORE }
sub STATUS_XP_PREFER_LAST () { $MAPICorec::STATUS_XP_PREFER_LAST }
sub STATUS_NO_PRIMARY_IDENTITY () { $MAPICorec::STATUS_NO_PRIMARY_IDENTITY }
sub STATUS_NO_DEFAULT_STORE () { $MAPICorec::STATUS_NO_DEFAULT_STORE }
sub STATUS_TEMP_SECTION () { $MAPICorec::STATUS_TEMP_SECTION }
sub STATUS_OWN_STORE () { $MAPICorec::STATUS_OWN_STORE }
sub STATUS_NEED_IPM_TREE () { $MAPICorec::STATUS_NEED_IPM_TREE }
sub STATUS_PRIMARY_STORE () { $MAPICorec::STATUS_PRIMARY_STORE }
sub STATUS_SECONDARY_STORE () { $MAPICorec::STATUS_SECONDARY_STORE }
sub STATUS_AVAILABLE () { $MAPICorec::STATUS_AVAILABLE }
sub STATUS_OFFLINE () { $MAPICorec::STATUS_OFFLINE }
sub STATUS_FAILURE () { $MAPICorec::STATUS_FAILURE }
sub STATUS_INBOUND_ENABLED () { $MAPICorec::STATUS_INBOUND_ENABLED }
sub STATUS_INBOUND_ACTIVE () { $MAPICorec::STATUS_INBOUND_ACTIVE }
sub STATUS_INBOUND_FLUSH () { $MAPICorec::STATUS_INBOUND_FLUSH }
sub STATUS_OUTBOUND_ENABLED () { $MAPICorec::STATUS_OUTBOUND_ENABLED }
sub STATUS_OUTBOUND_ACTIVE () { $MAPICorec::STATUS_OUTBOUND_ACTIVE }
sub STATUS_OUTBOUND_FLUSH () { $MAPICorec::STATUS_OUTBOUND_FLUSH }
sub STATUS_REMOTE_ACCESS () { $MAPICorec::STATUS_REMOTE_ACCESS }
sub SUPPRESS_UI () { $MAPICorec::SUPPRESS_UI }
sub REFRESH_XP_HEADER_CACHE () { $MAPICorec::REFRESH_XP_HEADER_CACHE }
sub PROCESS_XP_HEADER_CACHE () { $MAPICorec::PROCESS_XP_HEADER_CACHE }
sub FORCE_XP_CONNECT () { $MAPICorec::FORCE_XP_CONNECT }
sub FORCE_XP_DISCONNECT () { $MAPICorec::FORCE_XP_DISCONNECT }
sub CONFIG_CHANGED () { $MAPICorec::CONFIG_CHANGED }
sub ABORT_XP_HEADER_OPERATION () { $MAPICorec::ABORT_XP_HEADER_OPERATION }
sub SHOW_XP_SESSION_UI () { $MAPICorec::SHOW_XP_SESSION_UI }
sub UI_READONLY () { $MAPICorec::UI_READONLY }
sub FLUSH_UPLOAD () { $MAPICorec::FLUSH_UPLOAD }
sub FLUSH_DOWNLOAD () { $MAPICorec::FLUSH_DOWNLOAD }
sub FLUSH_FORCE () { $MAPICorec::FLUSH_FORCE }
sub FLUSH_NO_UI () { $MAPICorec::FLUSH_NO_UI }
sub FLUSH_ASYNC_OK () { $MAPICorec::FLUSH_ASYNC_OK }
sub MAPI_TOP_LEVEL () { $MAPICorec::MAPI_TOP_LEVEL }
sub UI_SERVICE () { $MAPICorec::UI_SERVICE }
sub SERVICE_UI_ALWAYS () { $MAPICorec::SERVICE_UI_ALWAYS }
sub SERVICE_UI_ALLOWED () { $MAPICorec::SERVICE_UI_ALLOWED }
sub UI_CURRENT_PROVIDER_FIRST () { $MAPICorec::UI_CURRENT_PROVIDER_FIRST }
sub ADRPARM_HELP_CTX () { $MAPICorec::ADRPARM_HELP_CTX }
sub DIALOG_MODAL () { $MAPICorec::DIALOG_MODAL }
sub DIALOG_SDI () { $MAPICorec::DIALOG_SDI }
sub DIALOG_OPTIONS () { $MAPICorec::DIALOG_OPTIONS }
sub ADDRESS_ONE () { $MAPICorec::ADDRESS_ONE }
sub AB_SELECTONLY () { $MAPICorec::AB_SELECTONLY }
sub AB_RESOLVE () { $MAPICorec::AB_RESOLVE }
sub DT_MAILUSER () { $MAPICorec::DT_MAILUSER }
sub DT_DISTLIST () { $MAPICorec::DT_DISTLIST }
sub DT_FORUM () { $MAPICorec::DT_FORUM }
sub DT_AGENT () { $MAPICorec::DT_AGENT }
sub DT_ORGANIZATION () { $MAPICorec::DT_ORGANIZATION }
sub DT_PRIVATE_DISTLIST () { $MAPICorec::DT_PRIVATE_DISTLIST }
sub DT_REMOTE_MAILUSER () { $MAPICorec::DT_REMOTE_MAILUSER }
sub DT_MODIFIABLE () { $MAPICorec::DT_MODIFIABLE }
sub DT_GLOBAL () { $MAPICorec::DT_GLOBAL }
sub DT_LOCAL () { $MAPICorec::DT_LOCAL }
sub DT_WAN () { $MAPICorec::DT_WAN }
sub DT_NOT_SPECIFIC () { $MAPICorec::DT_NOT_SPECIFIC }
sub DT_FOLDER () { $MAPICorec::DT_FOLDER }
sub DT_FOLDER_LINK () { $MAPICorec::DT_FOLDER_LINK }
sub DT_FOLDER_SPECIAL () { $MAPICorec::DT_FOLDER_SPECIAL }
sub MAPI_DEFERRED_ERRORS () { $MAPICorec::MAPI_DEFERRED_ERRORS }
sub MAPI_ASSOCIATED () { $MAPICorec::MAPI_ASSOCIATED }
sub MDB_NO_DIALOG () { $MAPICorec::MDB_NO_DIALOG }
sub MDB_WRITE () { $MAPICorec::MDB_WRITE }
sub MDB_TEMPORARY () { $MAPICorec::MDB_TEMPORARY }
sub MDB_NO_MAIL () { $MAPICorec::MDB_NO_MAIL }
sub AB_NO_DIALOG () { $MAPICorec::AB_NO_DIALOG }
sub EC_OVERRIDE_HOMESERVER () { $MAPICorec::EC_OVERRIDE_HOMESERVER }
sub MAPI_ALLOW_OTHERS () { $MAPICorec::MAPI_ALLOW_OTHERS }
sub MAPI_EXPLICIT_PROFILE () { $MAPICorec::MAPI_EXPLICIT_PROFILE }
sub MAPI_SERVICE_UI_ALWAYS () { $MAPICorec::MAPI_SERVICE_UI_ALWAYS }
sub MAPI_NO_MAIL () { $MAPICorec::MAPI_NO_MAIL }
sub MAPI_NT_SERVICE () { $MAPICorec::MAPI_NT_SERVICE }
sub MAPI_TIMEOUT_SHORT () { $MAPICorec::MAPI_TIMEOUT_SHORT }
sub MAPI_INIT_VERSION () { $MAPICorec::MAPI_INIT_VERSION }
sub MAPI_MULTITHREAD_NOTIFICATIONS () { $MAPICorec::MAPI_MULTITHREAD_NOTIFICATIONS }
sub MAPI_LOGOFF_SHARED () { $MAPICorec::MAPI_LOGOFF_SHARED }
sub MAPI_LOGOFF_UI () { $MAPICorec::MAPI_LOGOFF_UI }
sub MAPI_DEFAULT_STORE () { $MAPICorec::MAPI_DEFAULT_STORE }
sub MAPI_SIMPLE_STORE_TEMPORARY () { $MAPICorec::MAPI_SIMPLE_STORE_TEMPORARY }
sub MAPI_SIMPLE_STORE_PERMANENT () { $MAPICorec::MAPI_SIMPLE_STORE_PERMANENT }
sub MAPI_PRIMARY_STORE () { $MAPICorec::MAPI_PRIMARY_STORE }
sub MAPI_SECONDARY_STORE () { $MAPICorec::MAPI_SECONDARY_STORE }
sub MAPI_POST_MESSAGE () { $MAPICorec::MAPI_POST_MESSAGE }
sub MAPI_NEW_MESSAGE () { $MAPICorec::MAPI_NEW_MESSAGE }
sub MAPI_DEFAULT_SERVICES () { $MAPICorec::MAPI_DEFAULT_SERVICES }
sub SERVICE_DEFAULT_STORE () { $MAPICorec::SERVICE_DEFAULT_STORE }
sub SERVICE_SINGLE_COPY () { $MAPICorec::SERVICE_SINGLE_COPY }
sub SERVICE_CREATE_WITH_STORE () { $MAPICorec::SERVICE_CREATE_WITH_STORE }
sub SERVICE_PRIMARY_IDENTITY () { $MAPICorec::SERVICE_PRIMARY_IDENTITY }
sub SERVICE_NO_PRIMARY_IDENTITY () { $MAPICorec::SERVICE_NO_PRIMARY_IDENTITY }
sub MAPI_E_CALL_FAILED () { $MAPICorec::MAPI_E_CALL_FAILED }
sub MAPI_E_NOT_ENOUGH_MEMORY () { $MAPICorec::MAPI_E_NOT_ENOUGH_MEMORY }
sub MAPI_E_INVALID_PARAMETER () { $MAPICorec::MAPI_E_INVALID_PARAMETER }
sub MAPI_E_INTERFACE_NOT_SUPPORTED () { $MAPICorec::MAPI_E_INTERFACE_NOT_SUPPORTED }
sub MAPI_E_NO_ACCESS () { $MAPICorec::MAPI_E_NO_ACCESS }
sub MAPI_E_NO_SUPPORT () { $MAPICorec::MAPI_E_NO_SUPPORT }
sub MAPI_E_BAD_CHARWIDTH () { $MAPICorec::MAPI_E_BAD_CHARWIDTH }
sub MAPI_E_STRING_TOO_LONG () { $MAPICorec::MAPI_E_STRING_TOO_LONG }
sub MAPI_E_UNKNOWN_FLAGS () { $MAPICorec::MAPI_E_UNKNOWN_FLAGS }
sub MAPI_E_INVALID_ENTRYID () { $MAPICorec::MAPI_E_INVALID_ENTRYID }
sub MAPI_E_INVALID_OBJECT () { $MAPICorec::MAPI_E_INVALID_OBJECT }
sub MAPI_E_OBJECT_CHANGED () { $MAPICorec::MAPI_E_OBJECT_CHANGED }
sub MAPI_E_OBJECT_DELETED () { $MAPICorec::MAPI_E_OBJECT_DELETED }
sub MAPI_E_BUSY () { $MAPICorec::MAPI_E_BUSY }
sub MAPI_E_NOT_ENOUGH_DISK () { $MAPICorec::MAPI_E_NOT_ENOUGH_DISK }
sub MAPI_E_NOT_ENOUGH_RESOURCES () { $MAPICorec::MAPI_E_NOT_ENOUGH_RESOURCES }
sub MAPI_E_NOT_FOUND () { $MAPICorec::MAPI_E_NOT_FOUND }
sub MAPI_E_VERSION () { $MAPICorec::MAPI_E_VERSION }
sub MAPI_E_LOGON_FAILED () { $MAPICorec::MAPI_E_LOGON_FAILED }
sub MAPI_E_SESSION_LIMIT () { $MAPICorec::MAPI_E_SESSION_LIMIT }
sub MAPI_E_USER_CANCEL () { $MAPICorec::MAPI_E_USER_CANCEL }
sub MAPI_E_UNABLE_TO_ABORT () { $MAPICorec::MAPI_E_UNABLE_TO_ABORT }
sub MAPI_E_NETWORK_ERROR () { $MAPICorec::MAPI_E_NETWORK_ERROR }
sub MAPI_E_DISK_ERROR () { $MAPICorec::MAPI_E_DISK_ERROR }
sub MAPI_E_TOO_COMPLEX () { $MAPICorec::MAPI_E_TOO_COMPLEX }
sub MAPI_E_BAD_COLUMN () { $MAPICorec::MAPI_E_BAD_COLUMN }
sub MAPI_E_EXTENDED_ERROR () { $MAPICorec::MAPI_E_EXTENDED_ERROR }
sub MAPI_E_COMPUTED () { $MAPICorec::MAPI_E_COMPUTED }
sub MAPI_E_CORRUPT_DATA () { $MAPICorec::MAPI_E_CORRUPT_DATA }
sub MAPI_E_UNCONFIGURED () { $MAPICorec::MAPI_E_UNCONFIGURED }
sub MAPI_E_FAILONEPROVIDER () { $MAPICorec::MAPI_E_FAILONEPROVIDER }
sub MAPI_E_UNKNOWN_CPID () { $MAPICorec::MAPI_E_UNKNOWN_CPID }
sub MAPI_E_UNKNOWN_LCID () { $MAPICorec::MAPI_E_UNKNOWN_LCID }
sub MAPI_E_PASSWORD_CHANGE_REQUIRED () { $MAPICorec::MAPI_E_PASSWORD_CHANGE_REQUIRED }
sub MAPI_E_PASSWORD_EXPIRED () { $MAPICorec::MAPI_E_PASSWORD_EXPIRED }
sub MAPI_E_INVALID_WORKSTATION_ACCOUNT () { $MAPICorec::MAPI_E_INVALID_WORKSTATION_ACCOUNT }
sub MAPI_E_INVALID_ACCESS_TIME () { $MAPICorec::MAPI_E_INVALID_ACCESS_TIME }
sub MAPI_E_ACCOUNT_DISABLED () { $MAPICorec::MAPI_E_ACCOUNT_DISABLED }
sub MAPI_E_END_OF_SESSION () { $MAPICorec::MAPI_E_END_OF_SESSION }
sub MAPI_E_UNKNOWN_ENTRYID () { $MAPICorec::MAPI_E_UNKNOWN_ENTRYID }
sub MAPI_E_MISSING_REQUIRED_COLUMN () { $MAPICorec::MAPI_E_MISSING_REQUIRED_COLUMN }
sub MAPI_W_NO_SERVICE () { $MAPICorec::MAPI_W_NO_SERVICE }
sub MAPI_E_BAD_VALUE () { $MAPICorec::MAPI_E_BAD_VALUE }
sub MAPI_E_INVALID_TYPE () { $MAPICorec::MAPI_E_INVALID_TYPE }
sub MAPI_E_TYPE_NO_SUPPORT () { $MAPICorec::MAPI_E_TYPE_NO_SUPPORT }
sub MAPI_E_UNEXPECTED_TYPE () { $MAPICorec::MAPI_E_UNEXPECTED_TYPE }
sub MAPI_E_TOO_BIG () { $MAPICorec::MAPI_E_TOO_BIG }
sub MAPI_E_DECLINE_COPY () { $MAPICorec::MAPI_E_DECLINE_COPY }
sub MAPI_E_UNEXPECTED_ID () { $MAPICorec::MAPI_E_UNEXPECTED_ID }
sub MAPI_W_ERRORS_RETURNED () { $MAPICorec::MAPI_W_ERRORS_RETURNED }
sub MAPI_E_UNABLE_TO_COMPLETE () { $MAPICorec::MAPI_E_UNABLE_TO_COMPLETE }
sub MAPI_E_TIMEOUT () { $MAPICorec::MAPI_E_TIMEOUT }
sub MAPI_E_TABLE_EMPTY () { $MAPICorec::MAPI_E_TABLE_EMPTY }
sub MAPI_E_TABLE_TOO_BIG () { $MAPICorec::MAPI_E_TABLE_TOO_BIG }
sub MAPI_E_INVALID_BOOKMARK () { $MAPICorec::MAPI_E_INVALID_BOOKMARK }
sub MAPI_W_POSITION_CHANGED () { $MAPICorec::MAPI_W_POSITION_CHANGED }
sub MAPI_W_APPROX_COUNT () { $MAPICorec::MAPI_W_APPROX_COUNT }
sub MAPI_E_WAIT () { $MAPICorec::MAPI_E_WAIT }
sub MAPI_E_CANCEL () { $MAPICorec::MAPI_E_CANCEL }
sub MAPI_E_NOT_ME () { $MAPICorec::MAPI_E_NOT_ME }
sub MAPI_W_CANCEL_MESSAGE () { $MAPICorec::MAPI_W_CANCEL_MESSAGE }
sub MAPI_E_CORRUPT_STORE () { $MAPICorec::MAPI_E_CORRUPT_STORE }
sub MAPI_E_NOT_IN_QUEUE () { $MAPICorec::MAPI_E_NOT_IN_QUEUE }
sub MAPI_E_NO_SUPPRESS () { $MAPICorec::MAPI_E_NO_SUPPRESS }
sub MAPI_E_COLLISION () { $MAPICorec::MAPI_E_COLLISION }
sub MAPI_E_NOT_INITIALIZED () { $MAPICorec::MAPI_E_NOT_INITIALIZED }
sub MAPI_E_NON_STANDARD () { $MAPICorec::MAPI_E_NON_STANDARD }
sub MAPI_E_NO_RECIPIENTS () { $MAPICorec::MAPI_E_NO_RECIPIENTS }
sub MAPI_E_SUBMITTED () { $MAPICorec::MAPI_E_SUBMITTED }
sub MAPI_E_HAS_FOLDERS () { $MAPICorec::MAPI_E_HAS_FOLDERS }
sub MAPI_E_HAS_MESSAGES () { $MAPICorec::MAPI_E_HAS_MESSAGES }
sub MAPI_E_FOLDER_CYCLE () { $MAPICorec::MAPI_E_FOLDER_CYCLE }
sub MAPI_W_PARTIAL_COMPLETION () { $MAPICorec::MAPI_W_PARTIAL_COMPLETION }
sub MAPI_E_AMBIGUOUS_RECIP () { $MAPICorec::MAPI_E_AMBIGUOUS_RECIP }
sub MAPI_E_STORE_FULL () { $MAPICorec::MAPI_E_STORE_FULL }
sub SYNC_UNICODE () { $MAPICorec::SYNC_UNICODE }
sub SYNC_NO_DELETIONS () { $MAPICorec::SYNC_NO_DELETIONS }
sub SYNC_NO_SOFT_DELETIONS () { $MAPICorec::SYNC_NO_SOFT_DELETIONS }
sub SYNC_READ_STATE () { $MAPICorec::SYNC_READ_STATE }
sub SYNC_ASSOCIATED () { $MAPICorec::SYNC_ASSOCIATED }
sub SYNC_NORMAL () { $MAPICorec::SYNC_NORMAL }
sub SYNC_NO_CONFLICTS () { $MAPICorec::SYNC_NO_CONFLICTS }
sub SYNC_ONLY_SPECIFIED_PROPS () { $MAPICorec::SYNC_ONLY_SPECIFIED_PROPS }
sub SYNC_NO_FOREIGN_KEYS () { $MAPICorec::SYNC_NO_FOREIGN_KEYS }
sub SYNC_LIMITED_IMESSAGE () { $MAPICorec::SYNC_LIMITED_IMESSAGE }
sub SYNC_CATCHUP () { $MAPICorec::SYNC_CATCHUP }
sub SYNC_NEW_MESSAGE () { $MAPICorec::SYNC_NEW_MESSAGE }
sub SYNC_MSG_SELECTIVE () { $MAPICorec::SYNC_MSG_SELECTIVE }
sub SYNC_BEST_BODY () { $MAPICorec::SYNC_BEST_BODY }
sub SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED () { $MAPICorec::SYNC_IGNORE_SPECIFIED_ON_ASSOCIATED }
sub SYNC_PROGRESS_MODE () { $MAPICorec::SYNC_PROGRESS_MODE }
sub SYNC_FXRECOVERMODE () { $MAPICorec::SYNC_FXRECOVERMODE }
sub SYNC_DEFER_CONFIG () { $MAPICorec::SYNC_DEFER_CONFIG }
sub SYNC_FORCE_UNICODE () { $MAPICorec::SYNC_FORCE_UNICODE }
sub DELETE_HARD_DELETE () { $MAPICorec::DELETE_HARD_DELETE }
sub ROWLIST_REPLACE () { $MAPICorec::ROWLIST_REPLACE }
sub ROW_ADD () { $MAPICorec::ROW_ADD }
sub ROW_MODIFY () { $MAPICorec::ROW_MODIFY }
sub ROW_REMOVE () { $MAPICorec::ROW_REMOVE }
sub ROW_EMPTY () { $MAPICorec::ROW_EMPTY }
sub SYNC_E_UNKNOWN_FLAGS () { $MAPICorec::SYNC_E_UNKNOWN_FLAGS }
sub SYNC_E_INVALID_PARAMETER () { $MAPICorec::SYNC_E_INVALID_PARAMETER }
sub SYNC_E_ERROR () { $MAPICorec::SYNC_E_ERROR }
sub SYNC_E_OBJECT_DELETED () { $MAPICorec::SYNC_E_OBJECT_DELETED }
sub SYNC_E_IGNORE () { $MAPICorec::SYNC_E_IGNORE }
sub SYNC_E_CONFLICT () { $MAPICorec::SYNC_E_CONFLICT }
sub SYNC_E_NO_PARENT () { $MAPICorec::SYNC_E_NO_PARENT }
sub SYNC_E_INCEST () { $MAPICorec::SYNC_E_INCEST }
sub SYNC_E_UNSYNCHRONIZED () { $MAPICorec::SYNC_E_UNSYNCHRONIZED }
sub SYNC_W_PROGRESS () { $MAPICorec::SYNC_W_PROGRESS }
sub SYNC_W_CLIENT_CHANGE_NEWER () { $MAPICorec::SYNC_W_CLIENT_CHANGE_NEWER }
sub ECSTORE_TYPE_PRIVATE () { $MAPICorec::ECSTORE_TYPE_PRIVATE }
sub ECSTORE_TYPE_PUBLIC () { $MAPICorec::ECSTORE_TYPE_PUBLIC }
sub ECSTORE_TYPE_ARCHIVE () { $MAPICorec::ECSTORE_TYPE_ARCHIVE }
sub MAPI_ORIG () { $MAPICorec::MAPI_ORIG }
sub MAPI_TO () { $MAPICorec::MAPI_TO }
sub MAPI_CC () { $MAPICorec::MAPI_CC }
sub MAPI_BCC () { $MAPICorec::MAPI_BCC }
sub MAPI_P1 () { $MAPICorec::MAPI_P1 }
sub MAPI_SUBMITTED () { $MAPICorec::MAPI_SUBMITTED }
sub MAPI_UNREAD () { $MAPICorec::MAPI_UNREAD }
sub MAPI_RECEIPT_REQUESTED () { $MAPICorec::MAPI_RECEIPT_REQUESTED }
sub MAPI_SENT () { $MAPICorec::MAPI_SENT }
sub MAPI_LOGON_UI () { $MAPICorec::MAPI_LOGON_UI }
sub MAPI_PASSWORD_UI () { $MAPICorec::MAPI_PASSWORD_UI }
sub MAPI_NEW_SESSION () { $MAPICorec::MAPI_NEW_SESSION }
sub MAPI_FORCE_DOWNLOAD () { $MAPICorec::MAPI_FORCE_DOWNLOAD }
sub MAPI_EXTENDED () { $MAPICorec::MAPI_EXTENDED }
sub MAPI_DIALOG () { $MAPICorec::MAPI_DIALOG }
sub MAPI_USE_DEFAULT () { $MAPICorec::MAPI_USE_DEFAULT }
sub MAPI_UNREAD_ONLY () { $MAPICorec::MAPI_UNREAD_ONLY }
sub MAPI_GUARANTEE_FIFO () { $MAPICorec::MAPI_GUARANTEE_FIFO }
sub MAPI_LONG_MSGID () { $MAPICorec::MAPI_LONG_MSGID }
sub MAPI_PEEK () { $MAPICorec::MAPI_PEEK }
sub MAPI_SUPPRESS_ATTACH () { $MAPICorec::MAPI_SUPPRESS_ATTACH }
sub MAPI_ENVELOPE_ONLY () { $MAPICorec::MAPI_ENVELOPE_ONLY }
sub MAPI_BODY_AS_FILE () { $MAPICorec::MAPI_BODY_AS_FILE }
sub MAPI_AB_NOMODIFY () { $MAPICorec::MAPI_AB_NOMODIFY }

# ------- VARIABLE STUBS --------

package MAPICore;

1;
